
Lab04.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000022bc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000052  00800060  000022bc  00002350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000f1  008000b2  008000b2  000023a2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000023a2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000023d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002c8  00000000  00000000  00002410  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001e24  00000000  00000000  000026d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cf1  00000000  00000000  000044fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001b96  00000000  00000000  000051ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000aac  00000000  00000000  00006d84  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000aa1  00000000  00000000  00007830  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000162a  00000000  00000000  000082d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002b0  00000000  00000000  000098fb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 4d 0c 	jmp	0x189a	; 0x189a <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 36 0e 	jmp	0x1c6c	; 0x1c6c <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 eb 0d 	jmp	0x1bd6	; 0x1bd6 <__vector_15>
      40:	0c 94 8f 07 	jmp	0xf1e	; 0xf1e <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec eb       	ldi	r30, 0xBC	; 188
      68:	f2 e2       	ldi	r31, 0x22	; 34
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a2 3b       	cpi	r26, 0xB2	; 178
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	a2 eb       	ldi	r26, 0xB2	; 178
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 3a       	cpi	r26, 0xA3	; 163
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 8f 0c 	call	0x191e	; 0x191e <main>
      8a:	0c 94 5c 11 	jmp	0x22b8	; 0x22b8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <bufferInit>:
	// return character at index in buffer
	unsigned char data = buffer->dataptr[(buffer->dataindex+index)%(buffer->size)];
	// end critical section
	CRITICAL_SECTION_END;
	return data;
}
      92:	cf 93       	push	r28
      94:	df 93       	push	r29
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
      9a:	27 97       	sbiw	r28, 0x07	; 7
      9c:	0f b6       	in	r0, 0x3f	; 63
      9e:	f8 94       	cli
      a0:	de bf       	out	0x3e, r29	; 62
      a2:	0f be       	out	0x3f, r0	; 63
      a4:	cd bf       	out	0x3d, r28	; 61
      a6:	9b 83       	std	Y+3, r25	; 0x03
      a8:	8a 83       	std	Y+2, r24	; 0x02
      aa:	7d 83       	std	Y+5, r23	; 0x05
      ac:	6c 83       	std	Y+4, r22	; 0x04
      ae:	5f 83       	std	Y+7, r21	; 0x07
      b0:	4e 83       	std	Y+6, r20	; 0x06
      b2:	8f e5       	ldi	r24, 0x5F	; 95
      b4:	90 e0       	ldi	r25, 0x00	; 0
      b6:	fc 01       	movw	r30, r24
      b8:	80 81       	ld	r24, Z
      ba:	89 83       	std	Y+1, r24	; 0x01
      bc:	f8 94       	cli
      be:	8a 81       	ldd	r24, Y+2	; 0x02
      c0:	9b 81       	ldd	r25, Y+3	; 0x03
      c2:	2c 81       	ldd	r18, Y+4	; 0x04
      c4:	3d 81       	ldd	r19, Y+5	; 0x05
      c6:	fc 01       	movw	r30, r24
      c8:	31 83       	std	Z+1, r19	; 0x01
      ca:	20 83       	st	Z, r18
      cc:	8a 81       	ldd	r24, Y+2	; 0x02
      ce:	9b 81       	ldd	r25, Y+3	; 0x03
      d0:	2e 81       	ldd	r18, Y+6	; 0x06
      d2:	3f 81       	ldd	r19, Y+7	; 0x07
      d4:	fc 01       	movw	r30, r24
      d6:	33 83       	std	Z+3, r19	; 0x03
      d8:	22 83       	std	Z+2, r18	; 0x02
      da:	8a 81       	ldd	r24, Y+2	; 0x02
      dc:	9b 81       	ldd	r25, Y+3	; 0x03
      de:	fc 01       	movw	r30, r24
      e0:	17 82       	std	Z+7, r1	; 0x07
      e2:	16 82       	std	Z+6, r1	; 0x06
      e4:	8a 81       	ldd	r24, Y+2	; 0x02
      e6:	9b 81       	ldd	r25, Y+3	; 0x03
      e8:	fc 01       	movw	r30, r24
      ea:	15 82       	std	Z+5, r1	; 0x05
      ec:	14 82       	std	Z+4, r1	; 0x04
      ee:	8f e5       	ldi	r24, 0x5F	; 95
      f0:	90 e0       	ldi	r25, 0x00	; 0
      f2:	29 81       	ldd	r18, Y+1	; 0x01
      f4:	fc 01       	movw	r30, r24
      f6:	20 83       	st	Z, r18
      f8:	00 00       	nop
      fa:	27 96       	adiw	r28, 0x07	; 7
      fc:	0f b6       	in	r0, 0x3f	; 63
      fe:	f8 94       	cli
     100:	de bf       	out	0x3e, r29	; 62
     102:	0f be       	out	0x3f, r0	; 63
     104:	cd bf       	out	0x3d, r28	; 61
     106:	df 91       	pop	r29
     108:	cf 91       	pop	r28
     10a:	08 95       	ret

0000010c <bufferGetFromFront>:
     10c:	cf 93       	push	r28
     10e:	df 93       	push	r29
     110:	00 d0       	rcall	.+0      	; 0x112 <bufferGetFromFront+0x6>
     112:	00 d0       	rcall	.+0      	; 0x114 <bufferGetFromFront+0x8>
     114:	cd b7       	in	r28, 0x3d	; 61
     116:	de b7       	in	r29, 0x3e	; 62
     118:	9c 83       	std	Y+4, r25	; 0x04
     11a:	8b 83       	std	Y+3, r24	; 0x03
     11c:	19 82       	std	Y+1, r1	; 0x01
     11e:	8f e5       	ldi	r24, 0x5F	; 95
     120:	90 e0       	ldi	r25, 0x00	; 0
     122:	fc 01       	movw	r30, r24
     124:	80 81       	ld	r24, Z
     126:	8a 83       	std	Y+2, r24	; 0x02
     128:	f8 94       	cli
     12a:	8b 81       	ldd	r24, Y+3	; 0x03
     12c:	9c 81       	ldd	r25, Y+4	; 0x04
     12e:	fc 01       	movw	r30, r24
     130:	84 81       	ldd	r24, Z+4	; 0x04
     132:	95 81       	ldd	r25, Z+5	; 0x05
     134:	89 2b       	or	r24, r25
     136:	09 f4       	brne	.+2      	; 0x13a <bufferGetFromFront+0x2e>
     138:	47 c0       	rjmp	.+142    	; 0x1c8 <bufferGetFromFront+0xbc>
     13a:	8b 81       	ldd	r24, Y+3	; 0x03
     13c:	9c 81       	ldd	r25, Y+4	; 0x04
     13e:	fc 01       	movw	r30, r24
     140:	20 81       	ld	r18, Z
     142:	31 81       	ldd	r19, Z+1	; 0x01
     144:	8b 81       	ldd	r24, Y+3	; 0x03
     146:	9c 81       	ldd	r25, Y+4	; 0x04
     148:	fc 01       	movw	r30, r24
     14a:	86 81       	ldd	r24, Z+6	; 0x06
     14c:	97 81       	ldd	r25, Z+7	; 0x07
     14e:	82 0f       	add	r24, r18
     150:	93 1f       	adc	r25, r19
     152:	fc 01       	movw	r30, r24
     154:	80 81       	ld	r24, Z
     156:	89 83       	std	Y+1, r24	; 0x01
     158:	8b 81       	ldd	r24, Y+3	; 0x03
     15a:	9c 81       	ldd	r25, Y+4	; 0x04
     15c:	fc 01       	movw	r30, r24
     15e:	86 81       	ldd	r24, Z+6	; 0x06
     160:	97 81       	ldd	r25, Z+7	; 0x07
     162:	9c 01       	movw	r18, r24
     164:	2f 5f       	subi	r18, 0xFF	; 255
     166:	3f 4f       	sbci	r19, 0xFF	; 255
     168:	8b 81       	ldd	r24, Y+3	; 0x03
     16a:	9c 81       	ldd	r25, Y+4	; 0x04
     16c:	fc 01       	movw	r30, r24
     16e:	37 83       	std	Z+7, r19	; 0x07
     170:	26 83       	std	Z+6, r18	; 0x06
     172:	8b 81       	ldd	r24, Y+3	; 0x03
     174:	9c 81       	ldd	r25, Y+4	; 0x04
     176:	fc 01       	movw	r30, r24
     178:	26 81       	ldd	r18, Z+6	; 0x06
     17a:	37 81       	ldd	r19, Z+7	; 0x07
     17c:	8b 81       	ldd	r24, Y+3	; 0x03
     17e:	9c 81       	ldd	r25, Y+4	; 0x04
     180:	fc 01       	movw	r30, r24
     182:	82 81       	ldd	r24, Z+2	; 0x02
     184:	93 81       	ldd	r25, Z+3	; 0x03
     186:	28 17       	cp	r18, r24
     188:	39 07       	cpc	r19, r25
     18a:	88 f0       	brcs	.+34     	; 0x1ae <bufferGetFromFront+0xa2>
     18c:	8b 81       	ldd	r24, Y+3	; 0x03
     18e:	9c 81       	ldd	r25, Y+4	; 0x04
     190:	fc 01       	movw	r30, r24
     192:	26 81       	ldd	r18, Z+6	; 0x06
     194:	37 81       	ldd	r19, Z+7	; 0x07
     196:	8b 81       	ldd	r24, Y+3	; 0x03
     198:	9c 81       	ldd	r25, Y+4	; 0x04
     19a:	fc 01       	movw	r30, r24
     19c:	82 81       	ldd	r24, Z+2	; 0x02
     19e:	93 81       	ldd	r25, Z+3	; 0x03
     1a0:	28 1b       	sub	r18, r24
     1a2:	39 0b       	sbc	r19, r25
     1a4:	8b 81       	ldd	r24, Y+3	; 0x03
     1a6:	9c 81       	ldd	r25, Y+4	; 0x04
     1a8:	fc 01       	movw	r30, r24
     1aa:	37 83       	std	Z+7, r19	; 0x07
     1ac:	26 83       	std	Z+6, r18	; 0x06
     1ae:	8b 81       	ldd	r24, Y+3	; 0x03
     1b0:	9c 81       	ldd	r25, Y+4	; 0x04
     1b2:	fc 01       	movw	r30, r24
     1b4:	84 81       	ldd	r24, Z+4	; 0x04
     1b6:	95 81       	ldd	r25, Z+5	; 0x05
     1b8:	9c 01       	movw	r18, r24
     1ba:	21 50       	subi	r18, 0x01	; 1
     1bc:	31 09       	sbc	r19, r1
     1be:	8b 81       	ldd	r24, Y+3	; 0x03
     1c0:	9c 81       	ldd	r25, Y+4	; 0x04
     1c2:	fc 01       	movw	r30, r24
     1c4:	35 83       	std	Z+5, r19	; 0x05
     1c6:	24 83       	std	Z+4, r18	; 0x04
     1c8:	8f e5       	ldi	r24, 0x5F	; 95
     1ca:	90 e0       	ldi	r25, 0x00	; 0
     1cc:	2a 81       	ldd	r18, Y+2	; 0x02
     1ce:	fc 01       	movw	r30, r24
     1d0:	20 83       	st	Z, r18
     1d2:	89 81       	ldd	r24, Y+1	; 0x01
     1d4:	0f 90       	pop	r0
     1d6:	0f 90       	pop	r0
     1d8:	0f 90       	pop	r0
     1da:	0f 90       	pop	r0
     1dc:	df 91       	pop	r29
     1de:	cf 91       	pop	r28
     1e0:	08 95       	ret

000001e2 <bufferAddToEnd>:

unsigned char bufferAddToEnd(cBuffer* buffer, unsigned char data)
{
     1e2:	cf 93       	push	r28
     1e4:	df 93       	push	r29
     1e6:	00 d0       	rcall	.+0      	; 0x1e8 <bufferAddToEnd+0x6>
     1e8:	00 d0       	rcall	.+0      	; 0x1ea <bufferAddToEnd+0x8>
     1ea:	cd b7       	in	r28, 0x3d	; 61
     1ec:	de b7       	in	r29, 0x3e	; 62
     1ee:	9b 83       	std	Y+3, r25	; 0x03
     1f0:	8a 83       	std	Y+2, r24	; 0x02
     1f2:	6c 83       	std	Y+4, r22	; 0x04
	// begin critical section
	CRITICAL_SECTION_START;
     1f4:	8f e5       	ldi	r24, 0x5F	; 95
     1f6:	90 e0       	ldi	r25, 0x00	; 0
     1f8:	fc 01       	movw	r30, r24
     1fa:	80 81       	ld	r24, Z
     1fc:	89 83       	std	Y+1, r24	; 0x01
     1fe:	f8 94       	cli
	// make sure the buffer has room
	if(buffer->datalength < buffer->size)
     200:	8a 81       	ldd	r24, Y+2	; 0x02
     202:	9b 81       	ldd	r25, Y+3	; 0x03
     204:	fc 01       	movw	r30, r24
     206:	24 81       	ldd	r18, Z+4	; 0x04
     208:	35 81       	ldd	r19, Z+5	; 0x05
     20a:	8a 81       	ldd	r24, Y+2	; 0x02
     20c:	9b 81       	ldd	r25, Y+3	; 0x03
     20e:	fc 01       	movw	r30, r24
     210:	82 81       	ldd	r24, Z+2	; 0x02
     212:	93 81       	ldd	r25, Z+3	; 0x03
     214:	28 17       	cp	r18, r24
     216:	39 07       	cpc	r19, r25
     218:	a0 f5       	brcc	.+104    	; 0x282 <bufferAddToEnd+0xa0>
	{
		// save data byte at end of buffer
		buffer->dataptr[(buffer->dataindex + buffer->datalength) % buffer->size] = data;
     21a:	8a 81       	ldd	r24, Y+2	; 0x02
     21c:	9b 81       	ldd	r25, Y+3	; 0x03
     21e:	fc 01       	movw	r30, r24
     220:	20 81       	ld	r18, Z
     222:	31 81       	ldd	r19, Z+1	; 0x01
     224:	8a 81       	ldd	r24, Y+2	; 0x02
     226:	9b 81       	ldd	r25, Y+3	; 0x03
     228:	fc 01       	movw	r30, r24
     22a:	46 81       	ldd	r20, Z+6	; 0x06
     22c:	57 81       	ldd	r21, Z+7	; 0x07
     22e:	8a 81       	ldd	r24, Y+2	; 0x02
     230:	9b 81       	ldd	r25, Y+3	; 0x03
     232:	fc 01       	movw	r30, r24
     234:	84 81       	ldd	r24, Z+4	; 0x04
     236:	95 81       	ldd	r25, Z+5	; 0x05
     238:	ba 01       	movw	r22, r20
     23a:	68 0f       	add	r22, r24
     23c:	79 1f       	adc	r23, r25
     23e:	8a 81       	ldd	r24, Y+2	; 0x02
     240:	9b 81       	ldd	r25, Y+3	; 0x03
     242:	fc 01       	movw	r30, r24
     244:	42 81       	ldd	r20, Z+2	; 0x02
     246:	53 81       	ldd	r21, Z+3	; 0x03
     248:	cb 01       	movw	r24, r22
     24a:	ba 01       	movw	r22, r20
     24c:	0e 94 c9 10 	call	0x2192	; 0x2192 <__udivmodhi4>
     250:	82 0f       	add	r24, r18
     252:	93 1f       	adc	r25, r19
     254:	2c 81       	ldd	r18, Y+4	; 0x04
     256:	fc 01       	movw	r30, r24
     258:	20 83       	st	Z, r18
		// increment the length
		buffer->datalength++;
     25a:	8a 81       	ldd	r24, Y+2	; 0x02
     25c:	9b 81       	ldd	r25, Y+3	; 0x03
     25e:	fc 01       	movw	r30, r24
     260:	84 81       	ldd	r24, Z+4	; 0x04
     262:	95 81       	ldd	r25, Z+5	; 0x05
     264:	9c 01       	movw	r18, r24
     266:	2f 5f       	subi	r18, 0xFF	; 255
     268:	3f 4f       	sbci	r19, 0xFF	; 255
     26a:	8a 81       	ldd	r24, Y+2	; 0x02
     26c:	9b 81       	ldd	r25, Y+3	; 0x03
     26e:	fc 01       	movw	r30, r24
     270:	35 83       	std	Z+5, r19	; 0x05
     272:	24 83       	std	Z+4, r18	; 0x04
		// end critical section
		CRITICAL_SECTION_END;
     274:	8f e5       	ldi	r24, 0x5F	; 95
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	29 81       	ldd	r18, Y+1	; 0x01
     27a:	fc 01       	movw	r30, r24
     27c:	20 83       	st	Z, r18
		// return success
		return -1;
     27e:	8f ef       	ldi	r24, 0xFF	; 255
     280:	06 c0       	rjmp	.+12     	; 0x28e <bufferAddToEnd+0xac>
	}
	// end critical section
	CRITICAL_SECTION_END;
     282:	8f e5       	ldi	r24, 0x5F	; 95
     284:	90 e0       	ldi	r25, 0x00	; 0
     286:	29 81       	ldd	r18, Y+1	; 0x01
     288:	fc 01       	movw	r30, r24
     28a:	20 83       	st	Z, r18
	// return failure
	return 0;
     28c:	80 e0       	ldi	r24, 0x00	; 0
}
     28e:	0f 90       	pop	r0
     290:	0f 90       	pop	r0
     292:	0f 90       	pop	r0
     294:	0f 90       	pop	r0
     296:	df 91       	pop	r29
     298:	cf 91       	pop	r28
     29a:	08 95       	ret

0000029c <_LCD_OutNibble>:
// Shift display right
//-------------------------------------
void LCD_ShiftRight(void)
{
LCD_WriteCommand(HD44780_DISPLAY_CURSOR_SHIFT | HD44780_SHIFT_RIGHT | HD44780_SHIFT_DISPLAY);
}
     29c:	cf 93       	push	r28
     29e:	df 93       	push	r29
     2a0:	1f 92       	push	r1
     2a2:	cd b7       	in	r28, 0x3d	; 61
     2a4:	de b7       	in	r29, 0x3e	; 62
     2a6:	89 83       	std	Y+1, r24	; 0x01
     2a8:	89 81       	ldd	r24, Y+1	; 0x01
     2aa:	88 2f       	mov	r24, r24
     2ac:	90 e0       	ldi	r25, 0x00	; 0
     2ae:	81 70       	andi	r24, 0x01	; 1
     2b0:	99 27       	eor	r25, r25
     2b2:	89 2b       	or	r24, r25
     2b4:	51 f0       	breq	.+20     	; 0x2ca <_LCD_OutNibble+0x2e>
     2b6:	8b e3       	ldi	r24, 0x3B	; 59
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	2b e3       	ldi	r18, 0x3B	; 59
     2bc:	30 e0       	ldi	r19, 0x00	; 0
     2be:	f9 01       	movw	r30, r18
     2c0:	20 81       	ld	r18, Z
     2c2:	24 60       	ori	r18, 0x04	; 4
     2c4:	fc 01       	movw	r30, r24
     2c6:	20 83       	st	Z, r18
     2c8:	09 c0       	rjmp	.+18     	; 0x2dc <_LCD_OutNibble+0x40>
     2ca:	8b e3       	ldi	r24, 0x3B	; 59
     2cc:	90 e0       	ldi	r25, 0x00	; 0
     2ce:	2b e3       	ldi	r18, 0x3B	; 59
     2d0:	30 e0       	ldi	r19, 0x00	; 0
     2d2:	f9 01       	movw	r30, r18
     2d4:	20 81       	ld	r18, Z
     2d6:	2b 7f       	andi	r18, 0xFB	; 251
     2d8:	fc 01       	movw	r30, r24
     2da:	20 83       	st	Z, r18
     2dc:	89 81       	ldd	r24, Y+1	; 0x01
     2de:	88 2f       	mov	r24, r24
     2e0:	90 e0       	ldi	r25, 0x00	; 0
     2e2:	82 70       	andi	r24, 0x02	; 2
     2e4:	99 27       	eor	r25, r25
     2e6:	89 2b       	or	r24, r25
     2e8:	51 f0       	breq	.+20     	; 0x2fe <_LCD_OutNibble+0x62>
     2ea:	8b e3       	ldi	r24, 0x3B	; 59
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	2b e3       	ldi	r18, 0x3B	; 59
     2f0:	30 e0       	ldi	r19, 0x00	; 0
     2f2:	f9 01       	movw	r30, r18
     2f4:	20 81       	ld	r18, Z
     2f6:	28 60       	ori	r18, 0x08	; 8
     2f8:	fc 01       	movw	r30, r24
     2fa:	20 83       	st	Z, r18
     2fc:	09 c0       	rjmp	.+18     	; 0x310 <_LCD_OutNibble+0x74>
     2fe:	8b e3       	ldi	r24, 0x3B	; 59
     300:	90 e0       	ldi	r25, 0x00	; 0
     302:	2b e3       	ldi	r18, 0x3B	; 59
     304:	30 e0       	ldi	r19, 0x00	; 0
     306:	f9 01       	movw	r30, r18
     308:	20 81       	ld	r18, Z
     30a:	27 7f       	andi	r18, 0xF7	; 247
     30c:	fc 01       	movw	r30, r24
     30e:	20 83       	st	Z, r18
     310:	89 81       	ldd	r24, Y+1	; 0x01
     312:	88 2f       	mov	r24, r24
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	84 70       	andi	r24, 0x04	; 4
     318:	99 27       	eor	r25, r25
     31a:	89 2b       	or	r24, r25
     31c:	51 f0       	breq	.+20     	; 0x332 <_LCD_OutNibble+0x96>
     31e:	8b e3       	ldi	r24, 0x3B	; 59
     320:	90 e0       	ldi	r25, 0x00	; 0
     322:	2b e3       	ldi	r18, 0x3B	; 59
     324:	30 e0       	ldi	r19, 0x00	; 0
     326:	f9 01       	movw	r30, r18
     328:	20 81       	ld	r18, Z
     32a:	20 61       	ori	r18, 0x10	; 16
     32c:	fc 01       	movw	r30, r24
     32e:	20 83       	st	Z, r18
     330:	09 c0       	rjmp	.+18     	; 0x344 <_LCD_OutNibble+0xa8>
     332:	8b e3       	ldi	r24, 0x3B	; 59
     334:	90 e0       	ldi	r25, 0x00	; 0
     336:	2b e3       	ldi	r18, 0x3B	; 59
     338:	30 e0       	ldi	r19, 0x00	; 0
     33a:	f9 01       	movw	r30, r18
     33c:	20 81       	ld	r18, Z
     33e:	2f 7e       	andi	r18, 0xEF	; 239
     340:	fc 01       	movw	r30, r24
     342:	20 83       	st	Z, r18
     344:	89 81       	ldd	r24, Y+1	; 0x01
     346:	88 2f       	mov	r24, r24
     348:	90 e0       	ldi	r25, 0x00	; 0
     34a:	88 70       	andi	r24, 0x08	; 8
     34c:	99 27       	eor	r25, r25
     34e:	89 2b       	or	r24, r25
     350:	51 f0       	breq	.+20     	; 0x366 <_LCD_OutNibble+0xca>
     352:	8b e3       	ldi	r24, 0x3B	; 59
     354:	90 e0       	ldi	r25, 0x00	; 0
     356:	2b e3       	ldi	r18, 0x3B	; 59
     358:	30 e0       	ldi	r19, 0x00	; 0
     35a:	f9 01       	movw	r30, r18
     35c:	20 81       	ld	r18, Z
     35e:	20 62       	ori	r18, 0x20	; 32
     360:	fc 01       	movw	r30, r24
     362:	20 83       	st	Z, r18
     364:	09 c0       	rjmp	.+18     	; 0x378 <_LCD_OutNibble+0xdc>
     366:	8b e3       	ldi	r24, 0x3B	; 59
     368:	90 e0       	ldi	r25, 0x00	; 0
     36a:	2b e3       	ldi	r18, 0x3B	; 59
     36c:	30 e0       	ldi	r19, 0x00	; 0
     36e:	f9 01       	movw	r30, r18
     370:	20 81       	ld	r18, Z
     372:	2f 7d       	andi	r18, 0xDF	; 223
     374:	fc 01       	movw	r30, r24
     376:	20 83       	st	Z, r18
     378:	00 00       	nop
     37a:	0f 90       	pop	r0
     37c:	df 91       	pop	r29
     37e:	cf 91       	pop	r28
     380:	08 95       	ret

00000382 <_LCD_Write>:
     382:	cf 93       	push	r28
     384:	df 93       	push	r29
     386:	cd b7       	in	r28, 0x3d	; 61
     388:	de b7       	in	r29, 0x3e	; 62
     38a:	a1 97       	sbiw	r28, 0x21	; 33
     38c:	0f b6       	in	r0, 0x3f	; 63
     38e:	f8 94       	cli
     390:	de bf       	out	0x3e, r29	; 62
     392:	0f be       	out	0x3f, r0	; 63
     394:	cd bf       	out	0x3d, r28	; 61
     396:	89 a3       	std	Y+33, r24	; 0x21
     398:	8b e3       	ldi	r24, 0x3B	; 59
     39a:	90 e0       	ldi	r25, 0x00	; 0
     39c:	2b e3       	ldi	r18, 0x3B	; 59
     39e:	30 e0       	ldi	r19, 0x00	; 0
     3a0:	f9 01       	movw	r30, r18
     3a2:	20 81       	ld	r18, Z
     3a4:	20 64       	ori	r18, 0x40	; 64
     3a6:	fc 01       	movw	r30, r24
     3a8:	20 83       	st	Z, r18
     3aa:	89 a1       	ldd	r24, Y+33	; 0x21
     3ac:	82 95       	swap	r24
     3ae:	8f 70       	andi	r24, 0x0F	; 15
     3b0:	0e 94 4e 01 	call	0x29c	; 0x29c <_LCD_OutNibble>
     3b4:	8b e3       	ldi	r24, 0x3B	; 59
     3b6:	90 e0       	ldi	r25, 0x00	; 0
     3b8:	2b e3       	ldi	r18, 0x3B	; 59
     3ba:	30 e0       	ldi	r19, 0x00	; 0
     3bc:	f9 01       	movw	r30, r18
     3be:	20 81       	ld	r18, Z
     3c0:	2f 7b       	andi	r18, 0xBF	; 191
     3c2:	fc 01       	movw	r30, r24
     3c4:	20 83       	st	Z, r18
     3c6:	8b e3       	ldi	r24, 0x3B	; 59
     3c8:	90 e0       	ldi	r25, 0x00	; 0
     3ca:	2b e3       	ldi	r18, 0x3B	; 59
     3cc:	30 e0       	ldi	r19, 0x00	; 0
     3ce:	f9 01       	movw	r30, r18
     3d0:	20 81       	ld	r18, Z
     3d2:	20 64       	ori	r18, 0x40	; 64
     3d4:	fc 01       	movw	r30, r24
     3d6:	20 83       	st	Z, r18
     3d8:	89 a1       	ldd	r24, Y+33	; 0x21
     3da:	0e 94 4e 01 	call	0x29c	; 0x29c <_LCD_OutNibble>
     3de:	8b e3       	ldi	r24, 0x3B	; 59
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	2b e3       	ldi	r18, 0x3B	; 59
     3e4:	30 e0       	ldi	r19, 0x00	; 0
     3e6:	f9 01       	movw	r30, r18
     3e8:	20 81       	ld	r18, Z
     3ea:	2f 7b       	andi	r18, 0xBF	; 191
     3ec:	fc 01       	movw	r30, r24
     3ee:	20 83       	st	Z, r18
     3f0:	80 e0       	ldi	r24, 0x00	; 0
     3f2:	90 e0       	ldi	r25, 0x00	; 0
     3f4:	a8 e4       	ldi	r26, 0x48	; 72
     3f6:	b2 e4       	ldi	r27, 0x42	; 66
     3f8:	89 83       	std	Y+1, r24	; 0x01
     3fa:	9a 83       	std	Y+2, r25	; 0x02
     3fc:	ab 83       	std	Y+3, r26	; 0x03
     3fe:	bc 83       	std	Y+4, r27	; 0x04
     400:	2b ea       	ldi	r18, 0xAB	; 171
     402:	3a ea       	ldi	r19, 0xAA	; 170
     404:	4a ea       	ldi	r20, 0xAA	; 170
     406:	50 e4       	ldi	r21, 0x40	; 64
     408:	69 81       	ldd	r22, Y+1	; 0x01
     40a:	7a 81       	ldd	r23, Y+2	; 0x02
     40c:	8b 81       	ldd	r24, Y+3	; 0x03
     40e:	9c 81       	ldd	r25, Y+4	; 0x04
     410:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <__mulsf3>
     414:	dc 01       	movw	r26, r24
     416:	cb 01       	movw	r24, r22
     418:	8d 83       	std	Y+5, r24	; 0x05
     41a:	9e 83       	std	Y+6, r25	; 0x06
     41c:	af 83       	std	Y+7, r26	; 0x07
     41e:	b8 87       	std	Y+8, r27	; 0x08
     420:	20 e0       	ldi	r18, 0x00	; 0
     422:	30 e0       	ldi	r19, 0x00	; 0
     424:	40 e8       	ldi	r20, 0x80	; 128
     426:	50 e4       	ldi	r21, 0x40	; 64
     428:	69 81       	ldd	r22, Y+1	; 0x01
     42a:	7a 81       	ldd	r23, Y+2	; 0x02
     42c:	8b 81       	ldd	r24, Y+3	; 0x03
     42e:	9c 81       	ldd	r25, Y+4	; 0x04
     430:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <__mulsf3>
     434:	dc 01       	movw	r26, r24
     436:	cb 01       	movw	r24, r22
     438:	89 87       	std	Y+9, r24	; 0x09
     43a:	9a 87       	std	Y+10, r25	; 0x0a
     43c:	ab 87       	std	Y+11, r26	; 0x0b
     43e:	bc 87       	std	Y+12, r27	; 0x0c
     440:	20 e0       	ldi	r18, 0x00	; 0
     442:	30 e0       	ldi	r19, 0x00	; 0
     444:	40 e8       	ldi	r20, 0x80	; 128
     446:	5f e3       	ldi	r21, 0x3F	; 63
     448:	6d 81       	ldd	r22, Y+5	; 0x05
     44a:	7e 81       	ldd	r23, Y+6	; 0x06
     44c:	8f 81       	ldd	r24, Y+7	; 0x07
     44e:	98 85       	ldd	r25, Y+8	; 0x08
     450:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <__cmpsf2>
     454:	88 23       	and	r24, r24
     456:	1c f4       	brge	.+6      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
     458:	81 e0       	ldi	r24, 0x01	; 1
     45a:	8d 87       	std	Y+13, r24	; 0x0d
     45c:	b2 c0       	rjmp	.+356    	; 0x5c2 <__LOCK_REGION_LENGTH__+0x1c2>
     45e:	20 e0       	ldi	r18, 0x00	; 0
     460:	3f ef       	ldi	r19, 0xFF	; 255
     462:	4f e7       	ldi	r20, 0x7F	; 127
     464:	57 e4       	ldi	r21, 0x47	; 71
     466:	69 85       	ldd	r22, Y+9	; 0x09
     468:	7a 85       	ldd	r23, Y+10	; 0x0a
     46a:	8b 85       	ldd	r24, Y+11	; 0x0b
     46c:	9c 85       	ldd	r25, Y+12	; 0x0c
     46e:	0e 94 57 10 	call	0x20ae	; 0x20ae <__gesf2>
     472:	18 16       	cp	r1, r24
     474:	0c f0       	brlt	.+2      	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
     476:	7b c0       	rjmp	.+246    	; 0x56e <__LOCK_REGION_LENGTH__+0x16e>
     478:	20 e0       	ldi	r18, 0x00	; 0
     47a:	30 e0       	ldi	r19, 0x00	; 0
     47c:	4a e7       	ldi	r20, 0x7A	; 122
     47e:	54 e4       	ldi	r21, 0x44	; 68
     480:	69 81       	ldd	r22, Y+1	; 0x01
     482:	7a 81       	ldd	r23, Y+2	; 0x02
     484:	8b 81       	ldd	r24, Y+3	; 0x03
     486:	9c 81       	ldd	r25, Y+4	; 0x04
     488:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <__divsf3>
     48c:	dc 01       	movw	r26, r24
     48e:	cb 01       	movw	r24, r22
     490:	8e 87       	std	Y+14, r24	; 0x0e
     492:	9f 87       	std	Y+15, r25	; 0x0f
     494:	a8 8b       	std	Y+16, r26	; 0x10
     496:	b9 8b       	std	Y+17, r27	; 0x11
     498:	20 e0       	ldi	r18, 0x00	; 0
     49a:	30 e0       	ldi	r19, 0x00	; 0
     49c:	4a e7       	ldi	r20, 0x7A	; 122
     49e:	55 e4       	ldi	r21, 0x45	; 69
     4a0:	6e 85       	ldd	r22, Y+14	; 0x0e
     4a2:	7f 85       	ldd	r23, Y+15	; 0x0f
     4a4:	88 89       	ldd	r24, Y+16	; 0x10
     4a6:	99 89       	ldd	r25, Y+17	; 0x11
     4a8:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <__mulsf3>
     4ac:	dc 01       	movw	r26, r24
     4ae:	cb 01       	movw	r24, r22
     4b0:	8a 8b       	std	Y+18, r24	; 0x12
     4b2:	9b 8b       	std	Y+19, r25	; 0x13
     4b4:	ac 8b       	std	Y+20, r26	; 0x14
     4b6:	bd 8b       	std	Y+21, r27	; 0x15
     4b8:	20 e0       	ldi	r18, 0x00	; 0
     4ba:	30 e0       	ldi	r19, 0x00	; 0
     4bc:	40 e8       	ldi	r20, 0x80	; 128
     4be:	5f e3       	ldi	r21, 0x3F	; 63
     4c0:	6a 89       	ldd	r22, Y+18	; 0x12
     4c2:	7b 89       	ldd	r23, Y+19	; 0x13
     4c4:	8c 89       	ldd	r24, Y+20	; 0x14
     4c6:	9d 89       	ldd	r25, Y+21	; 0x15
     4c8:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <__cmpsf2>
     4cc:	88 23       	and	r24, r24
     4ce:	2c f4       	brge	.+10     	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
     4d0:	81 e0       	ldi	r24, 0x01	; 1
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	9f 8b       	std	Y+23, r25	; 0x17
     4d6:	8e 8b       	std	Y+22, r24	; 0x16
     4d8:	3f c0       	rjmp	.+126    	; 0x558 <__LOCK_REGION_LENGTH__+0x158>
     4da:	20 e0       	ldi	r18, 0x00	; 0
     4dc:	3f ef       	ldi	r19, 0xFF	; 255
     4de:	4f e7       	ldi	r20, 0x7F	; 127
     4e0:	57 e4       	ldi	r21, 0x47	; 71
     4e2:	6a 89       	ldd	r22, Y+18	; 0x12
     4e4:	7b 89       	ldd	r23, Y+19	; 0x13
     4e6:	8c 89       	ldd	r24, Y+20	; 0x14
     4e8:	9d 89       	ldd	r25, Y+21	; 0x15
     4ea:	0e 94 57 10 	call	0x20ae	; 0x20ae <__gesf2>
     4ee:	18 16       	cp	r1, r24
     4f0:	4c f5       	brge	.+82     	; 0x544 <__LOCK_REGION_LENGTH__+0x144>
     4f2:	20 e0       	ldi	r18, 0x00	; 0
     4f4:	30 e0       	ldi	r19, 0x00	; 0
     4f6:	40 e2       	ldi	r20, 0x20	; 32
     4f8:	51 e4       	ldi	r21, 0x41	; 65
     4fa:	6e 85       	ldd	r22, Y+14	; 0x0e
     4fc:	7f 85       	ldd	r23, Y+15	; 0x0f
     4fe:	88 89       	ldd	r24, Y+16	; 0x10
     500:	99 89       	ldd	r25, Y+17	; 0x11
     502:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <__mulsf3>
     506:	dc 01       	movw	r26, r24
     508:	cb 01       	movw	r24, r22
     50a:	bc 01       	movw	r22, r24
     50c:	cd 01       	movw	r24, r26
     50e:	0e 94 76 0f 	call	0x1eec	; 0x1eec <__fixunssfsi>
     512:	dc 01       	movw	r26, r24
     514:	cb 01       	movw	r24, r22
     516:	9f 8b       	std	Y+23, r25	; 0x17
     518:	8e 8b       	std	Y+22, r24	; 0x16
     51a:	0f c0       	rjmp	.+30     	; 0x53a <__LOCK_REGION_LENGTH__+0x13a>
     51c:	80 e9       	ldi	r24, 0x90	; 144
     51e:	91 e0       	ldi	r25, 0x01	; 1
     520:	99 8f       	std	Y+25, r25	; 0x19
     522:	88 8f       	std	Y+24, r24	; 0x18
     524:	88 8d       	ldd	r24, Y+24	; 0x18
     526:	99 8d       	ldd	r25, Y+25	; 0x19
     528:	01 97       	sbiw	r24, 0x01	; 1
     52a:	f1 f7       	brne	.-4      	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
     52c:	99 8f       	std	Y+25, r25	; 0x19
     52e:	88 8f       	std	Y+24, r24	; 0x18
     530:	8e 89       	ldd	r24, Y+22	; 0x16
     532:	9f 89       	ldd	r25, Y+23	; 0x17
     534:	01 97       	sbiw	r24, 0x01	; 1
     536:	9f 8b       	std	Y+23, r25	; 0x17
     538:	8e 8b       	std	Y+22, r24	; 0x16
     53a:	8e 89       	ldd	r24, Y+22	; 0x16
     53c:	9f 89       	ldd	r25, Y+23	; 0x17
     53e:	89 2b       	or	r24, r25
     540:	69 f7       	brne	.-38     	; 0x51c <__LOCK_REGION_LENGTH__+0x11c>
     542:	3f c0       	rjmp	.+126    	; 0x5c2 <__LOCK_REGION_LENGTH__+0x1c2>
     544:	6a 89       	ldd	r22, Y+18	; 0x12
     546:	7b 89       	ldd	r23, Y+19	; 0x13
     548:	8c 89       	ldd	r24, Y+20	; 0x14
     54a:	9d 89       	ldd	r25, Y+21	; 0x15
     54c:	0e 94 76 0f 	call	0x1eec	; 0x1eec <__fixunssfsi>
     550:	dc 01       	movw	r26, r24
     552:	cb 01       	movw	r24, r22
     554:	9f 8b       	std	Y+23, r25	; 0x17
     556:	8e 8b       	std	Y+22, r24	; 0x16
     558:	8e 89       	ldd	r24, Y+22	; 0x16
     55a:	9f 89       	ldd	r25, Y+23	; 0x17
     55c:	9b 8f       	std	Y+27, r25	; 0x1b
     55e:	8a 8f       	std	Y+26, r24	; 0x1a
     560:	8a 8d       	ldd	r24, Y+26	; 0x1a
     562:	9b 8d       	ldd	r25, Y+27	; 0x1b
     564:	01 97       	sbiw	r24, 0x01	; 1
     566:	f1 f7       	brne	.-4      	; 0x564 <__LOCK_REGION_LENGTH__+0x164>
     568:	9b 8f       	std	Y+27, r25	; 0x1b
     56a:	8a 8f       	std	Y+26, r24	; 0x1a
     56c:	2a c0       	rjmp	.+84     	; 0x5c2 <__LOCK_REGION_LENGTH__+0x1c2>
     56e:	20 e0       	ldi	r18, 0x00	; 0
     570:	30 e0       	ldi	r19, 0x00	; 0
     572:	4f e7       	ldi	r20, 0x7F	; 127
     574:	53 e4       	ldi	r21, 0x43	; 67
     576:	6d 81       	ldd	r22, Y+5	; 0x05
     578:	7e 81       	ldd	r23, Y+6	; 0x06
     57a:	8f 81       	ldd	r24, Y+7	; 0x07
     57c:	98 85       	ldd	r25, Y+8	; 0x08
     57e:	0e 94 57 10 	call	0x20ae	; 0x20ae <__gesf2>
     582:	18 16       	cp	r1, r24
     584:	ac f4       	brge	.+42     	; 0x5b0 <__LOCK_REGION_LENGTH__+0x1b0>
     586:	69 85       	ldd	r22, Y+9	; 0x09
     588:	7a 85       	ldd	r23, Y+10	; 0x0a
     58a:	8b 85       	ldd	r24, Y+11	; 0x0b
     58c:	9c 85       	ldd	r25, Y+12	; 0x0c
     58e:	0e 94 76 0f 	call	0x1eec	; 0x1eec <__fixunssfsi>
     592:	dc 01       	movw	r26, r24
     594:	cb 01       	movw	r24, r22
     596:	9d 8f       	std	Y+29, r25	; 0x1d
     598:	8c 8f       	std	Y+28, r24	; 0x1c
     59a:	8c 8d       	ldd	r24, Y+28	; 0x1c
     59c:	9d 8d       	ldd	r25, Y+29	; 0x1d
     59e:	9f 8f       	std	Y+31, r25	; 0x1f
     5a0:	8e 8f       	std	Y+30, r24	; 0x1e
     5a2:	8e 8d       	ldd	r24, Y+30	; 0x1e
     5a4:	9f 8d       	ldd	r25, Y+31	; 0x1f
     5a6:	01 97       	sbiw	r24, 0x01	; 1
     5a8:	f1 f7       	brne	.-4      	; 0x5a6 <__LOCK_REGION_LENGTH__+0x1a6>
     5aa:	9f 8f       	std	Y+31, r25	; 0x1f
     5ac:	8e 8f       	std	Y+30, r24	; 0x1e
     5ae:	0f c0       	rjmp	.+30     	; 0x5ce <__LOCK_REGION_LENGTH__+0x1ce>
     5b0:	6d 81       	ldd	r22, Y+5	; 0x05
     5b2:	7e 81       	ldd	r23, Y+6	; 0x06
     5b4:	8f 81       	ldd	r24, Y+7	; 0x07
     5b6:	98 85       	ldd	r25, Y+8	; 0x08
     5b8:	0e 94 76 0f 	call	0x1eec	; 0x1eec <__fixunssfsi>
     5bc:	dc 01       	movw	r26, r24
     5be:	cb 01       	movw	r24, r22
     5c0:	8d 87       	std	Y+13, r24	; 0x0d
     5c2:	8d 85       	ldd	r24, Y+13	; 0x0d
     5c4:	88 a3       	std	Y+32, r24	; 0x20
     5c6:	88 a1       	ldd	r24, Y+32	; 0x20
     5c8:	8a 95       	dec	r24
     5ca:	f1 f7       	brne	.-4      	; 0x5c8 <__LOCK_REGION_LENGTH__+0x1c8>
     5cc:	88 a3       	std	Y+32, r24	; 0x20
     5ce:	00 00       	nop
     5d0:	a1 96       	adiw	r28, 0x21	; 33
     5d2:	0f b6       	in	r0, 0x3f	; 63
     5d4:	f8 94       	cli
     5d6:	de bf       	out	0x3e, r29	; 62
     5d8:	0f be       	out	0x3f, r0	; 63
     5da:	cd bf       	out	0x3d, r28	; 61
     5dc:	df 91       	pop	r29
     5de:	cf 91       	pop	r28
     5e0:	08 95       	ret

000005e2 <LCD_WriteCommand>:
     5e2:	cf 93       	push	r28
     5e4:	df 93       	push	r29
     5e6:	1f 92       	push	r1
     5e8:	cd b7       	in	r28, 0x3d	; 61
     5ea:	de b7       	in	r29, 0x3e	; 62
     5ec:	89 83       	std	Y+1, r24	; 0x01
     5ee:	8b e3       	ldi	r24, 0x3B	; 59
     5f0:	90 e0       	ldi	r25, 0x00	; 0
     5f2:	2b e3       	ldi	r18, 0x3B	; 59
     5f4:	30 e0       	ldi	r19, 0x00	; 0
     5f6:	f9 01       	movw	r30, r18
     5f8:	20 81       	ld	r18, Z
     5fa:	2f 77       	andi	r18, 0x7F	; 127
     5fc:	fc 01       	movw	r30, r24
     5fe:	20 83       	st	Z, r18
     600:	89 81       	ldd	r24, Y+1	; 0x01
     602:	0e 94 c1 01 	call	0x382	; 0x382 <_LCD_Write>
     606:	00 00       	nop
     608:	0f 90       	pop	r0
     60a:	df 91       	pop	r29
     60c:	cf 91       	pop	r28
     60e:	08 95       	ret

00000610 <LCD_WriteData>:
     610:	cf 93       	push	r28
     612:	df 93       	push	r29
     614:	1f 92       	push	r1
     616:	cd b7       	in	r28, 0x3d	; 61
     618:	de b7       	in	r29, 0x3e	; 62
     61a:	89 83       	std	Y+1, r24	; 0x01
     61c:	8b e3       	ldi	r24, 0x3B	; 59
     61e:	90 e0       	ldi	r25, 0x00	; 0
     620:	2b e3       	ldi	r18, 0x3B	; 59
     622:	30 e0       	ldi	r19, 0x00	; 0
     624:	f9 01       	movw	r30, r18
     626:	20 81       	ld	r18, Z
     628:	20 68       	ori	r18, 0x80	; 128
     62a:	fc 01       	movw	r30, r24
     62c:	20 83       	st	Z, r18
     62e:	89 81       	ldd	r24, Y+1	; 0x01
     630:	0e 94 c1 01 	call	0x382	; 0x382 <_LCD_Write>
     634:	00 00       	nop
     636:	0f 90       	pop	r0
     638:	df 91       	pop	r29
     63a:	cf 91       	pop	r28
     63c:	08 95       	ret

0000063e <LCD_WriteText>:
     63e:	cf 93       	push	r28
     640:	df 93       	push	r29
     642:	00 d0       	rcall	.+0      	; 0x644 <LCD_WriteText+0x6>
     644:	cd b7       	in	r28, 0x3d	; 61
     646:	de b7       	in	r29, 0x3e	; 62
     648:	9a 83       	std	Y+2, r25	; 0x02
     64a:	89 83       	std	Y+1, r24	; 0x01
     64c:	0b c0       	rjmp	.+22     	; 0x664 <LCD_WriteText+0x26>
     64e:	89 81       	ldd	r24, Y+1	; 0x01
     650:	9a 81       	ldd	r25, Y+2	; 0x02
     652:	9c 01       	movw	r18, r24
     654:	2f 5f       	subi	r18, 0xFF	; 255
     656:	3f 4f       	sbci	r19, 0xFF	; 255
     658:	3a 83       	std	Y+2, r19	; 0x02
     65a:	29 83       	std	Y+1, r18	; 0x01
     65c:	fc 01       	movw	r30, r24
     65e:	80 81       	ld	r24, Z
     660:	0e 94 08 03 	call	0x610	; 0x610 <LCD_WriteData>
     664:	89 81       	ldd	r24, Y+1	; 0x01
     666:	9a 81       	ldd	r25, Y+2	; 0x02
     668:	fc 01       	movw	r30, r24
     66a:	80 81       	ld	r24, Z
     66c:	88 23       	and	r24, r24
     66e:	79 f7       	brne	.-34     	; 0x64e <LCD_WriteText+0x10>
     670:	00 00       	nop
     672:	0f 90       	pop	r0
     674:	0f 90       	pop	r0
     676:	df 91       	pop	r29
     678:	cf 91       	pop	r28
     67a:	08 95       	ret

0000067c <LCD_GoTo>:
     67c:	cf 93       	push	r28
     67e:	df 93       	push	r29
     680:	00 d0       	rcall	.+0      	; 0x682 <LCD_GoTo+0x6>
     682:	cd b7       	in	r28, 0x3d	; 61
     684:	de b7       	in	r29, 0x3e	; 62
     686:	89 83       	std	Y+1, r24	; 0x01
     688:	6a 83       	std	Y+2, r22	; 0x02
     68a:	8a 81       	ldd	r24, Y+2	; 0x02
     68c:	98 2f       	mov	r25, r24
     68e:	92 95       	swap	r25
     690:	99 0f       	add	r25, r25
     692:	99 0f       	add	r25, r25
     694:	90 7c       	andi	r25, 0xC0	; 192
     696:	89 81       	ldd	r24, Y+1	; 0x01
     698:	89 0f       	add	r24, r25
     69a:	80 68       	ori	r24, 0x80	; 128
     69c:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <LCD_WriteCommand>
     6a0:	00 00       	nop
     6a2:	0f 90       	pop	r0
     6a4:	0f 90       	pop	r0
     6a6:	df 91       	pop	r29
     6a8:	cf 91       	pop	r28
     6aa:	08 95       	ret

000006ac <LCD_Clear>:
     6ac:	cf 93       	push	r28
     6ae:	df 93       	push	r29
     6b0:	cd b7       	in	r28, 0x3d	; 61
     6b2:	de b7       	in	r29, 0x3e	; 62
     6b4:	2e 97       	sbiw	r28, 0x0e	; 14
     6b6:	0f b6       	in	r0, 0x3f	; 63
     6b8:	f8 94       	cli
     6ba:	de bf       	out	0x3e, r29	; 62
     6bc:	0f be       	out	0x3f, r0	; 63
     6be:	cd bf       	out	0x3d, r28	; 61
     6c0:	81 e0       	ldi	r24, 0x01	; 1
     6c2:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <LCD_WriteCommand>
     6c6:	80 e0       	ldi	r24, 0x00	; 0
     6c8:	90 e0       	ldi	r25, 0x00	; 0
     6ca:	a0 e0       	ldi	r26, 0x00	; 0
     6cc:	b0 e4       	ldi	r27, 0x40	; 64
     6ce:	89 83       	std	Y+1, r24	; 0x01
     6d0:	9a 83       	std	Y+2, r25	; 0x02
     6d2:	ab 83       	std	Y+3, r26	; 0x03
     6d4:	bc 83       	std	Y+4, r27	; 0x04
     6d6:	20 e0       	ldi	r18, 0x00	; 0
     6d8:	30 e0       	ldi	r19, 0x00	; 0
     6da:	4a e7       	ldi	r20, 0x7A	; 122
     6dc:	55 e4       	ldi	r21, 0x45	; 69
     6de:	69 81       	ldd	r22, Y+1	; 0x01
     6e0:	7a 81       	ldd	r23, Y+2	; 0x02
     6e2:	8b 81       	ldd	r24, Y+3	; 0x03
     6e4:	9c 81       	ldd	r25, Y+4	; 0x04
     6e6:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <__mulsf3>
     6ea:	dc 01       	movw	r26, r24
     6ec:	cb 01       	movw	r24, r22
     6ee:	8d 83       	std	Y+5, r24	; 0x05
     6f0:	9e 83       	std	Y+6, r25	; 0x06
     6f2:	af 83       	std	Y+7, r26	; 0x07
     6f4:	b8 87       	std	Y+8, r27	; 0x08
     6f6:	20 e0       	ldi	r18, 0x00	; 0
     6f8:	30 e0       	ldi	r19, 0x00	; 0
     6fa:	40 e8       	ldi	r20, 0x80	; 128
     6fc:	5f e3       	ldi	r21, 0x3F	; 63
     6fe:	6d 81       	ldd	r22, Y+5	; 0x05
     700:	7e 81       	ldd	r23, Y+6	; 0x06
     702:	8f 81       	ldd	r24, Y+7	; 0x07
     704:	98 85       	ldd	r25, Y+8	; 0x08
     706:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <__cmpsf2>
     70a:	88 23       	and	r24, r24
     70c:	2c f4       	brge	.+10     	; 0x718 <LCD_Clear+0x6c>
     70e:	81 e0       	ldi	r24, 0x01	; 1
     710:	90 e0       	ldi	r25, 0x00	; 0
     712:	9a 87       	std	Y+10, r25	; 0x0a
     714:	89 87       	std	Y+9, r24	; 0x09
     716:	3f c0       	rjmp	.+126    	; 0x796 <LCD_Clear+0xea>
     718:	20 e0       	ldi	r18, 0x00	; 0
     71a:	3f ef       	ldi	r19, 0xFF	; 255
     71c:	4f e7       	ldi	r20, 0x7F	; 127
     71e:	57 e4       	ldi	r21, 0x47	; 71
     720:	6d 81       	ldd	r22, Y+5	; 0x05
     722:	7e 81       	ldd	r23, Y+6	; 0x06
     724:	8f 81       	ldd	r24, Y+7	; 0x07
     726:	98 85       	ldd	r25, Y+8	; 0x08
     728:	0e 94 57 10 	call	0x20ae	; 0x20ae <__gesf2>
     72c:	18 16       	cp	r1, r24
     72e:	4c f5       	brge	.+82     	; 0x782 <LCD_Clear+0xd6>
     730:	20 e0       	ldi	r18, 0x00	; 0
     732:	30 e0       	ldi	r19, 0x00	; 0
     734:	40 e2       	ldi	r20, 0x20	; 32
     736:	51 e4       	ldi	r21, 0x41	; 65
     738:	69 81       	ldd	r22, Y+1	; 0x01
     73a:	7a 81       	ldd	r23, Y+2	; 0x02
     73c:	8b 81       	ldd	r24, Y+3	; 0x03
     73e:	9c 81       	ldd	r25, Y+4	; 0x04
     740:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <__mulsf3>
     744:	dc 01       	movw	r26, r24
     746:	cb 01       	movw	r24, r22
     748:	bc 01       	movw	r22, r24
     74a:	cd 01       	movw	r24, r26
     74c:	0e 94 76 0f 	call	0x1eec	; 0x1eec <__fixunssfsi>
     750:	dc 01       	movw	r26, r24
     752:	cb 01       	movw	r24, r22
     754:	9a 87       	std	Y+10, r25	; 0x0a
     756:	89 87       	std	Y+9, r24	; 0x09
     758:	0f c0       	rjmp	.+30     	; 0x778 <LCD_Clear+0xcc>
     75a:	80 e9       	ldi	r24, 0x90	; 144
     75c:	91 e0       	ldi	r25, 0x01	; 1
     75e:	9c 87       	std	Y+12, r25	; 0x0c
     760:	8b 87       	std	Y+11, r24	; 0x0b
     762:	8b 85       	ldd	r24, Y+11	; 0x0b
     764:	9c 85       	ldd	r25, Y+12	; 0x0c
     766:	01 97       	sbiw	r24, 0x01	; 1
     768:	f1 f7       	brne	.-4      	; 0x766 <LCD_Clear+0xba>
     76a:	9c 87       	std	Y+12, r25	; 0x0c
     76c:	8b 87       	std	Y+11, r24	; 0x0b
     76e:	89 85       	ldd	r24, Y+9	; 0x09
     770:	9a 85       	ldd	r25, Y+10	; 0x0a
     772:	01 97       	sbiw	r24, 0x01	; 1
     774:	9a 87       	std	Y+10, r25	; 0x0a
     776:	89 87       	std	Y+9, r24	; 0x09
     778:	89 85       	ldd	r24, Y+9	; 0x09
     77a:	9a 85       	ldd	r25, Y+10	; 0x0a
     77c:	89 2b       	or	r24, r25
     77e:	69 f7       	brne	.-38     	; 0x75a <LCD_Clear+0xae>
     780:	14 c0       	rjmp	.+40     	; 0x7aa <LCD_Clear+0xfe>
     782:	6d 81       	ldd	r22, Y+5	; 0x05
     784:	7e 81       	ldd	r23, Y+6	; 0x06
     786:	8f 81       	ldd	r24, Y+7	; 0x07
     788:	98 85       	ldd	r25, Y+8	; 0x08
     78a:	0e 94 76 0f 	call	0x1eec	; 0x1eec <__fixunssfsi>
     78e:	dc 01       	movw	r26, r24
     790:	cb 01       	movw	r24, r22
     792:	9a 87       	std	Y+10, r25	; 0x0a
     794:	89 87       	std	Y+9, r24	; 0x09
     796:	89 85       	ldd	r24, Y+9	; 0x09
     798:	9a 85       	ldd	r25, Y+10	; 0x0a
     79a:	9e 87       	std	Y+14, r25	; 0x0e
     79c:	8d 87       	std	Y+13, r24	; 0x0d
     79e:	8d 85       	ldd	r24, Y+13	; 0x0d
     7a0:	9e 85       	ldd	r25, Y+14	; 0x0e
     7a2:	01 97       	sbiw	r24, 0x01	; 1
     7a4:	f1 f7       	brne	.-4      	; 0x7a2 <LCD_Clear+0xf6>
     7a6:	9e 87       	std	Y+14, r25	; 0x0e
     7a8:	8d 87       	std	Y+13, r24	; 0x0d
     7aa:	00 00       	nop
     7ac:	2e 96       	adiw	r28, 0x0e	; 14
     7ae:	0f b6       	in	r0, 0x3f	; 63
     7b0:	f8 94       	cli
     7b2:	de bf       	out	0x3e, r29	; 62
     7b4:	0f be       	out	0x3f, r0	; 63
     7b6:	cd bf       	out	0x3d, r28	; 61
     7b8:	df 91       	pop	r29
     7ba:	cf 91       	pop	r28
     7bc:	08 95       	ret

000007be <LCD_Initialize>:
//-------------------------------------
// Display initialization
//-------------------------------------
void LCD_Initialize(void)
{
     7be:	cf 93       	push	r28
     7c0:	df 93       	push	r29
     7c2:	cd b7       	in	r28, 0x3d	; 61
     7c4:	de b7       	in	r29, 0x3e	; 62
     7c6:	e9 97       	sbiw	r28, 0x39	; 57
     7c8:	0f b6       	in	r0, 0x3f	; 63
     7ca:	f8 94       	cli
     7cc:	de bf       	out	0x3e, r29	; 62
     7ce:	0f be       	out	0x3f, r0	; 63
     7d0:	cd bf       	out	0x3d, r28	; 61
unsigned char i;
LCD_DB4_DIR |= LCD_DB4; 
     7d2:	8a e3       	ldi	r24, 0x3A	; 58
     7d4:	90 e0       	ldi	r25, 0x00	; 0
     7d6:	2a e3       	ldi	r18, 0x3A	; 58
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	f9 01       	movw	r30, r18
     7dc:	20 81       	ld	r18, Z
     7de:	24 60       	ori	r18, 0x04	; 4
     7e0:	fc 01       	movw	r30, r24
     7e2:	20 83       	st	Z, r18
LCD_DB5_DIR |= LCD_DB5; 
     7e4:	8a e3       	ldi	r24, 0x3A	; 58
     7e6:	90 e0       	ldi	r25, 0x00	; 0
     7e8:	2a e3       	ldi	r18, 0x3A	; 58
     7ea:	30 e0       	ldi	r19, 0x00	; 0
     7ec:	f9 01       	movw	r30, r18
     7ee:	20 81       	ld	r18, Z
     7f0:	28 60       	ori	r18, 0x08	; 8
     7f2:	fc 01       	movw	r30, r24
     7f4:	20 83       	st	Z, r18
LCD_DB6_DIR |= LCD_DB6; 
     7f6:	8a e3       	ldi	r24, 0x3A	; 58
     7f8:	90 e0       	ldi	r25, 0x00	; 0
     7fa:	2a e3       	ldi	r18, 0x3A	; 58
     7fc:	30 e0       	ldi	r19, 0x00	; 0
     7fe:	f9 01       	movw	r30, r18
     800:	20 81       	ld	r18, Z
     802:	20 61       	ori	r18, 0x10	; 16
     804:	fc 01       	movw	r30, r24
     806:	20 83       	st	Z, r18
LCD_DB7_DIR |= LCD_DB7; 
     808:	8a e3       	ldi	r24, 0x3A	; 58
     80a:	90 e0       	ldi	r25, 0x00	; 0
     80c:	2a e3       	ldi	r18, 0x3A	; 58
     80e:	30 e0       	ldi	r19, 0x00	; 0
     810:	f9 01       	movw	r30, r18
     812:	20 81       	ld	r18, Z
     814:	20 62       	ori	r18, 0x20	; 32
     816:	fc 01       	movw	r30, r24
     818:	20 83       	st	Z, r18
LCD_E_DIR 	|= LCD_E;   
     81a:	8a e3       	ldi	r24, 0x3A	; 58
     81c:	90 e0       	ldi	r25, 0x00	; 0
     81e:	2a e3       	ldi	r18, 0x3A	; 58
     820:	30 e0       	ldi	r19, 0x00	; 0
     822:	f9 01       	movw	r30, r18
     824:	20 81       	ld	r18, Z
     826:	20 64       	ori	r18, 0x40	; 64
     828:	fc 01       	movw	r30, r24
     82a:	20 83       	st	Z, r18
LCD_RS_DIR 	|= LCD_RS;  
     82c:	8a e3       	ldi	r24, 0x3A	; 58
     82e:	90 e0       	ldi	r25, 0x00	; 0
     830:	2a e3       	ldi	r18, 0x3A	; 58
     832:	30 e0       	ldi	r19, 0x00	; 0
     834:	f9 01       	movw	r30, r18
     836:	20 81       	ld	r18, Z
     838:	20 68       	ori	r18, 0x80	; 128
     83a:	fc 01       	movw	r30, r24
     83c:	20 83       	st	Z, r18
     83e:	80 e0       	ldi	r24, 0x00	; 0
     840:	90 e0       	ldi	r25, 0x00	; 0
     842:	a0 e7       	ldi	r26, 0x70	; 112
     844:	b1 e4       	ldi	r27, 0x41	; 65
     846:	8e 87       	std	Y+14, r24	; 0x0e
     848:	9f 87       	std	Y+15, r25	; 0x0f
     84a:	a8 8b       	std	Y+16, r26	; 0x10
     84c:	b9 8b       	std	Y+17, r27	; 0x11

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     84e:	20 e0       	ldi	r18, 0x00	; 0
     850:	30 e0       	ldi	r19, 0x00	; 0
     852:	4a e7       	ldi	r20, 0x7A	; 122
     854:	55 e4       	ldi	r21, 0x45	; 69
     856:	6e 85       	ldd	r22, Y+14	; 0x0e
     858:	7f 85       	ldd	r23, Y+15	; 0x0f
     85a:	88 89       	ldd	r24, Y+16	; 0x10
     85c:	99 89       	ldd	r25, Y+17	; 0x11
     85e:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <__mulsf3>
     862:	dc 01       	movw	r26, r24
     864:	cb 01       	movw	r24, r22
     866:	8a 8b       	std	Y+18, r24	; 0x12
     868:	9b 8b       	std	Y+19, r25	; 0x13
     86a:	ac 8b       	std	Y+20, r26	; 0x14
     86c:	bd 8b       	std	Y+21, r27	; 0x15
	if (__tmp < 1.0)
     86e:	20 e0       	ldi	r18, 0x00	; 0
     870:	30 e0       	ldi	r19, 0x00	; 0
     872:	40 e8       	ldi	r20, 0x80	; 128
     874:	5f e3       	ldi	r21, 0x3F	; 63
     876:	6a 89       	ldd	r22, Y+18	; 0x12
     878:	7b 89       	ldd	r23, Y+19	; 0x13
     87a:	8c 89       	ldd	r24, Y+20	; 0x14
     87c:	9d 89       	ldd	r25, Y+21	; 0x15
     87e:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <__cmpsf2>
     882:	88 23       	and	r24, r24
     884:	2c f4       	brge	.+10     	; 0x890 <__stack+0x31>
		__ticks = 1;
     886:	81 e0       	ldi	r24, 0x01	; 1
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	9f 8b       	std	Y+23, r25	; 0x17
     88c:	8e 8b       	std	Y+22, r24	; 0x16
     88e:	3f c0       	rjmp	.+126    	; 0x90e <__stack+0xaf>
	else if (__tmp > 65535)
     890:	20 e0       	ldi	r18, 0x00	; 0
     892:	3f ef       	ldi	r19, 0xFF	; 255
     894:	4f e7       	ldi	r20, 0x7F	; 127
     896:	57 e4       	ldi	r21, 0x47	; 71
     898:	6a 89       	ldd	r22, Y+18	; 0x12
     89a:	7b 89       	ldd	r23, Y+19	; 0x13
     89c:	8c 89       	ldd	r24, Y+20	; 0x14
     89e:	9d 89       	ldd	r25, Y+21	; 0x15
     8a0:	0e 94 57 10 	call	0x20ae	; 0x20ae <__gesf2>
     8a4:	18 16       	cp	r1, r24
     8a6:	4c f5       	brge	.+82     	; 0x8fa <__stack+0x9b>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     8a8:	20 e0       	ldi	r18, 0x00	; 0
     8aa:	30 e0       	ldi	r19, 0x00	; 0
     8ac:	40 e2       	ldi	r20, 0x20	; 32
     8ae:	51 e4       	ldi	r21, 0x41	; 65
     8b0:	6e 85       	ldd	r22, Y+14	; 0x0e
     8b2:	7f 85       	ldd	r23, Y+15	; 0x0f
     8b4:	88 89       	ldd	r24, Y+16	; 0x10
     8b6:	99 89       	ldd	r25, Y+17	; 0x11
     8b8:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <__mulsf3>
     8bc:	dc 01       	movw	r26, r24
     8be:	cb 01       	movw	r24, r22
     8c0:	bc 01       	movw	r22, r24
     8c2:	cd 01       	movw	r24, r26
     8c4:	0e 94 76 0f 	call	0x1eec	; 0x1eec <__fixunssfsi>
     8c8:	dc 01       	movw	r26, r24
     8ca:	cb 01       	movw	r24, r22
     8cc:	9f 8b       	std	Y+23, r25	; 0x17
     8ce:	8e 8b       	std	Y+22, r24	; 0x16
     8d0:	0f c0       	rjmp	.+30     	; 0x8f0 <__stack+0x91>
     8d2:	80 e9       	ldi	r24, 0x90	; 144
     8d4:	91 e0       	ldi	r25, 0x01	; 1
     8d6:	99 8f       	std	Y+25, r25	; 0x19
     8d8:	88 8f       	std	Y+24, r24	; 0x18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     8da:	88 8d       	ldd	r24, Y+24	; 0x18
     8dc:	99 8d       	ldd	r25, Y+25	; 0x19
     8de:	01 97       	sbiw	r24, 0x01	; 1
     8e0:	f1 f7       	brne	.-4      	; 0x8de <__stack+0x7f>
     8e2:	99 8f       	std	Y+25, r25	; 0x19
     8e4:	88 8f       	std	Y+24, r24	; 0x18
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8e6:	8e 89       	ldd	r24, Y+22	; 0x16
     8e8:	9f 89       	ldd	r25, Y+23	; 0x17
     8ea:	01 97       	sbiw	r24, 0x01	; 1
     8ec:	9f 8b       	std	Y+23, r25	; 0x17
     8ee:	8e 8b       	std	Y+22, r24	; 0x16
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8f0:	8e 89       	ldd	r24, Y+22	; 0x16
     8f2:	9f 89       	ldd	r25, Y+23	; 0x17
     8f4:	89 2b       	or	r24, r25
     8f6:	69 f7       	brne	.-38     	; 0x8d2 <__stack+0x73>
     8f8:	14 c0       	rjmp	.+40     	; 0x922 <__stack+0xc3>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     8fa:	6a 89       	ldd	r22, Y+18	; 0x12
     8fc:	7b 89       	ldd	r23, Y+19	; 0x13
     8fe:	8c 89       	ldd	r24, Y+20	; 0x14
     900:	9d 89       	ldd	r25, Y+21	; 0x15
     902:	0e 94 76 0f 	call	0x1eec	; 0x1eec <__fixunssfsi>
     906:	dc 01       	movw	r26, r24
     908:	cb 01       	movw	r24, r22
     90a:	9f 8b       	std	Y+23, r25	; 0x17
     90c:	8e 8b       	std	Y+22, r24	; 0x16
     90e:	8e 89       	ldd	r24, Y+22	; 0x16
     910:	9f 89       	ldd	r25, Y+23	; 0x17
     912:	9b 8f       	std	Y+27, r25	; 0x1b
     914:	8a 8f       	std	Y+26, r24	; 0x1a
     916:	8a 8d       	ldd	r24, Y+26	; 0x1a
     918:	9b 8d       	ldd	r25, Y+27	; 0x1b
     91a:	01 97       	sbiw	r24, 0x01	; 1
     91c:	f1 f7       	brne	.-4      	; 0x91a <__stack+0xbb>
     91e:	9b 8f       	std	Y+27, r25	; 0x1b
     920:	8a 8f       	std	Y+26, r24	; 0x1a
_delay_ms(15); 
LCD_RS_PORT &= ~LCD_RS; 
     922:	8b e3       	ldi	r24, 0x3B	; 59
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	2b e3       	ldi	r18, 0x3B	; 59
     928:	30 e0       	ldi	r19, 0x00	; 0
     92a:	f9 01       	movw	r30, r18
     92c:	20 81       	ld	r18, Z
     92e:	2f 77       	andi	r18, 0x7F	; 127
     930:	fc 01       	movw	r30, r24
     932:	20 83       	st	Z, r18
LCD_E_PORT &= ~LCD_E;  
     934:	8b e3       	ldi	r24, 0x3B	; 59
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	2b e3       	ldi	r18, 0x3B	; 59
     93a:	30 e0       	ldi	r19, 0x00	; 0
     93c:	f9 01       	movw	r30, r18
     93e:	20 81       	ld	r18, Z
     940:	2f 7b       	andi	r18, 0xBF	; 191
     942:	fc 01       	movw	r30, r24
     944:	20 83       	st	Z, r18

for(i = 0; i < 3; i++)
     946:	19 82       	std	Y+1, r1	; 0x01
     948:	8a c0       	rjmp	.+276    	; 0xa5e <__stack+0x1ff>
  {
  LCD_E_PORT |= LCD_E; 
     94a:	8b e3       	ldi	r24, 0x3B	; 59
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	2b e3       	ldi	r18, 0x3B	; 59
     950:	30 e0       	ldi	r19, 0x00	; 0
     952:	f9 01       	movw	r30, r18
     954:	20 81       	ld	r18, Z
     956:	20 64       	ori	r18, 0x40	; 64
     958:	fc 01       	movw	r30, r24
     95a:	20 83       	st	Z, r18
  _LCD_OutNibble(0x03); 
     95c:	83 e0       	ldi	r24, 0x03	; 3
     95e:	0e 94 4e 01 	call	0x29c	; 0x29c <_LCD_OutNibble>
  LCD_E_PORT &= ~LCD_E; 
     962:	8b e3       	ldi	r24, 0x3B	; 59
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	2b e3       	ldi	r18, 0x3B	; 59
     968:	30 e0       	ldi	r19, 0x00	; 0
     96a:	f9 01       	movw	r30, r18
     96c:	20 81       	ld	r18, Z
     96e:	2f 7b       	andi	r18, 0xBF	; 191
     970:	fc 01       	movw	r30, r24
     972:	20 83       	st	Z, r18
     974:	80 e0       	ldi	r24, 0x00	; 0
     976:	90 e0       	ldi	r25, 0x00	; 0
     978:	a0 ea       	ldi	r26, 0xA0	; 160
     97a:	b0 e4       	ldi	r27, 0x40	; 64
     97c:	8a 83       	std	Y+2, r24	; 0x02
     97e:	9b 83       	std	Y+3, r25	; 0x03
     980:	ac 83       	std	Y+4, r26	; 0x04
     982:	bd 83       	std	Y+5, r27	; 0x05

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     984:	20 e0       	ldi	r18, 0x00	; 0
     986:	30 e0       	ldi	r19, 0x00	; 0
     988:	4a e7       	ldi	r20, 0x7A	; 122
     98a:	55 e4       	ldi	r21, 0x45	; 69
     98c:	6a 81       	ldd	r22, Y+2	; 0x02
     98e:	7b 81       	ldd	r23, Y+3	; 0x03
     990:	8c 81       	ldd	r24, Y+4	; 0x04
     992:	9d 81       	ldd	r25, Y+5	; 0x05
     994:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <__mulsf3>
     998:	dc 01       	movw	r26, r24
     99a:	cb 01       	movw	r24, r22
     99c:	8c 8f       	std	Y+28, r24	; 0x1c
     99e:	9d 8f       	std	Y+29, r25	; 0x1d
     9a0:	ae 8f       	std	Y+30, r26	; 0x1e
     9a2:	bf 8f       	std	Y+31, r27	; 0x1f
	if (__tmp < 1.0)
     9a4:	20 e0       	ldi	r18, 0x00	; 0
     9a6:	30 e0       	ldi	r19, 0x00	; 0
     9a8:	40 e8       	ldi	r20, 0x80	; 128
     9aa:	5f e3       	ldi	r21, 0x3F	; 63
     9ac:	6c 8d       	ldd	r22, Y+28	; 0x1c
     9ae:	7d 8d       	ldd	r23, Y+29	; 0x1d
     9b0:	8e 8d       	ldd	r24, Y+30	; 0x1e
     9b2:	9f 8d       	ldd	r25, Y+31	; 0x1f
     9b4:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <__cmpsf2>
     9b8:	88 23       	and	r24, r24
     9ba:	2c f4       	brge	.+10     	; 0x9c6 <__stack+0x167>
		__ticks = 1;
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	99 a3       	std	Y+33, r25	; 0x21
     9c2:	88 a3       	std	Y+32, r24	; 0x20
     9c4:	3f c0       	rjmp	.+126    	; 0xa44 <__stack+0x1e5>
	else if (__tmp > 65535)
     9c6:	20 e0       	ldi	r18, 0x00	; 0
     9c8:	3f ef       	ldi	r19, 0xFF	; 255
     9ca:	4f e7       	ldi	r20, 0x7F	; 127
     9cc:	57 e4       	ldi	r21, 0x47	; 71
     9ce:	6c 8d       	ldd	r22, Y+28	; 0x1c
     9d0:	7d 8d       	ldd	r23, Y+29	; 0x1d
     9d2:	8e 8d       	ldd	r24, Y+30	; 0x1e
     9d4:	9f 8d       	ldd	r25, Y+31	; 0x1f
     9d6:	0e 94 57 10 	call	0x20ae	; 0x20ae <__gesf2>
     9da:	18 16       	cp	r1, r24
     9dc:	4c f5       	brge	.+82     	; 0xa30 <__stack+0x1d1>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     9de:	20 e0       	ldi	r18, 0x00	; 0
     9e0:	30 e0       	ldi	r19, 0x00	; 0
     9e2:	40 e2       	ldi	r20, 0x20	; 32
     9e4:	51 e4       	ldi	r21, 0x41	; 65
     9e6:	6a 81       	ldd	r22, Y+2	; 0x02
     9e8:	7b 81       	ldd	r23, Y+3	; 0x03
     9ea:	8c 81       	ldd	r24, Y+4	; 0x04
     9ec:	9d 81       	ldd	r25, Y+5	; 0x05
     9ee:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <__mulsf3>
     9f2:	dc 01       	movw	r26, r24
     9f4:	cb 01       	movw	r24, r22
     9f6:	bc 01       	movw	r22, r24
     9f8:	cd 01       	movw	r24, r26
     9fa:	0e 94 76 0f 	call	0x1eec	; 0x1eec <__fixunssfsi>
     9fe:	dc 01       	movw	r26, r24
     a00:	cb 01       	movw	r24, r22
     a02:	99 a3       	std	Y+33, r25	; 0x21
     a04:	88 a3       	std	Y+32, r24	; 0x20
     a06:	0f c0       	rjmp	.+30     	; 0xa26 <__stack+0x1c7>
     a08:	80 e9       	ldi	r24, 0x90	; 144
     a0a:	91 e0       	ldi	r25, 0x01	; 1
     a0c:	9b a3       	std	Y+35, r25	; 0x23
     a0e:	8a a3       	std	Y+34, r24	; 0x22
     a10:	8a a1       	ldd	r24, Y+34	; 0x22
     a12:	9b a1       	ldd	r25, Y+35	; 0x23
     a14:	01 97       	sbiw	r24, 0x01	; 1
     a16:	f1 f7       	brne	.-4      	; 0xa14 <__stack+0x1b5>
     a18:	9b a3       	std	Y+35, r25	; 0x23
     a1a:	8a a3       	std	Y+34, r24	; 0x22
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a1c:	88 a1       	ldd	r24, Y+32	; 0x20
     a1e:	99 a1       	ldd	r25, Y+33	; 0x21
     a20:	01 97       	sbiw	r24, 0x01	; 1
     a22:	99 a3       	std	Y+33, r25	; 0x21
     a24:	88 a3       	std	Y+32, r24	; 0x20
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a26:	88 a1       	ldd	r24, Y+32	; 0x20
     a28:	99 a1       	ldd	r25, Y+33	; 0x21
     a2a:	89 2b       	or	r24, r25
     a2c:	69 f7       	brne	.-38     	; 0xa08 <__stack+0x1a9>
     a2e:	14 c0       	rjmp	.+40     	; 0xa58 <__stack+0x1f9>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a30:	6c 8d       	ldd	r22, Y+28	; 0x1c
     a32:	7d 8d       	ldd	r23, Y+29	; 0x1d
     a34:	8e 8d       	ldd	r24, Y+30	; 0x1e
     a36:	9f 8d       	ldd	r25, Y+31	; 0x1f
     a38:	0e 94 76 0f 	call	0x1eec	; 0x1eec <__fixunssfsi>
     a3c:	dc 01       	movw	r26, r24
     a3e:	cb 01       	movw	r24, r22
     a40:	99 a3       	std	Y+33, r25	; 0x21
     a42:	88 a3       	std	Y+32, r24	; 0x20
     a44:	88 a1       	ldd	r24, Y+32	; 0x20
     a46:	99 a1       	ldd	r25, Y+33	; 0x21
     a48:	9d a3       	std	Y+37, r25	; 0x25
     a4a:	8c a3       	std	Y+36, r24	; 0x24
     a4c:	8c a1       	ldd	r24, Y+36	; 0x24
     a4e:	9d a1       	ldd	r25, Y+37	; 0x25
     a50:	01 97       	sbiw	r24, 0x01	; 1
     a52:	f1 f7       	brne	.-4      	; 0xa50 <__stack+0x1f1>
     a54:	9d a3       	std	Y+37, r25	; 0x25
     a56:	8c a3       	std	Y+36, r24	; 0x24
LCD_RS_DIR 	|= LCD_RS;  
_delay_ms(15); 
LCD_RS_PORT &= ~LCD_RS; 
LCD_E_PORT &= ~LCD_E;  

for(i = 0; i < 3; i++)
     a58:	89 81       	ldd	r24, Y+1	; 0x01
     a5a:	8f 5f       	subi	r24, 0xFF	; 255
     a5c:	89 83       	std	Y+1, r24	; 0x01
     a5e:	89 81       	ldd	r24, Y+1	; 0x01
     a60:	83 30       	cpi	r24, 0x03	; 3
     a62:	08 f4       	brcc	.+2      	; 0xa66 <__stack+0x207>
     a64:	72 cf       	rjmp	.-284    	; 0x94a <__stack+0xeb>
  _LCD_OutNibble(0x03); 
  LCD_E_PORT &= ~LCD_E; 
  _delay_ms(5); 
  }

LCD_E_PORT |= LCD_E; 
     a66:	8b e3       	ldi	r24, 0x3B	; 59
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	2b e3       	ldi	r18, 0x3B	; 59
     a6c:	30 e0       	ldi	r19, 0x00	; 0
     a6e:	f9 01       	movw	r30, r18
     a70:	20 81       	ld	r18, Z
     a72:	20 64       	ori	r18, 0x40	; 64
     a74:	fc 01       	movw	r30, r24
     a76:	20 83       	st	Z, r18
_LCD_OutNibble(0x02); 
     a78:	82 e0       	ldi	r24, 0x02	; 2
     a7a:	0e 94 4e 01 	call	0x29c	; 0x29c <_LCD_OutNibble>
LCD_E_PORT &= ~LCD_E; 
     a7e:	8b e3       	ldi	r24, 0x3B	; 59
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	2b e3       	ldi	r18, 0x3B	; 59
     a84:	30 e0       	ldi	r19, 0x00	; 0
     a86:	f9 01       	movw	r30, r18
     a88:	20 81       	ld	r18, Z
     a8a:	2f 7b       	andi	r18, 0xBF	; 191
     a8c:	fc 01       	movw	r30, r24
     a8e:	20 83       	st	Z, r18
     a90:	80 e0       	ldi	r24, 0x00	; 0
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	a0 e8       	ldi	r26, 0x80	; 128
     a96:	bf e3       	ldi	r27, 0x3F	; 63
     a98:	8a 87       	std	Y+10, r24	; 0x0a
     a9a:	9b 87       	std	Y+11, r25	; 0x0b
     a9c:	ac 87       	std	Y+12, r26	; 0x0c
     a9e:	bd 87       	std	Y+13, r27	; 0x0d

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     aa0:	20 e0       	ldi	r18, 0x00	; 0
     aa2:	30 e0       	ldi	r19, 0x00	; 0
     aa4:	4a e7       	ldi	r20, 0x7A	; 122
     aa6:	55 e4       	ldi	r21, 0x45	; 69
     aa8:	6a 85       	ldd	r22, Y+10	; 0x0a
     aaa:	7b 85       	ldd	r23, Y+11	; 0x0b
     aac:	8c 85       	ldd	r24, Y+12	; 0x0c
     aae:	9d 85       	ldd	r25, Y+13	; 0x0d
     ab0:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <__mulsf3>
     ab4:	dc 01       	movw	r26, r24
     ab6:	cb 01       	movw	r24, r22
     ab8:	88 ab       	std	Y+48, r24	; 0x30
     aba:	99 ab       	std	Y+49, r25	; 0x31
     abc:	aa ab       	std	Y+50, r26	; 0x32
     abe:	bb ab       	std	Y+51, r27	; 0x33
	if (__tmp < 1.0)
     ac0:	20 e0       	ldi	r18, 0x00	; 0
     ac2:	30 e0       	ldi	r19, 0x00	; 0
     ac4:	40 e8       	ldi	r20, 0x80	; 128
     ac6:	5f e3       	ldi	r21, 0x3F	; 63
     ac8:	68 a9       	ldd	r22, Y+48	; 0x30
     aca:	79 a9       	ldd	r23, Y+49	; 0x31
     acc:	8a a9       	ldd	r24, Y+50	; 0x32
     ace:	9b a9       	ldd	r25, Y+51	; 0x33
     ad0:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <__cmpsf2>
     ad4:	88 23       	and	r24, r24
     ad6:	2c f4       	brge	.+10     	; 0xae2 <__stack+0x283>
		__ticks = 1;
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	9d ab       	std	Y+53, r25	; 0x35
     ade:	8c ab       	std	Y+52, r24	; 0x34
     ae0:	3f c0       	rjmp	.+126    	; 0xb60 <__stack+0x301>
	else if (__tmp > 65535)
     ae2:	20 e0       	ldi	r18, 0x00	; 0
     ae4:	3f ef       	ldi	r19, 0xFF	; 255
     ae6:	4f e7       	ldi	r20, 0x7F	; 127
     ae8:	57 e4       	ldi	r21, 0x47	; 71
     aea:	68 a9       	ldd	r22, Y+48	; 0x30
     aec:	79 a9       	ldd	r23, Y+49	; 0x31
     aee:	8a a9       	ldd	r24, Y+50	; 0x32
     af0:	9b a9       	ldd	r25, Y+51	; 0x33
     af2:	0e 94 57 10 	call	0x20ae	; 0x20ae <__gesf2>
     af6:	18 16       	cp	r1, r24
     af8:	4c f5       	brge	.+82     	; 0xb4c <__stack+0x2ed>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     afa:	20 e0       	ldi	r18, 0x00	; 0
     afc:	30 e0       	ldi	r19, 0x00	; 0
     afe:	40 e2       	ldi	r20, 0x20	; 32
     b00:	51 e4       	ldi	r21, 0x41	; 65
     b02:	6a 85       	ldd	r22, Y+10	; 0x0a
     b04:	7b 85       	ldd	r23, Y+11	; 0x0b
     b06:	8c 85       	ldd	r24, Y+12	; 0x0c
     b08:	9d 85       	ldd	r25, Y+13	; 0x0d
     b0a:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <__mulsf3>
     b0e:	dc 01       	movw	r26, r24
     b10:	cb 01       	movw	r24, r22
     b12:	bc 01       	movw	r22, r24
     b14:	cd 01       	movw	r24, r26
     b16:	0e 94 76 0f 	call	0x1eec	; 0x1eec <__fixunssfsi>
     b1a:	dc 01       	movw	r26, r24
     b1c:	cb 01       	movw	r24, r22
     b1e:	9d ab       	std	Y+53, r25	; 0x35
     b20:	8c ab       	std	Y+52, r24	; 0x34
     b22:	0f c0       	rjmp	.+30     	; 0xb42 <__stack+0x2e3>
     b24:	80 e9       	ldi	r24, 0x90	; 144
     b26:	91 e0       	ldi	r25, 0x01	; 1
     b28:	9f ab       	std	Y+55, r25	; 0x37
     b2a:	8e ab       	std	Y+54, r24	; 0x36
     b2c:	8e a9       	ldd	r24, Y+54	; 0x36
     b2e:	9f a9       	ldd	r25, Y+55	; 0x37
     b30:	01 97       	sbiw	r24, 0x01	; 1
     b32:	f1 f7       	brne	.-4      	; 0xb30 <__stack+0x2d1>
     b34:	9f ab       	std	Y+55, r25	; 0x37
     b36:	8e ab       	std	Y+54, r24	; 0x36
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b38:	8c a9       	ldd	r24, Y+52	; 0x34
     b3a:	9d a9       	ldd	r25, Y+53	; 0x35
     b3c:	01 97       	sbiw	r24, 0x01	; 1
     b3e:	9d ab       	std	Y+53, r25	; 0x35
     b40:	8c ab       	std	Y+52, r24	; 0x34
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b42:	8c a9       	ldd	r24, Y+52	; 0x34
     b44:	9d a9       	ldd	r25, Y+53	; 0x35
     b46:	89 2b       	or	r24, r25
     b48:	69 f7       	brne	.-38     	; 0xb24 <__stack+0x2c5>
     b4a:	14 c0       	rjmp	.+40     	; 0xb74 <__stack+0x315>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     b4c:	68 a9       	ldd	r22, Y+48	; 0x30
     b4e:	79 a9       	ldd	r23, Y+49	; 0x31
     b50:	8a a9       	ldd	r24, Y+50	; 0x32
     b52:	9b a9       	ldd	r25, Y+51	; 0x33
     b54:	0e 94 76 0f 	call	0x1eec	; 0x1eec <__fixunssfsi>
     b58:	dc 01       	movw	r26, r24
     b5a:	cb 01       	movw	r24, r22
     b5c:	9d ab       	std	Y+53, r25	; 0x35
     b5e:	8c ab       	std	Y+52, r24	; 0x34
     b60:	8c a9       	ldd	r24, Y+52	; 0x34
     b62:	9d a9       	ldd	r25, Y+53	; 0x35
     b64:	99 af       	std	Y+57, r25	; 0x39
     b66:	88 af       	std	Y+56, r24	; 0x38
     b68:	88 ad       	ldd	r24, Y+56	; 0x38
     b6a:	99 ad       	ldd	r25, Y+57	; 0x39
     b6c:	01 97       	sbiw	r24, 0x01	; 1
     b6e:	f1 f7       	brne	.-4      	; 0xb6c <__stack+0x30d>
     b70:	99 af       	std	Y+57, r25	; 0x39
     b72:	88 af       	std	Y+56, r24	; 0x38

_delay_ms(1); 
LCD_WriteCommand(HD44780_FUNCTION_SET | HD44780_FONT5x7 | HD44780_TWO_LINE | HD44780_4_BIT); 
     b74:	88 e2       	ldi	r24, 0x28	; 40
     b76:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <LCD_WriteCommand>
LCD_WriteCommand(HD44780_DISPLAY_ONOFF | HD44780_DISPLAY_OFF); 
     b7a:	88 e0       	ldi	r24, 0x08	; 8
     b7c:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <LCD_WriteCommand>
LCD_WriteCommand(HD44780_CLEAR); 
     b80:	81 e0       	ldi	r24, 0x01	; 1
     b82:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <LCD_WriteCommand>
     b86:	80 e0       	ldi	r24, 0x00	; 0
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	a0 e0       	ldi	r26, 0x00	; 0
     b8c:	b0 e4       	ldi	r27, 0x40	; 64
     b8e:	8e 83       	std	Y+6, r24	; 0x06
     b90:	9f 83       	std	Y+7, r25	; 0x07
     b92:	a8 87       	std	Y+8, r26	; 0x08
     b94:	b9 87       	std	Y+9, r27	; 0x09

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     b96:	20 e0       	ldi	r18, 0x00	; 0
     b98:	30 e0       	ldi	r19, 0x00	; 0
     b9a:	4a e7       	ldi	r20, 0x7A	; 122
     b9c:	55 e4       	ldi	r21, 0x45	; 69
     b9e:	6e 81       	ldd	r22, Y+6	; 0x06
     ba0:	7f 81       	ldd	r23, Y+7	; 0x07
     ba2:	88 85       	ldd	r24, Y+8	; 0x08
     ba4:	99 85       	ldd	r25, Y+9	; 0x09
     ba6:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <__mulsf3>
     baa:	dc 01       	movw	r26, r24
     bac:	cb 01       	movw	r24, r22
     bae:	8e a3       	std	Y+38, r24	; 0x26
     bb0:	9f a3       	std	Y+39, r25	; 0x27
     bb2:	a8 a7       	std	Y+40, r26	; 0x28
     bb4:	b9 a7       	std	Y+41, r27	; 0x29
	if (__tmp < 1.0)
     bb6:	20 e0       	ldi	r18, 0x00	; 0
     bb8:	30 e0       	ldi	r19, 0x00	; 0
     bba:	40 e8       	ldi	r20, 0x80	; 128
     bbc:	5f e3       	ldi	r21, 0x3F	; 63
     bbe:	6e a1       	ldd	r22, Y+38	; 0x26
     bc0:	7f a1       	ldd	r23, Y+39	; 0x27
     bc2:	88 a5       	ldd	r24, Y+40	; 0x28
     bc4:	99 a5       	ldd	r25, Y+41	; 0x29
     bc6:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <__cmpsf2>
     bca:	88 23       	and	r24, r24
     bcc:	2c f4       	brge	.+10     	; 0xbd8 <__stack+0x379>
		__ticks = 1;
     bce:	81 e0       	ldi	r24, 0x01	; 1
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	9b a7       	std	Y+43, r25	; 0x2b
     bd4:	8a a7       	std	Y+42, r24	; 0x2a
     bd6:	3f c0       	rjmp	.+126    	; 0xc56 <__stack+0x3f7>
	else if (__tmp > 65535)
     bd8:	20 e0       	ldi	r18, 0x00	; 0
     bda:	3f ef       	ldi	r19, 0xFF	; 255
     bdc:	4f e7       	ldi	r20, 0x7F	; 127
     bde:	57 e4       	ldi	r21, 0x47	; 71
     be0:	6e a1       	ldd	r22, Y+38	; 0x26
     be2:	7f a1       	ldd	r23, Y+39	; 0x27
     be4:	88 a5       	ldd	r24, Y+40	; 0x28
     be6:	99 a5       	ldd	r25, Y+41	; 0x29
     be8:	0e 94 57 10 	call	0x20ae	; 0x20ae <__gesf2>
     bec:	18 16       	cp	r1, r24
     bee:	4c f5       	brge	.+82     	; 0xc42 <__stack+0x3e3>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bf0:	20 e0       	ldi	r18, 0x00	; 0
     bf2:	30 e0       	ldi	r19, 0x00	; 0
     bf4:	40 e2       	ldi	r20, 0x20	; 32
     bf6:	51 e4       	ldi	r21, 0x41	; 65
     bf8:	6e 81       	ldd	r22, Y+6	; 0x06
     bfa:	7f 81       	ldd	r23, Y+7	; 0x07
     bfc:	88 85       	ldd	r24, Y+8	; 0x08
     bfe:	99 85       	ldd	r25, Y+9	; 0x09
     c00:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <__mulsf3>
     c04:	dc 01       	movw	r26, r24
     c06:	cb 01       	movw	r24, r22
     c08:	bc 01       	movw	r22, r24
     c0a:	cd 01       	movw	r24, r26
     c0c:	0e 94 76 0f 	call	0x1eec	; 0x1eec <__fixunssfsi>
     c10:	dc 01       	movw	r26, r24
     c12:	cb 01       	movw	r24, r22
     c14:	9b a7       	std	Y+43, r25	; 0x2b
     c16:	8a a7       	std	Y+42, r24	; 0x2a
     c18:	0f c0       	rjmp	.+30     	; 0xc38 <__stack+0x3d9>
     c1a:	80 e9       	ldi	r24, 0x90	; 144
     c1c:	91 e0       	ldi	r25, 0x01	; 1
     c1e:	9d a7       	std	Y+45, r25	; 0x2d
     c20:	8c a7       	std	Y+44, r24	; 0x2c
     c22:	8c a5       	ldd	r24, Y+44	; 0x2c
     c24:	9d a5       	ldd	r25, Y+45	; 0x2d
     c26:	01 97       	sbiw	r24, 0x01	; 1
     c28:	f1 f7       	brne	.-4      	; 0xc26 <__stack+0x3c7>
     c2a:	9d a7       	std	Y+45, r25	; 0x2d
     c2c:	8c a7       	std	Y+44, r24	; 0x2c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c2e:	8a a5       	ldd	r24, Y+42	; 0x2a
     c30:	9b a5       	ldd	r25, Y+43	; 0x2b
     c32:	01 97       	sbiw	r24, 0x01	; 1
     c34:	9b a7       	std	Y+43, r25	; 0x2b
     c36:	8a a7       	std	Y+42, r24	; 0x2a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c38:	8a a5       	ldd	r24, Y+42	; 0x2a
     c3a:	9b a5       	ldd	r25, Y+43	; 0x2b
     c3c:	89 2b       	or	r24, r25
     c3e:	69 f7       	brne	.-38     	; 0xc1a <__stack+0x3bb>
     c40:	14 c0       	rjmp	.+40     	; 0xc6a <__stack+0x40b>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c42:	6e a1       	ldd	r22, Y+38	; 0x26
     c44:	7f a1       	ldd	r23, Y+39	; 0x27
     c46:	88 a5       	ldd	r24, Y+40	; 0x28
     c48:	99 a5       	ldd	r25, Y+41	; 0x29
     c4a:	0e 94 76 0f 	call	0x1eec	; 0x1eec <__fixunssfsi>
     c4e:	dc 01       	movw	r26, r24
     c50:	cb 01       	movw	r24, r22
     c52:	9b a7       	std	Y+43, r25	; 0x2b
     c54:	8a a7       	std	Y+42, r24	; 0x2a
     c56:	8a a5       	ldd	r24, Y+42	; 0x2a
     c58:	9b a5       	ldd	r25, Y+43	; 0x2b
     c5a:	9f a7       	std	Y+47, r25	; 0x2f
     c5c:	8e a7       	std	Y+46, r24	; 0x2e
     c5e:	8e a5       	ldd	r24, Y+46	; 0x2e
     c60:	9f a5       	ldd	r25, Y+47	; 0x2f
     c62:	01 97       	sbiw	r24, 0x01	; 1
     c64:	f1 f7       	brne	.-4      	; 0xc62 <__stack+0x403>
     c66:	9f a7       	std	Y+47, r25	; 0x2f
     c68:	8e a7       	std	Y+46, r24	; 0x2e
_delay_ms(2);
LCD_WriteCommand(HD44780_ENTRY_MODE | HD44780_EM_SHIFT_CURSOR | HD44780_EM_INCREMENT);
     c6a:	86 e0       	ldi	r24, 0x06	; 6
     c6c:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <LCD_WriteCommand>
LCD_WriteCommand(HD44780_DISPLAY_ONOFF | HD44780_DISPLAY_ON | HD44780_CURSOR_OFF | HD44780_CURSOR_NOBLINK);
     c70:	8c e0       	ldi	r24, 0x0C	; 12
     c72:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <LCD_WriteCommand>
}
     c76:	00 00       	nop
     c78:	e9 96       	adiw	r28, 0x39	; 57
     c7a:	0f b6       	in	r0, 0x3f	; 63
     c7c:	f8 94       	cli
     c7e:	de bf       	out	0x3e, r29	; 62
     c80:	0f be       	out	0x3f, r0	; 63
     c82:	cd bf       	out	0x3d, r28	; 61
     c84:	df 91       	pop	r29
     c86:	cf 91       	pop	r28
     c88:	08 95       	ret

00000c8a <TWI_Start>:
	}
	else
	{
		previous = 0;
	}
}
     c8a:	cf 93       	push	r28
     c8c:	df 93       	push	r29
     c8e:	cd b7       	in	r28, 0x3d	; 61
     c90:	de b7       	in	r29, 0x3e	; 62
     c92:	86 e5       	ldi	r24, 0x56	; 86
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	24 ea       	ldi	r18, 0xA4	; 164
     c98:	fc 01       	movw	r30, r24
     c9a:	20 83       	st	Z, r18
     c9c:	00 00       	nop
     c9e:	86 e5       	ldi	r24, 0x56	; 86
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	fc 01       	movw	r30, r24
     ca4:	80 81       	ld	r24, Z
     ca6:	88 23       	and	r24, r24
     ca8:	d4 f7       	brge	.-12     	; 0xc9e <TWI_Start+0x14>
     caa:	00 00       	nop
     cac:	df 91       	pop	r29
     cae:	cf 91       	pop	r28
     cb0:	08 95       	ret

00000cb2 <TWI_Stop>:
     cb2:	cf 93       	push	r28
     cb4:	df 93       	push	r29
     cb6:	cd b7       	in	r28, 0x3d	; 61
     cb8:	de b7       	in	r29, 0x3e	; 62
     cba:	86 e5       	ldi	r24, 0x56	; 86
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	24 e9       	ldi	r18, 0x94	; 148
     cc0:	fc 01       	movw	r30, r24
     cc2:	20 83       	st	Z, r18
     cc4:	00 00       	nop
     cc6:	86 e5       	ldi	r24, 0x56	; 86
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	fc 01       	movw	r30, r24
     ccc:	80 81       	ld	r24, Z
     cce:	88 2f       	mov	r24, r24
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	80 71       	andi	r24, 0x10	; 16
     cd4:	99 27       	eor	r25, r25
     cd6:	89 2b       	or	r24, r25
     cd8:	b1 f7       	brne	.-20     	; 0xcc6 <TWI_Stop+0x14>
     cda:	00 00       	nop
     cdc:	df 91       	pop	r29
     cde:	cf 91       	pop	r28
     ce0:	08 95       	ret

00000ce2 <TWI_Write>:
     ce2:	cf 93       	push	r28
     ce4:	df 93       	push	r29
     ce6:	1f 92       	push	r1
     ce8:	cd b7       	in	r28, 0x3d	; 61
     cea:	de b7       	in	r29, 0x3e	; 62
     cec:	89 83       	std	Y+1, r24	; 0x01
     cee:	83 e2       	ldi	r24, 0x23	; 35
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	29 81       	ldd	r18, Y+1	; 0x01
     cf4:	fc 01       	movw	r30, r24
     cf6:	20 83       	st	Z, r18
     cf8:	86 e5       	ldi	r24, 0x56	; 86
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	24 e8       	ldi	r18, 0x84	; 132
     cfe:	fc 01       	movw	r30, r24
     d00:	20 83       	st	Z, r18
     d02:	00 00       	nop
     d04:	86 e5       	ldi	r24, 0x56	; 86
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	fc 01       	movw	r30, r24
     d0a:	80 81       	ld	r24, Z
     d0c:	88 23       	and	r24, r24
     d0e:	d4 f7       	brge	.-12     	; 0xd04 <TWI_Write+0x22>
     d10:	81 e2       	ldi	r24, 0x21	; 33
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	fc 01       	movw	r30, r24
     d16:	80 81       	ld	r24, Z
     d18:	21 e0       	ldi	r18, 0x01	; 1
     d1a:	82 31       	cpi	r24, 0x12	; 18
     d1c:	09 f0       	breq	.+2      	; 0xd20 <TWI_Write+0x3e>
     d1e:	20 e0       	ldi	r18, 0x00	; 0
     d20:	81 e2       	ldi	r24, 0x21	; 33
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	fc 01       	movw	r30, r24
     d26:	90 81       	ld	r25, Z
     d28:	81 e0       	ldi	r24, 0x01	; 1
     d2a:	9c 31       	cpi	r25, 0x1C	; 28
     d2c:	09 f0       	breq	.+2      	; 0xd30 <TWI_Write+0x4e>
     d2e:	80 e0       	ldi	r24, 0x00	; 0
     d30:	82 2b       	or	r24, r18
     d32:	88 23       	and	r24, r24
     d34:	11 f0       	breq	.+4      	; 0xd3a <TWI_Write+0x58>
     d36:	80 e0       	ldi	r24, 0x00	; 0
     d38:	01 c0       	rjmp	.+2      	; 0xd3c <TWI_Write+0x5a>
     d3a:	81 e0       	ldi	r24, 0x01	; 1
     d3c:	0f 90       	pop	r0
     d3e:	df 91       	pop	r29
     d40:	cf 91       	pop	r28
     d42:	08 95       	ret

00000d44 <TWI_Read>:
     d44:	cf 93       	push	r28
     d46:	df 93       	push	r29
     d48:	1f 92       	push	r1
     d4a:	cd b7       	in	r28, 0x3d	; 61
     d4c:	de b7       	in	r29, 0x3e	; 62
     d4e:	89 83       	std	Y+1, r24	; 0x01
     d50:	86 e5       	ldi	r24, 0x56	; 86
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	29 81       	ldd	r18, Y+1	; 0x01
     d56:	22 23       	and	r18, r18
     d58:	11 f0       	breq	.+4      	; 0xd5e <TWI_Read+0x1a>
     d5a:	24 ec       	ldi	r18, 0xC4	; 196
     d5c:	01 c0       	rjmp	.+2      	; 0xd60 <TWI_Read+0x1c>
     d5e:	24 e8       	ldi	r18, 0x84	; 132
     d60:	fc 01       	movw	r30, r24
     d62:	20 83       	st	Z, r18
     d64:	00 00       	nop
     d66:	86 e5       	ldi	r24, 0x56	; 86
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	fc 01       	movw	r30, r24
     d6c:	80 81       	ld	r24, Z
     d6e:	88 23       	and	r24, r24
     d70:	d4 f7       	brge	.-12     	; 0xd66 <TWI_Read+0x22>
     d72:	83 e2       	ldi	r24, 0x23	; 35
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	fc 01       	movw	r30, r24
     d78:	80 81       	ld	r24, Z
     d7a:	0f 90       	pop	r0
     d7c:	df 91       	pop	r29
     d7e:	cf 91       	pop	r28
     d80:	08 95       	ret

00000d82 <TWI_Init>:
     d82:	cf 93       	push	r28
     d84:	df 93       	push	r29
     d86:	cd b7       	in	r28, 0x3d	; 61
     d88:	de b7       	in	r29, 0x3e	; 62
     d8a:	80 e2       	ldi	r24, 0x20	; 32
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	24 e6       	ldi	r18, 0x64	; 100
     d90:	fc 01       	movw	r30, r24
     d92:	20 83       	st	Z, r18
     d94:	00 00       	nop
     d96:	df 91       	pop	r29
     d98:	cf 91       	pop	r28
     d9a:	08 95       	ret

00000d9c <adc_read>:
     d9c:	cf 93       	push	r28
     d9e:	df 93       	push	r29
     da0:	cd b7       	in	r28, 0x3d	; 61
     da2:	de b7       	in	r29, 0x3e	; 62
     da4:	84 e2       	ldi	r24, 0x24	; 36
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	fc 01       	movw	r30, r24
     daa:	80 81       	ld	r24, Z
     dac:	88 2f       	mov	r24, r24
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	90 93 b5 00 	sts	0x00B5, r25	; 0x8000b5 <W+0x1>
     db4:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <W>
     db8:	85 e2       	ldi	r24, 0x25	; 37
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	fc 01       	movw	r30, r24
     dbe:	80 81       	ld	r24, Z
     dc0:	88 2f       	mov	r24, r24
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	98 2f       	mov	r25, r24
     dc6:	88 27       	eor	r24, r24
     dc8:	9c 01       	movw	r18, r24
     dca:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <W>
     dce:	90 91 b5 00 	lds	r25, 0x00B5	; 0x8000b5 <W+0x1>
     dd2:	82 2b       	or	r24, r18
     dd4:	93 2b       	or	r25, r19
     dd6:	90 93 b5 00 	sts	0x00B5, r25	; 0x8000b5 <W+0x1>
     dda:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <W>
     dde:	20 91 b4 00 	lds	r18, 0x00B4	; 0x8000b4 <W>
     de2:	30 91 b5 00 	lds	r19, 0x00B5	; 0x8000b5 <W+0x1>
     de6:	42 e3       	ldi	r20, 0x32	; 50
     de8:	42 9f       	mul	r20, r18
     dea:	c0 01       	movw	r24, r0
     dec:	43 9f       	mul	r20, r19
     dee:	90 0d       	add	r25, r0
     df0:	11 24       	eor	r1, r1
     df2:	89 2f       	mov	r24, r25
     df4:	99 27       	eor	r25, r25
     df6:	86 95       	lsr	r24
     df8:	86 95       	lsr	r24
     dfa:	90 93 b7 00 	sts	0x00B7, r25	; 0x8000b7 <adc+0x1>
     dfe:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <adc>
     e02:	00 00       	nop
     e04:	df 91       	pop	r29
     e06:	cf 91       	pop	r28
     e08:	08 95       	ret

00000e0a <SPI_Init>:
     e0a:	cf 93       	push	r28
     e0c:	df 93       	push	r29
     e0e:	cd b7       	in	r28, 0x3d	; 61
     e10:	de b7       	in	r29, 0x3e	; 62
     e12:	87 e3       	ldi	r24, 0x37	; 55
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	20 e9       	ldi	r18, 0x90	; 144
     e18:	fc 01       	movw	r30, r24
     e1a:	20 83       	st	Z, r18
     e1c:	8d e2       	ldi	r24, 0x2D	; 45
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	21 e5       	ldi	r18, 0x51	; 81
     e22:	fc 01       	movw	r30, r24
     e24:	20 83       	st	Z, r18
     e26:	00 00       	nop
     e28:	df 91       	pop	r29
     e2a:	cf 91       	pop	r28
     e2c:	08 95       	ret

00000e2e <ADC_Init>:
     e2e:	cf 93       	push	r28
     e30:	df 93       	push	r29
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
     e36:	87 e2       	ldi	r24, 0x27	; 39
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	20 e4       	ldi	r18, 0x40	; 64
     e3c:	fc 01       	movw	r30, r24
     e3e:	20 83       	st	Z, r18
     e40:	86 e2       	ldi	r24, 0x26	; 38
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	2f e8       	ldi	r18, 0x8F	; 143
     e46:	fc 01       	movw	r30, r24
     e48:	20 83       	st	Z, r18
     e4a:	00 00       	nop
     e4c:	df 91       	pop	r29
     e4e:	cf 91       	pop	r28
     e50:	08 95       	ret

00000e52 <AutoTrigger_Init>:
     e52:	cf 93       	push	r28
     e54:	df 93       	push	r29
     e56:	cd b7       	in	r28, 0x3d	; 61
     e58:	de b7       	in	r29, 0x3e	; 62
     e5a:	86 e2       	ldi	r24, 0x26	; 38
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	26 e2       	ldi	r18, 0x26	; 38
     e60:	30 e0       	ldi	r19, 0x00	; 0
     e62:	f9 01       	movw	r30, r18
     e64:	20 81       	ld	r18, Z
     e66:	20 62       	ori	r18, 0x20	; 32
     e68:	fc 01       	movw	r30, r24
     e6a:	20 83       	st	Z, r18
     e6c:	86 e2       	ldi	r24, 0x26	; 38
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	26 e2       	ldi	r18, 0x26	; 38
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	f9 01       	movw	r30, r18
     e76:	20 81       	ld	r18, Z
     e78:	20 64       	ori	r18, 0x40	; 64
     e7a:	fc 01       	movw	r30, r24
     e7c:	20 83       	st	Z, r18
     e7e:	00 00       	nop
     e80:	df 91       	pop	r29
     e82:	cf 91       	pop	r28
     e84:	08 95       	ret

00000e86 <SPI_Transmit>:
     e86:	cf 93       	push	r28
     e88:	df 93       	push	r29
     e8a:	1f 92       	push	r1
     e8c:	cd b7       	in	r28, 0x3d	; 61
     e8e:	de b7       	in	r29, 0x3e	; 62
     e90:	89 83       	std	Y+1, r24	; 0x01
     e92:	8f e2       	ldi	r24, 0x2F	; 47
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	29 81       	ldd	r18, Y+1	; 0x01
     e98:	fc 01       	movw	r30, r24
     e9a:	20 83       	st	Z, r18
     e9c:	00 00       	nop
     e9e:	8e e2       	ldi	r24, 0x2E	; 46
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	fc 01       	movw	r30, r24
     ea4:	80 81       	ld	r24, Z
     ea6:	88 23       	and	r24, r24
     ea8:	d4 f7       	brge	.-12     	; 0xe9e <SPI_Transmit+0x18>
     eaa:	8f e2       	ldi	r24, 0x2F	; 47
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	fc 01       	movw	r30, r24
     eb0:	80 81       	ld	r24, Z
     eb2:	0f 90       	pop	r0
     eb4:	df 91       	pop	r29
     eb6:	cf 91       	pop	r28
     eb8:	08 95       	ret

00000eba <Timer1_Init>:
     eba:	cf 93       	push	r28
     ebc:	df 93       	push	r29
     ebe:	cd b7       	in	r28, 0x3d	; 61
     ec0:	de b7       	in	r29, 0x3e	; 62
     ec2:	8e e4       	ldi	r24, 0x4E	; 78
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	2e e4       	ldi	r18, 0x4E	; 78
     ec8:	30 e0       	ldi	r19, 0x00	; 0
     eca:	f9 01       	movw	r30, r18
     ecc:	20 81       	ld	r18, Z
     ece:	2d 60       	ori	r18, 0x0D	; 13
     ed0:	fc 01       	movw	r30, r24
     ed2:	20 83       	st	Z, r18
     ed4:	89 e5       	ldi	r24, 0x59	; 89
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	29 e5       	ldi	r18, 0x59	; 89
     eda:	30 e0       	ldi	r19, 0x00	; 0
     edc:	f9 01       	movw	r30, r18
     ede:	20 81       	ld	r18, Z
     ee0:	20 61       	ori	r18, 0x10	; 16
     ee2:	fc 01       	movw	r30, r24
     ee4:	20 83       	st	Z, r18
     ee6:	8a e4       	ldi	r24, 0x4A	; 74
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	2b e1       	ldi	r18, 0x1B	; 27
     eec:	36 e0       	ldi	r19, 0x06	; 6
     eee:	fc 01       	movw	r30, r24
     ef0:	31 83       	std	Z+1, r19	; 0x01
     ef2:	20 83       	st	Z, r18
     ef4:	00 00       	nop
     ef6:	df 91       	pop	r29
     ef8:	cf 91       	pop	r28
     efa:	08 95       	ret

00000efc <USART_Int_Init>:
     efc:	cf 93       	push	r28
     efe:	df 93       	push	r29
     f00:	cd b7       	in	r28, 0x3d	; 61
     f02:	de b7       	in	r29, 0x3e	; 62
     f04:	8a e2       	ldi	r24, 0x2A	; 42
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	2a e2       	ldi	r18, 0x2A	; 42
     f0a:	30 e0       	ldi	r19, 0x00	; 0
     f0c:	f9 01       	movw	r30, r18
     f0e:	20 81       	ld	r18, Z
     f10:	28 69       	ori	r18, 0x98	; 152
     f12:	fc 01       	movw	r30, r24
     f14:	20 83       	st	Z, r18
     f16:	00 00       	nop
     f18:	df 91       	pop	r29
     f1a:	cf 91       	pop	r28
     f1c:	08 95       	ret

00000f1e <__vector_16>:
     f1e:	1f 92       	push	r1
     f20:	0f 92       	push	r0
     f22:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     f26:	0f 92       	push	r0
     f28:	11 24       	eor	r1, r1
     f2a:	2f 93       	push	r18
     f2c:	3f 93       	push	r19
     f2e:	4f 93       	push	r20
     f30:	5f 93       	push	r21
     f32:	6f 93       	push	r22
     f34:	7f 93       	push	r23
     f36:	8f 93       	push	r24
     f38:	9f 93       	push	r25
     f3a:	af 93       	push	r26
     f3c:	bf 93       	push	r27
     f3e:	ef 93       	push	r30
     f40:	ff 93       	push	r31
     f42:	cf 93       	push	r28
     f44:	df 93       	push	r29
     f46:	cd b7       	in	r28, 0x3d	; 61
     f48:	de b7       	in	r29, 0x3e	; 62
     f4a:	0e 94 ce 06 	call	0xd9c	; 0xd9c <adc_read>
     f4e:	00 00       	nop
     f50:	df 91       	pop	r29
     f52:	cf 91       	pop	r28
     f54:	ff 91       	pop	r31
     f56:	ef 91       	pop	r30
     f58:	bf 91       	pop	r27
     f5a:	af 91       	pop	r26
     f5c:	9f 91       	pop	r25
     f5e:	8f 91       	pop	r24
     f60:	7f 91       	pop	r23
     f62:	6f 91       	pop	r22
     f64:	5f 91       	pop	r21
     f66:	4f 91       	pop	r20
     f68:	3f 91       	pop	r19
     f6a:	2f 91       	pop	r18
     f6c:	0f 90       	pop	r0
     f6e:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     f72:	0f 90       	pop	r0
     f74:	1f 90       	pop	r1
     f76:	18 95       	reti

00000f78 <setTime>:
     f78:	cf 93       	push	r28
     f7a:	df 93       	push	r29
     f7c:	cd b7       	in	r28, 0x3d	; 61
     f7e:	de b7       	in	r29, 0x3e	; 62
     f80:	68 97       	sbiw	r28, 0x18	; 24
     f82:	0f b6       	in	r0, 0x3f	; 63
     f84:	f8 94       	cli
     f86:	de bf       	out	0x3e, r29	; 62
     f88:	0f be       	out	0x3f, r0	; 63
     f8a:	cd bf       	out	0x3d, r28	; 61
     f8c:	9c 8b       	std	Y+20, r25	; 0x14
     f8e:	8b 8b       	std	Y+19, r24	; 0x13
     f90:	7e 8b       	std	Y+22, r23	; 0x16
     f92:	6d 8b       	std	Y+21, r22	; 0x15
     f94:	58 8f       	std	Y+24, r21	; 0x18
     f96:	4f 8b       	std	Y+23, r20	; 0x17
     f98:	8b 89       	ldd	r24, Y+19	; 0x13
     f9a:	9c 89       	ldd	r25, Y+20	; 0x14
     f9c:	2a e0       	ldi	r18, 0x0A	; 10
     f9e:	30 e0       	ldi	r19, 0x00	; 0
     fa0:	b9 01       	movw	r22, r18
     fa2:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__divmodhi4>
     fa6:	9a 83       	std	Y+2, r25	; 0x02
     fa8:	89 83       	std	Y+1, r24	; 0x01
     faa:	2b 89       	ldd	r18, Y+19	; 0x13
     fac:	3c 89       	ldd	r19, Y+20	; 0x14
     fae:	89 81       	ldd	r24, Y+1	; 0x01
     fb0:	9a 81       	ldd	r25, Y+2	; 0x02
     fb2:	a9 01       	movw	r20, r18
     fb4:	48 1b       	sub	r20, r24
     fb6:	59 0b       	sbc	r21, r25
     fb8:	ca 01       	movw	r24, r20
     fba:	2a e0       	ldi	r18, 0x0A	; 10
     fbc:	30 e0       	ldi	r19, 0x00	; 0
     fbe:	b9 01       	movw	r22, r18
     fc0:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__divmodhi4>
     fc4:	cb 01       	movw	r24, r22
     fc6:	9c 83       	std	Y+4, r25	; 0x04
     fc8:	8b 83       	std	Y+3, r24	; 0x03
     fca:	1e 82       	std	Y+6, r1	; 0x06
     fcc:	1d 82       	std	Y+5, r1	; 0x05
     fce:	8b 81       	ldd	r24, Y+3	; 0x03
     fd0:	9c 81       	ldd	r25, Y+4	; 0x04
     fd2:	82 95       	swap	r24
     fd4:	92 95       	swap	r25
     fd6:	90 7f       	andi	r25, 0xF0	; 240
     fd8:	98 27       	eor	r25, r24
     fda:	80 7f       	andi	r24, 0xF0	; 240
     fdc:	98 27       	eor	r25, r24
     fde:	9c 83       	std	Y+4, r25	; 0x04
     fe0:	8b 83       	std	Y+3, r24	; 0x03
     fe2:	2b 81       	ldd	r18, Y+3	; 0x03
     fe4:	3c 81       	ldd	r19, Y+4	; 0x04
     fe6:	89 81       	ldd	r24, Y+1	; 0x01
     fe8:	9a 81       	ldd	r25, Y+2	; 0x02
     fea:	82 0f       	add	r24, r18
     fec:	93 1f       	adc	r25, r19
     fee:	9e 83       	std	Y+6, r25	; 0x06
     ff0:	8d 83       	std	Y+5, r24	; 0x05
     ff2:	8d 89       	ldd	r24, Y+21	; 0x15
     ff4:	9e 89       	ldd	r25, Y+22	; 0x16
     ff6:	2a e0       	ldi	r18, 0x0A	; 10
     ff8:	30 e0       	ldi	r19, 0x00	; 0
     ffa:	b9 01       	movw	r22, r18
     ffc:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__divmodhi4>
    1000:	98 87       	std	Y+8, r25	; 0x08
    1002:	8f 83       	std	Y+7, r24	; 0x07
    1004:	2d 89       	ldd	r18, Y+21	; 0x15
    1006:	3e 89       	ldd	r19, Y+22	; 0x16
    1008:	8f 81       	ldd	r24, Y+7	; 0x07
    100a:	98 85       	ldd	r25, Y+8	; 0x08
    100c:	a9 01       	movw	r20, r18
    100e:	48 1b       	sub	r20, r24
    1010:	59 0b       	sbc	r21, r25
    1012:	ca 01       	movw	r24, r20
    1014:	2a e0       	ldi	r18, 0x0A	; 10
    1016:	30 e0       	ldi	r19, 0x00	; 0
    1018:	b9 01       	movw	r22, r18
    101a:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__divmodhi4>
    101e:	cb 01       	movw	r24, r22
    1020:	9a 87       	std	Y+10, r25	; 0x0a
    1022:	89 87       	std	Y+9, r24	; 0x09
    1024:	1c 86       	std	Y+12, r1	; 0x0c
    1026:	1b 86       	std	Y+11, r1	; 0x0b
    1028:	89 85       	ldd	r24, Y+9	; 0x09
    102a:	9a 85       	ldd	r25, Y+10	; 0x0a
    102c:	82 95       	swap	r24
    102e:	92 95       	swap	r25
    1030:	90 7f       	andi	r25, 0xF0	; 240
    1032:	98 27       	eor	r25, r24
    1034:	80 7f       	andi	r24, 0xF0	; 240
    1036:	98 27       	eor	r25, r24
    1038:	9a 87       	std	Y+10, r25	; 0x0a
    103a:	89 87       	std	Y+9, r24	; 0x09
    103c:	29 85       	ldd	r18, Y+9	; 0x09
    103e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1040:	8f 81       	ldd	r24, Y+7	; 0x07
    1042:	98 85       	ldd	r25, Y+8	; 0x08
    1044:	82 0f       	add	r24, r18
    1046:	93 1f       	adc	r25, r19
    1048:	9c 87       	std	Y+12, r25	; 0x0c
    104a:	8b 87       	std	Y+11, r24	; 0x0b
    104c:	8f 89       	ldd	r24, Y+23	; 0x17
    104e:	98 8d       	ldd	r25, Y+24	; 0x18
    1050:	2a e0       	ldi	r18, 0x0A	; 10
    1052:	30 e0       	ldi	r19, 0x00	; 0
    1054:	b9 01       	movw	r22, r18
    1056:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__divmodhi4>
    105a:	9e 87       	std	Y+14, r25	; 0x0e
    105c:	8d 87       	std	Y+13, r24	; 0x0d
    105e:	2f 89       	ldd	r18, Y+23	; 0x17
    1060:	38 8d       	ldd	r19, Y+24	; 0x18
    1062:	8d 85       	ldd	r24, Y+13	; 0x0d
    1064:	9e 85       	ldd	r25, Y+14	; 0x0e
    1066:	a9 01       	movw	r20, r18
    1068:	48 1b       	sub	r20, r24
    106a:	59 0b       	sbc	r21, r25
    106c:	ca 01       	movw	r24, r20
    106e:	2a e0       	ldi	r18, 0x0A	; 10
    1070:	30 e0       	ldi	r19, 0x00	; 0
    1072:	b9 01       	movw	r22, r18
    1074:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__divmodhi4>
    1078:	cb 01       	movw	r24, r22
    107a:	98 8b       	std	Y+16, r25	; 0x10
    107c:	8f 87       	std	Y+15, r24	; 0x0f
    107e:	1a 8a       	std	Y+18, r1	; 0x12
    1080:	19 8a       	std	Y+17, r1	; 0x11
    1082:	8f 85       	ldd	r24, Y+15	; 0x0f
    1084:	98 89       	ldd	r25, Y+16	; 0x10
    1086:	82 95       	swap	r24
    1088:	92 95       	swap	r25
    108a:	90 7f       	andi	r25, 0xF0	; 240
    108c:	98 27       	eor	r25, r24
    108e:	80 7f       	andi	r24, 0xF0	; 240
    1090:	98 27       	eor	r25, r24
    1092:	98 8b       	std	Y+16, r25	; 0x10
    1094:	8f 87       	std	Y+15, r24	; 0x0f
    1096:	2f 85       	ldd	r18, Y+15	; 0x0f
    1098:	38 89       	ldd	r19, Y+16	; 0x10
    109a:	8d 85       	ldd	r24, Y+13	; 0x0d
    109c:	9e 85       	ldd	r25, Y+14	; 0x0e
    109e:	82 0f       	add	r24, r18
    10a0:	93 1f       	adc	r25, r19
    10a2:	9a 8b       	std	Y+18, r25	; 0x12
    10a4:	89 8b       	std	Y+17, r24	; 0x11
    10a6:	0e 94 45 06 	call	0xc8a	; 0xc8a <TWI_Start>
    10aa:	80 ed       	ldi	r24, 0xD0	; 208
    10ac:	0e 94 71 06 	call	0xce2	; 0xce2 <TWI_Write>
    10b0:	80 e0       	ldi	r24, 0x00	; 0
    10b2:	0e 94 71 06 	call	0xce2	; 0xce2 <TWI_Write>
    10b6:	89 89       	ldd	r24, Y+17	; 0x11
    10b8:	0e 94 71 06 	call	0xce2	; 0xce2 <TWI_Write>
    10bc:	8b 85       	ldd	r24, Y+11	; 0x0b
    10be:	0e 94 71 06 	call	0xce2	; 0xce2 <TWI_Write>
    10c2:	8d 81       	ldd	r24, Y+5	; 0x05
    10c4:	0e 94 71 06 	call	0xce2	; 0xce2 <TWI_Write>
    10c8:	0e 94 59 06 	call	0xcb2	; 0xcb2 <TWI_Stop>
    10cc:	00 00       	nop
    10ce:	68 96       	adiw	r28, 0x18	; 24
    10d0:	0f b6       	in	r0, 0x3f	; 63
    10d2:	f8 94       	cli
    10d4:	de bf       	out	0x3e, r29	; 62
    10d6:	0f be       	out	0x3f, r0	; 63
    10d8:	cd bf       	out	0x3d, r28	; 61
    10da:	df 91       	pop	r29
    10dc:	cf 91       	pop	r28
    10de:	08 95       	ret

000010e0 <getTime>:
    10e0:	cf 93       	push	r28
    10e2:	df 93       	push	r29
    10e4:	00 d0       	rcall	.+0      	; 0x10e6 <getTime+0x6>
    10e6:	00 d0       	rcall	.+0      	; 0x10e8 <getTime+0x8>
    10e8:	00 d0       	rcall	.+0      	; 0x10ea <getTime+0xa>
    10ea:	cd b7       	in	r28, 0x3d	; 61
    10ec:	de b7       	in	r29, 0x3e	; 62
    10ee:	9a 83       	std	Y+2, r25	; 0x02
    10f0:	89 83       	std	Y+1, r24	; 0x01
    10f2:	7c 83       	std	Y+4, r23	; 0x04
    10f4:	6b 83       	std	Y+3, r22	; 0x03
    10f6:	5e 83       	std	Y+6, r21	; 0x06
    10f8:	4d 83       	std	Y+5, r20	; 0x05
    10fa:	0e 94 45 06 	call	0xc8a	; 0xc8a <TWI_Start>
    10fe:	80 ed       	ldi	r24, 0xD0	; 208
    1100:	0e 94 71 06 	call	0xce2	; 0xce2 <TWI_Write>
    1104:	80 e0       	ldi	r24, 0x00	; 0
    1106:	0e 94 71 06 	call	0xce2	; 0xce2 <TWI_Write>
    110a:	0e 94 45 06 	call	0xc8a	; 0xc8a <TWI_Start>
    110e:	81 ed       	ldi	r24, 0xD1	; 209
    1110:	0e 94 71 06 	call	0xce2	; 0xce2 <TWI_Write>
    1114:	81 e0       	ldi	r24, 0x01	; 1
    1116:	0e 94 a2 06 	call	0xd44	; 0xd44 <TWI_Read>
    111a:	28 2f       	mov	r18, r24
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	8d 81       	ldd	r24, Y+5	; 0x05
    1120:	9e 81       	ldd	r25, Y+6	; 0x06
    1122:	fc 01       	movw	r30, r24
    1124:	31 83       	std	Z+1, r19	; 0x01
    1126:	20 83       	st	Z, r18
    1128:	81 e0       	ldi	r24, 0x01	; 1
    112a:	0e 94 a2 06 	call	0xd44	; 0xd44 <TWI_Read>
    112e:	28 2f       	mov	r18, r24
    1130:	30 e0       	ldi	r19, 0x00	; 0
    1132:	8b 81       	ldd	r24, Y+3	; 0x03
    1134:	9c 81       	ldd	r25, Y+4	; 0x04
    1136:	fc 01       	movw	r30, r24
    1138:	31 83       	std	Z+1, r19	; 0x01
    113a:	20 83       	st	Z, r18
    113c:	80 e0       	ldi	r24, 0x00	; 0
    113e:	0e 94 a2 06 	call	0xd44	; 0xd44 <TWI_Read>
    1142:	28 2f       	mov	r18, r24
    1144:	30 e0       	ldi	r19, 0x00	; 0
    1146:	89 81       	ldd	r24, Y+1	; 0x01
    1148:	9a 81       	ldd	r25, Y+2	; 0x02
    114a:	fc 01       	movw	r30, r24
    114c:	31 83       	std	Z+1, r19	; 0x01
    114e:	20 83       	st	Z, r18
    1150:	0e 94 59 06 	call	0xcb2	; 0xcb2 <TWI_Stop>
    1154:	00 00       	nop
    1156:	26 96       	adiw	r28, 0x06	; 6
    1158:	0f b6       	in	r0, 0x3f	; 63
    115a:	f8 94       	cli
    115c:	de bf       	out	0x3e, r29	; 62
    115e:	0f be       	out	0x3f, r0	; 63
    1160:	cd bf       	out	0x3d, r28	; 61
    1162:	df 91       	pop	r29
    1164:	cf 91       	pop	r28
    1166:	08 95       	ret

00001168 <getTemp>:
    1168:	cf 93       	push	r28
    116a:	df 93       	push	r29
    116c:	cd b7       	in	r28, 0x3d	; 61
    116e:	de b7       	in	r29, 0x3e	; 62
    1170:	28 97       	sbiw	r28, 0x08	; 8
    1172:	0f b6       	in	r0, 0x3f	; 63
    1174:	f8 94       	cli
    1176:	de bf       	out	0x3e, r29	; 62
    1178:	0f be       	out	0x3f, r0	; 63
    117a:	cd bf       	out	0x3d, r28	; 61
    117c:	98 87       	std	Y+8, r25	; 0x08
    117e:	8f 83       	std	Y+7, r24	; 0x07
    1180:	88 e3       	ldi	r24, 0x38	; 56
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	28 e3       	ldi	r18, 0x38	; 56
    1186:	30 e0       	ldi	r19, 0x00	; 0
    1188:	f9 01       	movw	r30, r18
    118a:	20 81       	ld	r18, Z
    118c:	2f 7e       	andi	r18, 0xEF	; 239
    118e:	fc 01       	movw	r30, r24
    1190:	20 83       	st	Z, r18
    1192:	80 e0       	ldi	r24, 0x00	; 0
    1194:	0e 94 43 07 	call	0xe86	; 0xe86 <SPI_Transmit>
    1198:	88 2f       	mov	r24, r24
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	9a 83       	std	Y+2, r25	; 0x02
    119e:	89 83       	std	Y+1, r24	; 0x01
    11a0:	80 e0       	ldi	r24, 0x00	; 0
    11a2:	0e 94 43 07 	call	0xe86	; 0xe86 <SPI_Transmit>
    11a6:	88 2f       	mov	r24, r24
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	9c 83       	std	Y+4, r25	; 0x04
    11ac:	8b 83       	std	Y+3, r24	; 0x03
    11ae:	88 e3       	ldi	r24, 0x38	; 56
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	28 e3       	ldi	r18, 0x38	; 56
    11b4:	30 e0       	ldi	r19, 0x00	; 0
    11b6:	f9 01       	movw	r30, r18
    11b8:	20 81       	ld	r18, Z
    11ba:	20 61       	ori	r18, 0x10	; 16
    11bc:	fc 01       	movw	r30, r24
    11be:	20 83       	st	Z, r18
    11c0:	89 81       	ldd	r24, Y+1	; 0x01
    11c2:	9a 81       	ldd	r25, Y+2	; 0x02
    11c4:	98 2f       	mov	r25, r24
    11c6:	88 27       	eor	r24, r24
    11c8:	9a 83       	std	Y+2, r25	; 0x02
    11ca:	89 83       	std	Y+1, r24	; 0x01
    11cc:	8b 81       	ldd	r24, Y+3	; 0x03
    11ce:	9c 81       	ldd	r25, Y+4	; 0x04
    11d0:	07 97       	sbiw	r24, 0x07	; 7
    11d2:	9c 83       	std	Y+4, r25	; 0x04
    11d4:	8b 83       	std	Y+3, r24	; 0x03
    11d6:	29 81       	ldd	r18, Y+1	; 0x01
    11d8:	3a 81       	ldd	r19, Y+2	; 0x02
    11da:	8b 81       	ldd	r24, Y+3	; 0x03
    11dc:	9c 81       	ldd	r25, Y+4	; 0x04
    11de:	82 0f       	add	r24, r18
    11e0:	93 1f       	adc	r25, r19
    11e2:	9a 83       	std	Y+2, r25	; 0x02
    11e4:	89 83       	std	Y+1, r24	; 0x01
    11e6:	89 81       	ldd	r24, Y+1	; 0x01
    11e8:	9a 81       	ldd	r25, Y+2	; 0x02
    11ea:	95 95       	asr	r25
    11ec:	87 95       	ror	r24
    11ee:	95 95       	asr	r25
    11f0:	87 95       	ror	r24
    11f2:	95 95       	asr	r25
    11f4:	87 95       	ror	r24
    11f6:	9a 83       	std	Y+2, r25	; 0x02
    11f8:	89 83       	std	Y+1, r24	; 0x01
    11fa:	89 81       	ldd	r24, Y+1	; 0x01
    11fc:	9a 81       	ldd	r25, Y+2	; 0x02
    11fe:	9e 83       	std	Y+6, r25	; 0x06
    1200:	8d 83       	std	Y+5, r24	; 0x05
    1202:	8d 81       	ldd	r24, Y+5	; 0x05
    1204:	9e 81       	ldd	r25, Y+6	; 0x06
    1206:	09 2e       	mov	r0, r25
    1208:	00 0c       	add	r0, r0
    120a:	aa 0b       	sbc	r26, r26
    120c:	bb 0b       	sbc	r27, r27
    120e:	bc 01       	movw	r22, r24
    1210:	cd 01       	movw	r24, r26
    1212:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <__floatsisf>
    1216:	dc 01       	movw	r26, r24
    1218:	cb 01       	movw	r24, r22
    121a:	20 e0       	ldi	r18, 0x00	; 0
    121c:	30 e0       	ldi	r19, 0x00	; 0
    121e:	40 e2       	ldi	r20, 0x20	; 32
    1220:	5f e3       	ldi	r21, 0x3F	; 63
    1222:	bc 01       	movw	r22, r24
    1224:	cd 01       	movw	r24, r26
    1226:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <__mulsf3>
    122a:	dc 01       	movw	r26, r24
    122c:	cb 01       	movw	r24, r22
    122e:	bc 01       	movw	r22, r24
    1230:	cd 01       	movw	r24, r26
    1232:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <__fixsfsi>
    1236:	dc 01       	movw	r26, r24
    1238:	cb 01       	movw	r24, r22
    123a:	9e 83       	std	Y+6, r25	; 0x06
    123c:	8d 83       	std	Y+5, r24	; 0x05
    123e:	8f 81       	ldd	r24, Y+7	; 0x07
    1240:	98 85       	ldd	r25, Y+8	; 0x08
    1242:	89 2b       	or	r24, r25
    1244:	19 f4       	brne	.+6      	; 0x124c <getTemp+0xe4>
    1246:	8d 81       	ldd	r24, Y+5	; 0x05
    1248:	9e 81       	ldd	r25, Y+6	; 0x06
    124a:	1f c0       	rjmp	.+62     	; 0x128a <getTemp+0x122>
    124c:	8f 81       	ldd	r24, Y+7	; 0x07
    124e:	98 85       	ldd	r25, Y+8	; 0x08
    1250:	01 97       	sbiw	r24, 0x01	; 1
    1252:	b9 f4       	brne	.+46     	; 0x1282 <getTemp+0x11a>
    1254:	2d 81       	ldd	r18, Y+5	; 0x05
    1256:	3e 81       	ldd	r19, Y+6	; 0x06
    1258:	c9 01       	movw	r24, r18
    125a:	88 0f       	add	r24, r24
    125c:	99 1f       	adc	r25, r25
    125e:	88 0f       	add	r24, r24
    1260:	99 1f       	adc	r25, r25
    1262:	88 0f       	add	r24, r24
    1264:	99 1f       	adc	r25, r25
    1266:	82 0f       	add	r24, r18
    1268:	93 1f       	adc	r25, r19
    126a:	25 e0       	ldi	r18, 0x05	; 5
    126c:	30 e0       	ldi	r19, 0x00	; 0
    126e:	b9 01       	movw	r22, r18
    1270:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__divmodhi4>
    1274:	cb 01       	movw	r24, r22
    1276:	80 96       	adiw	r24, 0x20	; 32
    1278:	9e 83       	std	Y+6, r25	; 0x06
    127a:	8d 83       	std	Y+5, r24	; 0x05
    127c:	8d 81       	ldd	r24, Y+5	; 0x05
    127e:	9e 81       	ldd	r25, Y+6	; 0x06
    1280:	04 c0       	rjmp	.+8      	; 0x128a <getTemp+0x122>
    1282:	1e 82       	std	Y+6, r1	; 0x06
    1284:	1d 82       	std	Y+5, r1	; 0x05
    1286:	8d 81       	ldd	r24, Y+5	; 0x05
    1288:	9e 81       	ldd	r25, Y+6	; 0x06
    128a:	28 96       	adiw	r28, 0x08	; 8
    128c:	0f b6       	in	r0, 0x3f	; 63
    128e:	f8 94       	cli
    1290:	de bf       	out	0x3e, r29	; 62
    1292:	0f be       	out	0x3f, r0	; 63
    1294:	cd bf       	out	0x3d, r28	; 61
    1296:	df 91       	pop	r29
    1298:	cf 91       	pop	r28
    129a:	08 95       	ret

0000129c <displayData>:
    129c:	cf 93       	push	r28
    129e:	df 93       	push	r29
    12a0:	00 d0       	rcall	.+0      	; 0x12a2 <displayData+0x6>
    12a2:	00 d0       	rcall	.+0      	; 0x12a4 <displayData+0x8>
    12a4:	00 d0       	rcall	.+0      	; 0x12a6 <displayData+0xa>
    12a6:	cd b7       	in	r28, 0x3d	; 61
    12a8:	de b7       	in	r29, 0x3e	; 62
    12aa:	9a 83       	std	Y+2, r25	; 0x02
    12ac:	89 83       	std	Y+1, r24	; 0x01
    12ae:	7c 83       	std	Y+4, r23	; 0x04
    12b0:	6b 83       	std	Y+3, r22	; 0x03
    12b2:	5e 83       	std	Y+6, r21	; 0x06
    12b4:	4d 83       	std	Y+5, r20	; 0x05
    12b6:	0e 94 56 03 	call	0x6ac	; 0x6ac <LCD_Clear>
    12ba:	89 81       	ldd	r24, Y+1	; 0x01
    12bc:	9a 81       	ldd	r25, Y+2	; 0x02
    12be:	82 30       	cpi	r24, 0x02	; 2
    12c0:	91 05       	cpc	r25, r1
    12c2:	09 f4       	brne	.+2      	; 0x12c6 <displayData+0x2a>
    12c4:	87 c0       	rjmp	.+270    	; 0x13d4 <displayData+0x138>
    12c6:	83 30       	cpi	r24, 0x03	; 3
    12c8:	91 05       	cpc	r25, r1
    12ca:	09 f4       	brne	.+2      	; 0x12ce <displayData+0x32>
    12cc:	d6 c0       	rjmp	.+428    	; 0x147a <displayData+0x1de>
    12ce:	01 97       	sbiw	r24, 0x01	; 1
    12d0:	09 f0       	breq	.+2      	; 0x12d4 <displayData+0x38>
    12d2:	d9 c1       	rjmp	.+946    	; 0x1686 <displayData+0x3ea>
    12d4:	9d 81       	ldd	r25, Y+5	; 0x05
    12d6:	8b 81       	ldd	r24, Y+3	; 0x03
    12d8:	69 2f       	mov	r22, r25
    12da:	0e 94 3e 03 	call	0x67c	; 0x67c <LCD_GoTo>
    12de:	82 e6       	ldi	r24, 0x62	; 98
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	0e 94 1f 03 	call	0x63e	; 0x63e <LCD_WriteText>
    12e6:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <adc>
    12ea:	90 91 b7 00 	lds	r25, 0x00B7	; 0x8000b7 <adc+0x1>
    12ee:	0a 97       	sbiw	r24, 0x0a	; 10
    12f0:	e0 f1       	brcs	.+120    	; 0x136a <displayData+0xce>
    12f2:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <adc>
    12f6:	90 91 b7 00 	lds	r25, 0x00B7	; 0x8000b7 <adc+0x1>
    12fa:	4a e0       	ldi	r20, 0x0A	; 10
    12fc:	50 e0       	ldi	r21, 0x00	; 0
    12fe:	6e e4       	ldi	r22, 0x4E	; 78
    1300:	71 e0       	ldi	r23, 0x01	; 1
    1302:	0e 94 1c 11 	call	0x2238	; 0x2238 <itoa>
    1306:	8d e0       	ldi	r24, 0x0D	; 13
    1308:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <uartAddToTxBuffer>
    130c:	8a e0       	ldi	r24, 0x0A	; 10
    130e:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <uartAddToTxBuffer>
    1312:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <voltage_t>
    1316:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <uartAddToTxBuffer>
    131a:	8e e2       	ldi	r24, 0x2E	; 46
    131c:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <uartAddToTxBuffer>
    1320:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <voltage_t+0x1>
    1324:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <uartAddToTxBuffer>
    1328:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <uartSendTxBuffer>
    132c:	9d 81       	ldd	r25, Y+5	; 0x05
    132e:	8b 81       	ldd	r24, Y+3	; 0x03
    1330:	87 5f       	subi	r24, 0xF7	; 247
    1332:	69 2f       	mov	r22, r25
    1334:	0e 94 3e 03 	call	0x67c	; 0x67c <LCD_GoTo>
    1338:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <voltage_t>
    133c:	0e 94 08 03 	call	0x610	; 0x610 <LCD_WriteData>
    1340:	9d 81       	ldd	r25, Y+5	; 0x05
    1342:	8b 81       	ldd	r24, Y+3	; 0x03
    1344:	86 5f       	subi	r24, 0xF6	; 246
    1346:	69 2f       	mov	r22, r25
    1348:	0e 94 3e 03 	call	0x67c	; 0x67c <LCD_GoTo>
    134c:	8c e6       	ldi	r24, 0x6C	; 108
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	0e 94 1f 03 	call	0x63e	; 0x63e <LCD_WriteText>
    1354:	9d 81       	ldd	r25, Y+5	; 0x05
    1356:	8b 81       	ldd	r24, Y+3	; 0x03
    1358:	85 5f       	subi	r24, 0xF5	; 245
    135a:	69 2f       	mov	r22, r25
    135c:	0e 94 3e 03 	call	0x67c	; 0x67c <LCD_GoTo>
    1360:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <voltage_t+0x1>
    1364:	0e 94 08 03 	call	0x610	; 0x610 <LCD_WriteData>
    1368:	8e c1       	rjmp	.+796    	; 0x1686 <displayData+0x3ea>
    136a:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <adc>
    136e:	90 91 b7 00 	lds	r25, 0x00B7	; 0x8000b7 <adc+0x1>
    1372:	4a e0       	ldi	r20, 0x0A	; 10
    1374:	50 e0       	ldi	r21, 0x00	; 0
    1376:	6e e4       	ldi	r22, 0x4E	; 78
    1378:	71 e0       	ldi	r23, 0x01	; 1
    137a:	0e 94 1c 11 	call	0x2238	; 0x2238 <itoa>
    137e:	8d e0       	ldi	r24, 0x0D	; 13
    1380:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <uartAddToTxBuffer>
    1384:	8a e0       	ldi	r24, 0x0A	; 10
    1386:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <uartAddToTxBuffer>
    138a:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <voltage_t>
    138e:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <uartAddToTxBuffer>
    1392:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <uartSendTxBuffer>
    1396:	9d 81       	ldd	r25, Y+5	; 0x05
    1398:	8b 81       	ldd	r24, Y+3	; 0x03
    139a:	87 5f       	subi	r24, 0xF7	; 247
    139c:	69 2f       	mov	r22, r25
    139e:	0e 94 3e 03 	call	0x67c	; 0x67c <LCD_GoTo>
    13a2:	8e e6       	ldi	r24, 0x6E	; 110
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	0e 94 1f 03 	call	0x63e	; 0x63e <LCD_WriteText>
    13aa:	9d 81       	ldd	r25, Y+5	; 0x05
    13ac:	8b 81       	ldd	r24, Y+3	; 0x03
    13ae:	86 5f       	subi	r24, 0xF6	; 246
    13b0:	69 2f       	mov	r22, r25
    13b2:	0e 94 3e 03 	call	0x67c	; 0x67c <LCD_GoTo>
    13b6:	8c e6       	ldi	r24, 0x6C	; 108
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	0e 94 1f 03 	call	0x63e	; 0x63e <LCD_WriteText>
    13be:	9d 81       	ldd	r25, Y+5	; 0x05
    13c0:	8b 81       	ldd	r24, Y+3	; 0x03
    13c2:	85 5f       	subi	r24, 0xF5	; 245
    13c4:	69 2f       	mov	r22, r25
    13c6:	0e 94 3e 03 	call	0x67c	; 0x67c <LCD_GoTo>
    13ca:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <voltage_t>
    13ce:	0e 94 08 03 	call	0x610	; 0x610 <LCD_WriteData>
    13d2:	59 c1       	rjmp	.+690    	; 0x1686 <displayData+0x3ea>
    13d4:	9d 81       	ldd	r25, Y+5	; 0x05
    13d6:	8b 81       	ldd	r24, Y+3	; 0x03
    13d8:	69 2f       	mov	r22, r25
    13da:	0e 94 3e 03 	call	0x67c	; 0x67c <LCD_GoTo>
    13de:	80 e7       	ldi	r24, 0x70	; 112
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	0e 94 1f 03 	call	0x63e	; 0x63e <LCD_WriteText>
    13e6:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <__data_end>
    13ea:	90 91 b3 00 	lds	r25, 0x00B3	; 0x8000b3 <__data_end+0x1>
    13ee:	4a e0       	ldi	r20, 0x0A	; 10
    13f0:	50 e0       	ldi	r21, 0x00	; 0
    13f2:	64 e4       	ldi	r22, 0x44	; 68
    13f4:	71 e0       	ldi	r23, 0x01	; 1
    13f6:	0e 94 1c 11 	call	0x2238	; 0x2238 <itoa>
    13fa:	8d e0       	ldi	r24, 0x0D	; 13
    13fc:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <uartAddToTxBuffer>
    1400:	8a e0       	ldi	r24, 0x0A	; 10
    1402:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <uartAddToTxBuffer>
    1406:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <temperature>
    140a:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <uartAddToTxBuffer>
    140e:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <temperature+0x1>
    1412:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <uartAddToTxBuffer>
    1416:	8e e2       	ldi	r24, 0x2E	; 46
    1418:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <uartAddToTxBuffer>
    141c:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <temperature+0x2>
    1420:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <uartAddToTxBuffer>
    1424:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <uartSendTxBuffer>
    1428:	9d 81       	ldd	r25, Y+5	; 0x05
    142a:	8b 81       	ldd	r24, Y+3	; 0x03
    142c:	89 5f       	subi	r24, 0xF9	; 249
    142e:	69 2f       	mov	r22, r25
    1430:	0e 94 3e 03 	call	0x67c	; 0x67c <LCD_GoTo>
    1434:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <temperature>
    1438:	0e 94 08 03 	call	0x610	; 0x610 <LCD_WriteData>
    143c:	9d 81       	ldd	r25, Y+5	; 0x05
    143e:	8b 81       	ldd	r24, Y+3	; 0x03
    1440:	88 5f       	subi	r24, 0xF8	; 248
    1442:	69 2f       	mov	r22, r25
    1444:	0e 94 3e 03 	call	0x67c	; 0x67c <LCD_GoTo>
    1448:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <temperature+0x1>
    144c:	0e 94 08 03 	call	0x610	; 0x610 <LCD_WriteData>
    1450:	9d 81       	ldd	r25, Y+5	; 0x05
    1452:	8b 81       	ldd	r24, Y+3	; 0x03
    1454:	87 5f       	subi	r24, 0xF7	; 247
    1456:	69 2f       	mov	r22, r25
    1458:	0e 94 3e 03 	call	0x67c	; 0x67c <LCD_GoTo>
    145c:	8c e6       	ldi	r24, 0x6C	; 108
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	0e 94 1f 03 	call	0x63e	; 0x63e <LCD_WriteText>
    1464:	9d 81       	ldd	r25, Y+5	; 0x05
    1466:	8b 81       	ldd	r24, Y+3	; 0x03
    1468:	86 5f       	subi	r24, 0xF6	; 246
    146a:	69 2f       	mov	r22, r25
    146c:	0e 94 3e 03 	call	0x67c	; 0x67c <LCD_GoTo>
    1470:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <temperature+0x2>
    1474:	0e 94 08 03 	call	0x610	; 0x610 <LCD_WriteData>
    1478:	06 c1       	rjmp	.+524    	; 0x1686 <displayData+0x3ea>
    147a:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <Godziny>
    147e:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <Godziny+0x1>
    1482:	95 95       	asr	r25
    1484:	87 95       	ror	r24
    1486:	95 95       	asr	r25
    1488:	87 95       	ror	r24
    148a:	95 95       	asr	r25
    148c:	87 95       	ror	r24
    148e:	95 95       	asr	r25
    1490:	87 95       	ror	r24
    1492:	87 70       	andi	r24, 0x07	; 7
    1494:	99 27       	eor	r25, r25
    1496:	90 93 6d 01 	sts	0x016D, r25	; 0x80016d <B2+0x1>
    149a:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <B2>
    149e:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <Godziny>
    14a2:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <Godziny+0x1>
    14a6:	8f 70       	andi	r24, 0x0F	; 15
    14a8:	99 27       	eor	r25, r25
    14aa:	90 93 8e 01 	sts	0x018E, r25	; 0x80018e <B3+0x1>
    14ae:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <B3>
    14b2:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <B2>
    14b6:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <B2+0x1>
    14ba:	4a e0       	ldi	r20, 0x0A	; 10
    14bc:	50 e0       	ldi	r21, 0x00	; 0
    14be:	67 e7       	ldi	r22, 0x77	; 119
    14c0:	71 e0       	ldi	r23, 0x01	; 1
    14c2:	0e 94 1c 11 	call	0x2238	; 0x2238 <itoa>
    14c6:	9d 81       	ldd	r25, Y+5	; 0x05
    14c8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ca:	69 2f       	mov	r22, r25
    14cc:	0e 94 3e 03 	call	0x67c	; 0x67c <LCD_GoTo>
    14d0:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <str>
    14d4:	0e 94 08 03 	call	0x610	; 0x610 <LCD_WriteData>
    14d8:	8d e0       	ldi	r24, 0x0D	; 13
    14da:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <uartAddToTxBuffer>
    14de:	8a e0       	ldi	r24, 0x0A	; 10
    14e0:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <uartAddToTxBuffer>
    14e4:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <str>
    14e8:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <uartAddToTxBuffer>
    14ec:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <B3>
    14f0:	90 91 8e 01 	lds	r25, 0x018E	; 0x80018e <B3+0x1>
    14f4:	44 e1       	ldi	r20, 0x14	; 20
    14f6:	50 e0       	ldi	r21, 0x00	; 0
    14f8:	67 e7       	ldi	r22, 0x77	; 119
    14fa:	71 e0       	ldi	r23, 0x01	; 1
    14fc:	0e 94 1c 11 	call	0x2238	; 0x2238 <itoa>
    1500:	9d 81       	ldd	r25, Y+5	; 0x05
    1502:	8b 81       	ldd	r24, Y+3	; 0x03
    1504:	8f 5f       	subi	r24, 0xFF	; 255
    1506:	69 2f       	mov	r22, r25
    1508:	0e 94 3e 03 	call	0x67c	; 0x67c <LCD_GoTo>
    150c:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <str>
    1510:	0e 94 08 03 	call	0x610	; 0x610 <LCD_WriteData>
    1514:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <str>
    1518:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <uartAddToTxBuffer>
    151c:	9d 81       	ldd	r25, Y+5	; 0x05
    151e:	8b 81       	ldd	r24, Y+3	; 0x03
    1520:	8e 5f       	subi	r24, 0xFE	; 254
    1522:	69 2f       	mov	r22, r25
    1524:	0e 94 3e 03 	call	0x67c	; 0x67c <LCD_GoTo>
    1528:	87 e7       	ldi	r24, 0x77	; 119
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	0e 94 1f 03 	call	0x63e	; 0x63e <LCD_WriteText>
    1530:	8a e3       	ldi	r24, 0x3A	; 58
    1532:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <uartAddToTxBuffer>
    1536:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <Minuty>
    153a:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <Minuty+0x1>
    153e:	95 95       	asr	r25
    1540:	87 95       	ror	r24
    1542:	95 95       	asr	r25
    1544:	87 95       	ror	r24
    1546:	95 95       	asr	r25
    1548:	87 95       	ror	r24
    154a:	95 95       	asr	r25
    154c:	87 95       	ror	r24
    154e:	87 70       	andi	r24, 0x07	; 7
    1550:	99 27       	eor	r25, r25
    1552:	90 93 6d 01 	sts	0x016D, r25	; 0x80016d <B2+0x1>
    1556:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <B2>
    155a:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <Minuty>
    155e:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <Minuty+0x1>
    1562:	8f 70       	andi	r24, 0x0F	; 15
    1564:	99 27       	eor	r25, r25
    1566:	90 93 8e 01 	sts	0x018E, r25	; 0x80018e <B3+0x1>
    156a:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <B3>
    156e:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <B2>
    1572:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <B2+0x1>
    1576:	44 e1       	ldi	r20, 0x14	; 20
    1578:	50 e0       	ldi	r21, 0x00	; 0
    157a:	67 e7       	ldi	r22, 0x77	; 119
    157c:	71 e0       	ldi	r23, 0x01	; 1
    157e:	0e 94 1c 11 	call	0x2238	; 0x2238 <itoa>
    1582:	9d 81       	ldd	r25, Y+5	; 0x05
    1584:	8b 81       	ldd	r24, Y+3	; 0x03
    1586:	8d 5f       	subi	r24, 0xFD	; 253
    1588:	69 2f       	mov	r22, r25
    158a:	0e 94 3e 03 	call	0x67c	; 0x67c <LCD_GoTo>
    158e:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <str>
    1592:	0e 94 08 03 	call	0x610	; 0x610 <LCD_WriteData>
    1596:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <str>
    159a:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <uartAddToTxBuffer>
    159e:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <B3>
    15a2:	90 91 8e 01 	lds	r25, 0x018E	; 0x80018e <B3+0x1>
    15a6:	44 e1       	ldi	r20, 0x14	; 20
    15a8:	50 e0       	ldi	r21, 0x00	; 0
    15aa:	67 e7       	ldi	r22, 0x77	; 119
    15ac:	71 e0       	ldi	r23, 0x01	; 1
    15ae:	0e 94 1c 11 	call	0x2238	; 0x2238 <itoa>
    15b2:	9d 81       	ldd	r25, Y+5	; 0x05
    15b4:	8b 81       	ldd	r24, Y+3	; 0x03
    15b6:	8c 5f       	subi	r24, 0xFC	; 252
    15b8:	69 2f       	mov	r22, r25
    15ba:	0e 94 3e 03 	call	0x67c	; 0x67c <LCD_GoTo>
    15be:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <str>
    15c2:	0e 94 08 03 	call	0x610	; 0x610 <LCD_WriteData>
    15c6:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <str>
    15ca:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <uartAddToTxBuffer>
    15ce:	9d 81       	ldd	r25, Y+5	; 0x05
    15d0:	8b 81       	ldd	r24, Y+3	; 0x03
    15d2:	8b 5f       	subi	r24, 0xFB	; 251
    15d4:	69 2f       	mov	r22, r25
    15d6:	0e 94 3e 03 	call	0x67c	; 0x67c <LCD_GoTo>
    15da:	87 e7       	ldi	r24, 0x77	; 119
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	0e 94 1f 03 	call	0x63e	; 0x63e <LCD_WriteText>
    15e2:	8a e3       	ldi	r24, 0x3A	; 58
    15e4:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <uartAddToTxBuffer>
    15e8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <Sekundy>
    15ec:	90 91 bd 00 	lds	r25, 0x00BD	; 0x8000bd <Sekundy+0x1>
    15f0:	95 95       	asr	r25
    15f2:	87 95       	ror	r24
    15f4:	95 95       	asr	r25
    15f6:	87 95       	ror	r24
    15f8:	95 95       	asr	r25
    15fa:	87 95       	ror	r24
    15fc:	95 95       	asr	r25
    15fe:	87 95       	ror	r24
    1600:	87 70       	andi	r24, 0x07	; 7
    1602:	99 27       	eor	r25, r25
    1604:	90 93 6d 01 	sts	0x016D, r25	; 0x80016d <B2+0x1>
    1608:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <B2>
    160c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <Sekundy>
    1610:	90 91 bd 00 	lds	r25, 0x00BD	; 0x8000bd <Sekundy+0x1>
    1614:	8f 70       	andi	r24, 0x0F	; 15
    1616:	99 27       	eor	r25, r25
    1618:	90 93 8e 01 	sts	0x018E, r25	; 0x80018e <B3+0x1>
    161c:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <B3>
    1620:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <B2>
    1624:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <B2+0x1>
    1628:	44 e1       	ldi	r20, 0x14	; 20
    162a:	50 e0       	ldi	r21, 0x00	; 0
    162c:	67 e7       	ldi	r22, 0x77	; 119
    162e:	71 e0       	ldi	r23, 0x01	; 1
    1630:	0e 94 1c 11 	call	0x2238	; 0x2238 <itoa>
    1634:	9d 81       	ldd	r25, Y+5	; 0x05
    1636:	8b 81       	ldd	r24, Y+3	; 0x03
    1638:	8a 5f       	subi	r24, 0xFA	; 250
    163a:	69 2f       	mov	r22, r25
    163c:	0e 94 3e 03 	call	0x67c	; 0x67c <LCD_GoTo>
    1640:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <str>
    1644:	0e 94 08 03 	call	0x610	; 0x610 <LCD_WriteData>
    1648:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <str>
    164c:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <uartAddToTxBuffer>
    1650:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <B3>
    1654:	90 91 8e 01 	lds	r25, 0x018E	; 0x80018e <B3+0x1>
    1658:	44 e1       	ldi	r20, 0x14	; 20
    165a:	50 e0       	ldi	r21, 0x00	; 0
    165c:	67 e7       	ldi	r22, 0x77	; 119
    165e:	71 e0       	ldi	r23, 0x01	; 1
    1660:	0e 94 1c 11 	call	0x2238	; 0x2238 <itoa>
    1664:	9d 81       	ldd	r25, Y+5	; 0x05
    1666:	8b 81       	ldd	r24, Y+3	; 0x03
    1668:	89 5f       	subi	r24, 0xF9	; 249
    166a:	69 2f       	mov	r22, r25
    166c:	0e 94 3e 03 	call	0x67c	; 0x67c <LCD_GoTo>
    1670:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <str>
    1674:	0e 94 08 03 	call	0x610	; 0x610 <LCD_WriteData>
    1678:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <str>
    167c:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <uartAddToTxBuffer>
    1680:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <uartSendTxBuffer>
    1684:	00 00       	nop
    1686:	00 00       	nop
    1688:	26 96       	adiw	r28, 0x06	; 6
    168a:	0f b6       	in	r0, 0x3f	; 63
    168c:	f8 94       	cli
    168e:	de bf       	out	0x3e, r29	; 62
    1690:	0f be       	out	0x3f, r0	; 63
    1692:	cd bf       	out	0x3d, r28	; 61
    1694:	df 91       	pop	r29
    1696:	cf 91       	pop	r28
    1698:	08 95       	ret

0000169a <USART_Receiving>:

void USART_Receiving()
{
    169a:	cf 93       	push	r28
    169c:	df 93       	push	r29
    169e:	cd b7       	in	r28, 0x3d	; 61
    16a0:	de b7       	in	r29, 0x3e	; 62
    16a2:	28 97       	sbiw	r28, 0x08	; 8
    16a4:	0f b6       	in	r0, 0x3f	; 63
    16a6:	f8 94       	cli
    16a8:	de bf       	out	0x3e, r29	; 62
    16aa:	0f be       	out	0x3f, r0	; 63
    16ac:	cd bf       	out	0x3d, r28	; 61
		cBuffer* bufferek = uartGetRxBuffer();
    16ae:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <uartGetRxBuffer>
    16b2:	9a 83       	std	Y+2, r25	; 0x02
    16b4:	89 83       	std	Y+1, r24	; 0x01
		
		bufferek->dataptr[bufferek->datalength - 1] = NULL;
    16b6:	89 81       	ldd	r24, Y+1	; 0x01
    16b8:	9a 81       	ldd	r25, Y+2	; 0x02
    16ba:	fc 01       	movw	r30, r24
    16bc:	20 81       	ld	r18, Z
    16be:	31 81       	ldd	r19, Z+1	; 0x01
    16c0:	89 81       	ldd	r24, Y+1	; 0x01
    16c2:	9a 81       	ldd	r25, Y+2	; 0x02
    16c4:	fc 01       	movw	r30, r24
    16c6:	84 81       	ldd	r24, Z+4	; 0x04
    16c8:	95 81       	ldd	r25, Z+5	; 0x05
    16ca:	01 97       	sbiw	r24, 0x01	; 1
    16cc:	82 0f       	add	r24, r18
    16ce:	93 1f       	adc	r25, r19
    16d0:	fc 01       	movw	r30, r24
    16d2:	10 82       	st	Z, r1
		xd = bufferek->dataptr;
    16d4:	89 81       	ldd	r24, Y+1	; 0x01
    16d6:	9a 81       	ldd	r25, Y+2	; 0x02
    16d8:	fc 01       	movw	r30, r24
    16da:	80 81       	ld	r24, Z
    16dc:	91 81       	ldd	r25, Z+1	; 0x01
    16de:	90 93 76 01 	sts	0x0176, r25	; 0x800176 <xd+0x1>
    16e2:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <xd>
		bufferek->datalength = 0;
    16e6:	89 81       	ldd	r24, Y+1	; 0x01
    16e8:	9a 81       	ldd	r25, Y+2	; 0x02
    16ea:	fc 01       	movw	r30, r24
    16ec:	15 82       	std	Z+5, r1	; 0x05
    16ee:	14 82       	std	Z+4, r1	; 0x04
		if(strcmp(xd, "volt") == 0)
    16f0:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <xd>
    16f4:	90 91 76 01 	lds	r25, 0x0176	; 0x800176 <xd+0x1>
    16f8:	69 e7       	ldi	r22, 0x79	; 121
    16fa:	70 e0       	ldi	r23, 0x00	; 0
    16fc:	0e 94 13 11 	call	0x2226	; 0x2226 <strcmp>
    1700:	89 2b       	or	r24, r25
    1702:	59 f4       	brne	.+22     	; 0x171a <USART_Receiving+0x80>
		{
			LCD_WriteText("Volt");
    1704:	8e e7       	ldi	r24, 0x7E	; 126
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	0e 94 1f 03 	call	0x63e	; 0x63e <LCD_WriteText>
			mode = 1;
    170c:	81 e0       	ldi	r24, 0x01	; 1
    170e:	90 e0       	ldi	r25, 0x00	; 0
    1710:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    1714:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
    1718:	ac c0       	rjmp	.+344    	; 0x1872 <USART_Receiving+0x1d8>
		}
		else if(strcmp(xd, "temp") == 0)
    171a:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <xd>
    171e:	90 91 76 01 	lds	r25, 0x0176	; 0x800176 <xd+0x1>
    1722:	63 e8       	ldi	r22, 0x83	; 131
    1724:	70 e0       	ldi	r23, 0x00	; 0
    1726:	0e 94 13 11 	call	0x2226	; 0x2226 <strcmp>
    172a:	89 2b       	or	r24, r25
    172c:	59 f4       	brne	.+22     	; 0x1744 <USART_Receiving+0xaa>
		{
			LCD_WriteText("Temp");
    172e:	88 e8       	ldi	r24, 0x88	; 136
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	0e 94 1f 03 	call	0x63e	; 0x63e <LCD_WriteText>
			mode = 2;
    1736:	82 e0       	ldi	r24, 0x02	; 2
    1738:	90 e0       	ldi	r25, 0x00	; 0
    173a:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    173e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
    1742:	97 c0       	rjmp	.+302    	; 0x1872 <USART_Receiving+0x1d8>
		}
		else if(strcmp(xd, "time") == 0)
    1744:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <xd>
    1748:	90 91 76 01 	lds	r25, 0x0176	; 0x800176 <xd+0x1>
    174c:	6d e8       	ldi	r22, 0x8D	; 141
    174e:	70 e0       	ldi	r23, 0x00	; 0
    1750:	0e 94 13 11 	call	0x2226	; 0x2226 <strcmp>
    1754:	89 2b       	or	r24, r25
    1756:	89 f4       	brne	.+34     	; 0x177a <USART_Receiving+0xe0>
		{
			LCD_WriteText("Time");
    1758:	82 e9       	ldi	r24, 0x92	; 146
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	0e 94 1f 03 	call	0x63e	; 0x63e <LCD_WriteText>
			mode = 3;
    1760:	83 e0       	ldi	r24, 0x03	; 3
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    1768:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			watchdog = 1;
    176c:	81 e0       	ldi	r24, 0x01	; 1
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	90 93 bf 00 	sts	0x00BF, r25	; 0x8000bf <watchdog+0x1>
    1774:	80 93 be 00 	sts	0x00BE, r24	; 0x8000be <watchdog>
			while(1);
    1778:	ff cf       	rjmp	.-2      	; 0x1778 <USART_Receiving+0xde>
			
		}
		else if(strcmp(xd, "settime") == 0)
    177a:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <xd>
    177e:	90 91 76 01 	lds	r25, 0x0176	; 0x800176 <xd+0x1>
    1782:	67 e9       	ldi	r22, 0x97	; 151
    1784:	70 e0       	ldi	r23, 0x00	; 0
    1786:	0e 94 13 11 	call	0x2226	; 0x2226 <strcmp>
    178a:	89 2b       	or	r24, r25
    178c:	09 f0       	breq	.+2      	; 0x1790 <USART_Receiving+0xf6>
    178e:	71 c0       	rjmp	.+226    	; 0x1872 <USART_Receiving+0x1d8>
		{
			cli();	
    1790:	f8 94       	cli
			USART_GetString(&time);
    1792:	8e e6       	ldi	r24, 0x6E	; 110
    1794:	91 e0       	ldi	r25, 0x01	; 1
    1796:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <USART_GetString>
			sei();
    179a:	78 94       	sei
			int hours = ((time[0] - 48) * 10) + (time[1] - 48);		
    179c:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <time>
    17a0:	88 2f       	mov	r24, r24
    17a2:	90 e0       	ldi	r25, 0x00	; 0
    17a4:	c0 97       	sbiw	r24, 0x30	; 48
    17a6:	88 0f       	add	r24, r24
    17a8:	99 1f       	adc	r25, r25
    17aa:	9c 01       	movw	r18, r24
    17ac:	22 0f       	add	r18, r18
    17ae:	33 1f       	adc	r19, r19
    17b0:	22 0f       	add	r18, r18
    17b2:	33 1f       	adc	r19, r19
    17b4:	28 0f       	add	r18, r24
    17b6:	39 1f       	adc	r19, r25
    17b8:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <time+0x1>
    17bc:	88 2f       	mov	r24, r24
    17be:	90 e0       	ldi	r25, 0x00	; 0
    17c0:	c0 97       	sbiw	r24, 0x30	; 48
    17c2:	82 0f       	add	r24, r18
    17c4:	93 1f       	adc	r25, r19
    17c6:	9c 83       	std	Y+4, r25	; 0x04
    17c8:	8b 83       	std	Y+3, r24	; 0x03
			int minutes = ((time[2] - 48) * 10) + (time[3] - 48);
    17ca:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <time+0x2>
    17ce:	88 2f       	mov	r24, r24
    17d0:	90 e0       	ldi	r25, 0x00	; 0
    17d2:	c0 97       	sbiw	r24, 0x30	; 48
    17d4:	88 0f       	add	r24, r24
    17d6:	99 1f       	adc	r25, r25
    17d8:	9c 01       	movw	r18, r24
    17da:	22 0f       	add	r18, r18
    17dc:	33 1f       	adc	r19, r19
    17de:	22 0f       	add	r18, r18
    17e0:	33 1f       	adc	r19, r19
    17e2:	28 0f       	add	r18, r24
    17e4:	39 1f       	adc	r19, r25
    17e6:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <time+0x3>
    17ea:	88 2f       	mov	r24, r24
    17ec:	90 e0       	ldi	r25, 0x00	; 0
    17ee:	c0 97       	sbiw	r24, 0x30	; 48
    17f0:	82 0f       	add	r24, r18
    17f2:	93 1f       	adc	r25, r19
    17f4:	9e 83       	std	Y+6, r25	; 0x06
    17f6:	8d 83       	std	Y+5, r24	; 0x05
			int seconds = ((time[4] - 48) * 10) + (time[5] - 48);
    17f8:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <time+0x4>
    17fc:	88 2f       	mov	r24, r24
    17fe:	90 e0       	ldi	r25, 0x00	; 0
    1800:	c0 97       	sbiw	r24, 0x30	; 48
    1802:	88 0f       	add	r24, r24
    1804:	99 1f       	adc	r25, r25
    1806:	9c 01       	movw	r18, r24
    1808:	22 0f       	add	r18, r18
    180a:	33 1f       	adc	r19, r19
    180c:	22 0f       	add	r18, r18
    180e:	33 1f       	adc	r19, r19
    1810:	28 0f       	add	r18, r24
    1812:	39 1f       	adc	r19, r25
    1814:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <time+0x5>
    1818:	88 2f       	mov	r24, r24
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	c0 97       	sbiw	r24, 0x30	; 48
    181e:	82 0f       	add	r24, r18
    1820:	93 1f       	adc	r25, r19
    1822:	98 87       	std	Y+8, r25	; 0x08
    1824:	8f 83       	std	Y+7, r24	; 0x07
			if((hours > 23) || minutes > 59 || seconds > 59)
    1826:	8b 81       	ldd	r24, Y+3	; 0x03
    1828:	9c 81       	ldd	r25, Y+4	; 0x04
    182a:	48 97       	sbiw	r24, 0x18	; 24
    182c:	44 f4       	brge	.+16     	; 0x183e <USART_Receiving+0x1a4>
    182e:	8d 81       	ldd	r24, Y+5	; 0x05
    1830:	9e 81       	ldd	r25, Y+6	; 0x06
    1832:	cc 97       	sbiw	r24, 0x3c	; 60
    1834:	24 f4       	brge	.+8      	; 0x183e <USART_Receiving+0x1a4>
    1836:	8f 81       	ldd	r24, Y+7	; 0x07
    1838:	98 85       	ldd	r25, Y+8	; 0x08
    183a:	cc 97       	sbiw	r24, 0x3c	; 60
    183c:	5c f0       	brlt	.+22     	; 0x1854 <USART_Receiving+0x1ba>
			{
				USART_PutString("Wrong time format\r");	
    183e:	8f e9       	ldi	r24, 0x9F	; 159
    1840:	90 e0       	ldi	r25, 0x00	; 0
    1842:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <USART_PutString>
				mode = 3;
    1846:	83 e0       	ldi	r24, 0x03	; 3
    1848:	90 e0       	ldi	r25, 0x00	; 0
    184a:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    184e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
    1852:	0f c0       	rjmp	.+30     	; 0x1872 <USART_Receiving+0x1d8>
			}
			else
			{
				setTime(hours, minutes, seconds);
    1854:	4f 81       	ldd	r20, Y+7	; 0x07
    1856:	58 85       	ldd	r21, Y+8	; 0x08
    1858:	2d 81       	ldd	r18, Y+5	; 0x05
    185a:	3e 81       	ldd	r19, Y+6	; 0x06
    185c:	8b 81       	ldd	r24, Y+3	; 0x03
    185e:	9c 81       	ldd	r25, Y+4	; 0x04
    1860:	b9 01       	movw	r22, r18
    1862:	0e 94 bc 07 	call	0xf78	; 0xf78 <setTime>
				mode = 3;
    1866:	83 e0       	ldi	r24, 0x03	; 3
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    186e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			}
			
		}
		
		//displayData(mode, 0, 1);
		displayData(mode, 0, 1);		
    1872:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    1876:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    187a:	41 e0       	ldi	r20, 0x01	; 1
    187c:	50 e0       	ldi	r21, 0x00	; 0
    187e:	60 e0       	ldi	r22, 0x00	; 0
    1880:	70 e0       	ldi	r23, 0x00	; 0
    1882:	0e 94 4e 09 	call	0x129c	; 0x129c <displayData>
}
    1886:	00 00       	nop
    1888:	28 96       	adiw	r28, 0x08	; 8
    188a:	0f b6       	in	r0, 0x3f	; 63
    188c:	f8 94       	cli
    188e:	de bf       	out	0x3e, r29	; 62
    1890:	0f be       	out	0x3f, r0	; 63
    1892:	cd bf       	out	0x3d, r28	; 61
    1894:	df 91       	pop	r29
    1896:	cf 91       	pop	r28
    1898:	08 95       	ret

0000189a <__vector_7>:

ISR(TIMER1_COMPA_vect){
    189a:	1f 92       	push	r1
    189c:	0f 92       	push	r0
    189e:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    18a2:	0f 92       	push	r0
    18a4:	11 24       	eor	r1, r1
    18a6:	2f 93       	push	r18
    18a8:	3f 93       	push	r19
    18aa:	4f 93       	push	r20
    18ac:	5f 93       	push	r21
    18ae:	6f 93       	push	r22
    18b0:	7f 93       	push	r23
    18b2:	8f 93       	push	r24
    18b4:	9f 93       	push	r25
    18b6:	af 93       	push	r26
    18b8:	bf 93       	push	r27
    18ba:	ef 93       	push	r30
    18bc:	ff 93       	push	r31
    18be:	cf 93       	push	r28
    18c0:	df 93       	push	r29
    18c2:	cd b7       	in	r28, 0x3d	; 61
    18c4:	de b7       	in	r29, 0x3e	; 62
	getTime(&Godziny, &Minuty, &Sekundy);
    18c6:	4c eb       	ldi	r20, 0xBC	; 188
    18c8:	50 e0       	ldi	r21, 0x00	; 0
    18ca:	6a eb       	ldi	r22, 0xBA	; 186
    18cc:	70 e0       	ldi	r23, 0x00	; 0
    18ce:	88 eb       	ldi	r24, 0xB8	; 184
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	0e 94 70 08 	call	0x10e0	; 0x10e0 <getTime>
	temperaturka = getTemp(Celsius);
    18d6:	80 e0       	ldi	r24, 0x00	; 0
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	0e 94 b4 08 	call	0x1168	; 0x1168 <getTemp>
    18de:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__data_end+0x1>
    18e2:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__data_end>
	if(watchdog == 0)
    18e6:	80 91 be 00 	lds	r24, 0x00BE	; 0x8000be <watchdog>
    18ea:	90 91 bf 00 	lds	r25, 0x00BF	; 0x8000bf <watchdog+0x1>
    18ee:	89 2b       	or	r24, r25
    18f0:	09 f4       	brne	.+2      	; 0x18f4 <__vector_7+0x5a>
		wdt_reset();
    18f2:	a8 95       	wdr
}
    18f4:	00 00       	nop
    18f6:	df 91       	pop	r29
    18f8:	cf 91       	pop	r28
    18fa:	ff 91       	pop	r31
    18fc:	ef 91       	pop	r30
    18fe:	bf 91       	pop	r27
    1900:	af 91       	pop	r26
    1902:	9f 91       	pop	r25
    1904:	8f 91       	pop	r24
    1906:	7f 91       	pop	r23
    1908:	6f 91       	pop	r22
    190a:	5f 91       	pop	r21
    190c:	4f 91       	pop	r20
    190e:	3f 91       	pop	r19
    1910:	2f 91       	pop	r18
    1912:	0f 90       	pop	r0
    1914:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1918:	0f 90       	pop	r0
    191a:	1f 90       	pop	r1
    191c:	18 95       	reti

0000191e <main>:

int main(void)
{
    191e:	cf 93       	push	r28
    1920:	df 93       	push	r29
    1922:	00 d0       	rcall	.+0      	; 0x1924 <main+0x6>
    1924:	cd b7       	in	r28, 0x3d	; 61
    1926:	de b7       	in	r29, 0x3e	; 62
DDRD = 0xFF;
    1928:	81 e3       	ldi	r24, 0x31	; 49
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	2f ef       	ldi	r18, 0xFF	; 255
    192e:	fc 01       	movw	r30, r24
    1930:	20 83       	st	Z, r18
	
DDRD |= (1 << PD1);
    1932:	81 e3       	ldi	r24, 0x31	; 49
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	21 e3       	ldi	r18, 0x31	; 49
    1938:	30 e0       	ldi	r19, 0x00	; 0
    193a:	f9 01       	movw	r30, r18
    193c:	20 81       	ld	r18, Z
    193e:	22 60       	ori	r18, 0x02	; 2
    1940:	fc 01       	movw	r30, r24
    1942:	20 83       	st	Z, r18

LCD_Initialize();
    1944:	0e 94 df 03 	call	0x7be	; 0x7be <LCD_Initialize>
ADC_Init();
    1948:	0e 94 17 07 	call	0xe2e	; 0xe2e <ADC_Init>
AutoTrigger_Init();
    194c:	0e 94 29 07 	call	0xe52	; 0xe52 <AutoTrigger_Init>
SPI_Init();
    1950:	0e 94 05 07 	call	0xe0a	; 0xe0a <SPI_Init>
TWI_Init();
    1954:	0e 94 c1 06 	call	0xd82	; 0xd82 <TWI_Init>
Timer1_Init();
    1958:	0e 94 5d 07 	call	0xeba	; 0xeba <Timer1_Init>

setTime(16, 17, 18);
    195c:	42 e1       	ldi	r20, 0x12	; 18
    195e:	50 e0       	ldi	r21, 0x00	; 0
    1960:	61 e1       	ldi	r22, 0x11	; 17
    1962:	70 e0       	ldi	r23, 0x00	; 0
    1964:	80 e1       	ldi	r24, 0x10	; 16
    1966:	90 e0       	ldi	r25, 0x00	; 0
    1968:	0e 94 bc 07 	call	0xf78	; 0xf78 <setTime>



uartInit();
    196c:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <uartInit>
uartSetBaudRate(9600);
    1970:	60 e8       	ldi	r22, 0x80	; 128
    1972:	75 e2       	ldi	r23, 0x25	; 37
    1974:	80 e0       	ldi	r24, 0x00	; 0
    1976:	90 e0       	ldi	r25, 0x00	; 0
    1978:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <uartSetBaudRate>
uartInitBuffers();
    197c:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <uartInitBuffers>
rprintfInit(uartSendByte);
    1980:	84 eb       	ldi	r24, 0xB4	; 180
    1982:	9d e0       	ldi	r25, 0x0D	; 13
    1984:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <rprintfInit>
cBuffer* bufferek = uartGetRxBuffer();    
    1988:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <uartGetRxBuffer>
    198c:	9a 83       	std	Y+2, r25	; 0x02
    198e:	89 83       	std	Y+1, r24	; 0x01

USART_Int_Init();
    1990:	0e 94 7e 07 	call	0xefc	; 0xefc <USART_Int_Init>

set_sleep_mode(SLEEP_MODE_IDLE);
    1994:	85 e5       	ldi	r24, 0x55	; 85
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	25 e5       	ldi	r18, 0x55	; 85
    199a:	30 e0       	ldi	r19, 0x00	; 0
    199c:	f9 01       	movw	r30, r18
    199e:	20 81       	ld	r18, Z
    19a0:	2f 78       	andi	r18, 0x8F	; 143
    19a2:	fc 01       	movw	r30, r24
    19a4:	20 83       	st	Z, r18
sleep_enable();
    19a6:	85 e5       	ldi	r24, 0x55	; 85
    19a8:	90 e0       	ldi	r25, 0x00	; 0
    19aa:	25 e5       	ldi	r18, 0x55	; 85
    19ac:	30 e0       	ldi	r19, 0x00	; 0
    19ae:	f9 01       	movw	r30, r18
    19b0:	20 81       	ld	r18, Z
    19b2:	20 68       	ori	r18, 0x80	; 128
    19b4:	fc 01       	movw	r30, r24
    19b6:	20 83       	st	Z, r18
				"out __SREG__,__tmp_reg__" "\n\t"
				"out %0, %2" "\n \t"
				: /* no outputs */
				: "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
    19b8:	87 e0       	ldi	r24, 0x07	; 7
    19ba:	87 70       	andi	r24, 0x07	; 7
    19bc:	88 60       	ori	r24, 0x08	; 8
    19be:	98 2f       	mov	r25, r24
__attribute__ ((__always_inline__))
void wdt_enable (const uint8_t value)
{
	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
	{
		__asm__ __volatile__ (
    19c0:	88 e1       	ldi	r24, 0x18	; 24
    19c2:	0f b6       	in	r0, 0x3f	; 63
    19c4:	f8 94       	cli
    19c6:	a8 95       	wdr
    19c8:	81 bd       	out	0x21, r24	; 33
    19ca:	0f be       	out	0x3f, r0	; 63
    19cc:	91 bd       	out	0x21, r25	; 33
wdt_enable(7);
sei();
    19ce:	78 94       	sei

while(1)
{
	//wdt_reset();
	while(bufferek->dataptr[bufferek->datalength - 1] != 13); 
    19d0:	00 00       	nop
    19d2:	89 81       	ldd	r24, Y+1	; 0x01
    19d4:	9a 81       	ldd	r25, Y+2	; 0x02
    19d6:	fc 01       	movw	r30, r24
    19d8:	20 81       	ld	r18, Z
    19da:	31 81       	ldd	r19, Z+1	; 0x01
    19dc:	89 81       	ldd	r24, Y+1	; 0x01
    19de:	9a 81       	ldd	r25, Y+2	; 0x02
    19e0:	fc 01       	movw	r30, r24
    19e2:	84 81       	ldd	r24, Z+4	; 0x04
    19e4:	95 81       	ldd	r25, Z+5	; 0x05
    19e6:	01 97       	sbiw	r24, 0x01	; 1
    19e8:	82 0f       	add	r24, r18
    19ea:	93 1f       	adc	r25, r19
    19ec:	fc 01       	movw	r30, r24
    19ee:	80 81       	ld	r24, Z
    19f0:	8d 30       	cpi	r24, 0x0D	; 13
    19f2:	79 f7       	brne	.-34     	; 0x19d2 <main+0xb4>
	{
		//wdt_reset();
		sleep_cpu();	
    19f4:	88 95       	sleep
	}
	USART_Receiving();
    19f6:	0e 94 4d 0b 	call	0x169a	; 0x169a <USART_Receiving>
	

//_delay_ms(100);
	}
    19fa:	ea cf       	rjmp	.-44     	; 0x19d0 <main+0xb2>

000019fc <rprintfInit>:

// *** rprintf initialization ***
// you must call this function once and supply the character output
// routine before using other functions in this library
void rprintfInit(void (*putchar_func)(unsigned char c))
{
    19fc:	cf 93       	push	r28
    19fe:	df 93       	push	r29
    1a00:	00 d0       	rcall	.+0      	; 0x1a02 <rprintfInit+0x6>
    1a02:	cd b7       	in	r28, 0x3d	; 61
    1a04:	de b7       	in	r29, 0x3e	; 62
    1a06:	9a 83       	std	Y+2, r25	; 0x02
    1a08:	89 83       	std	Y+1, r24	; 0x01
	rputchar = putchar_func;
    1a0a:	89 81       	ldd	r24, Y+1	; 0x01
    1a0c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a0e:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <rputchar+0x1>
    1a12:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <rputchar>
}
    1a16:	00 00       	nop
    1a18:	0f 90       	pop	r0
    1a1a:	0f 90       	pop	r0
    1a1c:	df 91       	pop	r29
    1a1e:	cf 91       	pop	r28
    1a20:	08 95       	ret

00001a22 <uartInit>:
	}
	else
	{
		return FALSE;
	}
}
    1a22:	cf 93       	push	r28
    1a24:	df 93       	push	r29
    1a26:	cd b7       	in	r28, 0x3d	; 61
    1a28:	de b7       	in	r29, 0x3e	; 62
    1a2a:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <uartInitBuffers>
    1a2e:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <UartRxFunc+0x1>
    1a32:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <UartRxFunc>
    1a36:	8a e2       	ldi	r24, 0x2A	; 42
    1a38:	90 e0       	ldi	r25, 0x00	; 0
    1a3a:	28 ed       	ldi	r18, 0xD8	; 216
    1a3c:	fc 01       	movw	r30, r24
    1a3e:	20 83       	st	Z, r18
    1a40:	60 e8       	ldi	r22, 0x80	; 128
    1a42:	75 e2       	ldi	r23, 0x25	; 37
    1a44:	80 e0       	ldi	r24, 0x00	; 0
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <uartSetBaudRate>
    1a4c:	8f ef       	ldi	r24, 0xFF	; 255
    1a4e:	80 93 8f 01 	sts	0x018F, r24	; 0x80018f <uartReadyTx>
    1a52:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <uartBufferedTx>
    1a56:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <uartRxOverflow+0x1>
    1a5a:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <uartRxOverflow>
    1a5e:	78 94       	sei
    1a60:	00 00       	nop
    1a62:	df 91       	pop	r29
    1a64:	cf 91       	pop	r28
    1a66:	08 95       	ret

00001a68 <uartInitBuffers>:
    1a68:	cf 93       	push	r28
    1a6a:	df 93       	push	r29
    1a6c:	cd b7       	in	r28, 0x3d	; 61
    1a6e:	de b7       	in	r29, 0x3e	; 62
    1a70:	40 e4       	ldi	r20, 0x40	; 64
    1a72:	50 e0       	ldi	r21, 0x00	; 0
    1a74:	62 ec       	ldi	r22, 0xC2	; 194
    1a76:	70 e0       	ldi	r23, 0x00	; 0
    1a78:	80 e9       	ldi	r24, 0x90	; 144
    1a7a:	91 e0       	ldi	r25, 0x01	; 1
    1a7c:	0e 94 49 00 	call	0x92	; 0x92 <bufferInit>
    1a80:	40 e4       	ldi	r20, 0x40	; 64
    1a82:	50 e0       	ldi	r21, 0x00	; 0
    1a84:	62 e0       	ldi	r22, 0x02	; 2
    1a86:	71 e0       	ldi	r23, 0x01	; 1
    1a88:	89 e9       	ldi	r24, 0x99	; 153
    1a8a:	91 e0       	ldi	r25, 0x01	; 1
    1a8c:	0e 94 49 00 	call	0x92	; 0x92 <bufferInit>
    1a90:	00 00       	nop
    1a92:	df 91       	pop	r29
    1a94:	cf 91       	pop	r28
    1a96:	08 95       	ret

00001a98 <uartSetBaudRate>:
    1a98:	ef 92       	push	r14
    1a9a:	ff 92       	push	r15
    1a9c:	0f 93       	push	r16
    1a9e:	1f 93       	push	r17
    1aa0:	cf 93       	push	r28
    1aa2:	df 93       	push	r29
    1aa4:	00 d0       	rcall	.+0      	; 0x1aa6 <uartSetBaudRate+0xe>
    1aa6:	00 d0       	rcall	.+0      	; 0x1aa8 <uartSetBaudRate+0x10>
    1aa8:	00 d0       	rcall	.+0      	; 0x1aaa <uartSetBaudRate+0x12>
    1aaa:	cd b7       	in	r28, 0x3d	; 61
    1aac:	de b7       	in	r29, 0x3e	; 62
    1aae:	6b 83       	std	Y+3, r22	; 0x03
    1ab0:	7c 83       	std	Y+4, r23	; 0x04
    1ab2:	8d 83       	std	Y+5, r24	; 0x05
    1ab4:	9e 83       	std	Y+6, r25	; 0x06
    1ab6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab8:	9c 81       	ldd	r25, Y+4	; 0x04
    1aba:	ad 81       	ldd	r26, Y+5	; 0x05
    1abc:	be 81       	ldd	r27, Y+6	; 0x06
    1abe:	80 58       	subi	r24, 0x80	; 128
    1ac0:	9b 47       	sbci	r25, 0x7B	; 123
    1ac2:	a1 4e       	sbci	r26, 0xE1	; 225
    1ac4:	bf 4f       	sbci	r27, 0xFF	; 255
    1ac6:	88 0f       	add	r24, r24
    1ac8:	99 1f       	adc	r25, r25
    1aca:	aa 1f       	adc	r26, r26
    1acc:	bb 1f       	adc	r27, r27
    1ace:	88 0f       	add	r24, r24
    1ad0:	99 1f       	adc	r25, r25
    1ad2:	aa 1f       	adc	r26, r26
    1ad4:	bb 1f       	adc	r27, r27
    1ad6:	88 0f       	add	r24, r24
    1ad8:	99 1f       	adc	r25, r25
    1ada:	aa 1f       	adc	r26, r26
    1adc:	bb 1f       	adc	r27, r27
    1ade:	7c 01       	movw	r14, r24
    1ae0:	8d 01       	movw	r16, r26
    1ae2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ae6:	ad 81       	ldd	r26, Y+5	; 0x05
    1ae8:	be 81       	ldd	r27, Y+6	; 0x06
    1aea:	88 0f       	add	r24, r24
    1aec:	99 1f       	adc	r25, r25
    1aee:	aa 1f       	adc	r26, r26
    1af0:	bb 1f       	adc	r27, r27
    1af2:	88 0f       	add	r24, r24
    1af4:	99 1f       	adc	r25, r25
    1af6:	aa 1f       	adc	r26, r26
    1af8:	bb 1f       	adc	r27, r27
    1afa:	88 0f       	add	r24, r24
    1afc:	99 1f       	adc	r25, r25
    1afe:	aa 1f       	adc	r26, r26
    1b00:	bb 1f       	adc	r27, r27
    1b02:	88 0f       	add	r24, r24
    1b04:	99 1f       	adc	r25, r25
    1b06:	aa 1f       	adc	r26, r26
    1b08:	bb 1f       	adc	r27, r27
    1b0a:	9c 01       	movw	r18, r24
    1b0c:	ad 01       	movw	r20, r26
    1b0e:	c8 01       	movw	r24, r16
    1b10:	b7 01       	movw	r22, r14
    1b12:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <__udivmodsi4>
    1b16:	da 01       	movw	r26, r20
    1b18:	c9 01       	movw	r24, r18
    1b1a:	01 97       	sbiw	r24, 0x01	; 1
    1b1c:	9a 83       	std	Y+2, r25	; 0x02
    1b1e:	89 83       	std	Y+1, r24	; 0x01
    1b20:	89 e2       	ldi	r24, 0x29	; 41
    1b22:	90 e0       	ldi	r25, 0x00	; 0
    1b24:	29 81       	ldd	r18, Y+1	; 0x01
    1b26:	fc 01       	movw	r30, r24
    1b28:	20 83       	st	Z, r18
    1b2a:	80 e4       	ldi	r24, 0x40	; 64
    1b2c:	90 e0       	ldi	r25, 0x00	; 0
    1b2e:	29 81       	ldd	r18, Y+1	; 0x01
    1b30:	3a 81       	ldd	r19, Y+2	; 0x02
    1b32:	23 2f       	mov	r18, r19
    1b34:	33 27       	eor	r19, r19
    1b36:	fc 01       	movw	r30, r24
    1b38:	20 83       	st	Z, r18
    1b3a:	00 00       	nop
    1b3c:	26 96       	adiw	r28, 0x06	; 6
    1b3e:	0f b6       	in	r0, 0x3f	; 63
    1b40:	f8 94       	cli
    1b42:	de bf       	out	0x3e, r29	; 62
    1b44:	0f be       	out	0x3f, r0	; 63
    1b46:	cd bf       	out	0x3d, r28	; 61
    1b48:	df 91       	pop	r29
    1b4a:	cf 91       	pop	r28
    1b4c:	1f 91       	pop	r17
    1b4e:	0f 91       	pop	r16
    1b50:	ff 90       	pop	r15
    1b52:	ef 90       	pop	r14
    1b54:	08 95       	ret

00001b56 <uartGetRxBuffer>:
    1b56:	cf 93       	push	r28
    1b58:	df 93       	push	r29
    1b5a:	cd b7       	in	r28, 0x3d	; 61
    1b5c:	de b7       	in	r29, 0x3e	; 62
    1b5e:	80 e9       	ldi	r24, 0x90	; 144
    1b60:	91 e0       	ldi	r25, 0x01	; 1
    1b62:	df 91       	pop	r29
    1b64:	cf 91       	pop	r28
    1b66:	08 95       	ret

00001b68 <uartSendByte>:
    1b68:	cf 93       	push	r28
    1b6a:	df 93       	push	r29
    1b6c:	1f 92       	push	r1
    1b6e:	cd b7       	in	r28, 0x3d	; 61
    1b70:	de b7       	in	r29, 0x3e	; 62
    1b72:	89 83       	std	Y+1, r24	; 0x01
    1b74:	00 00       	nop
    1b76:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <uartReadyTx>
    1b7a:	88 23       	and	r24, r24
    1b7c:	e1 f3       	breq	.-8      	; 0x1b76 <uartSendByte+0xe>
    1b7e:	8c e2       	ldi	r24, 0x2C	; 44
    1b80:	90 e0       	ldi	r25, 0x00	; 0
    1b82:	29 81       	ldd	r18, Y+1	; 0x01
    1b84:	fc 01       	movw	r30, r24
    1b86:	20 83       	st	Z, r18
    1b88:	10 92 8f 01 	sts	0x018F, r1	; 0x80018f <uartReadyTx>
    1b8c:	00 00       	nop
    1b8e:	0f 90       	pop	r0
    1b90:	df 91       	pop	r29
    1b92:	cf 91       	pop	r28
    1b94:	08 95       	ret

00001b96 <uartAddToTxBuffer>:

// add byte to end of uart Tx buffer
u08 uartAddToTxBuffer(u08 data)
{
    1b96:	cf 93       	push	r28
    1b98:	df 93       	push	r29
    1b9a:	1f 92       	push	r1
    1b9c:	cd b7       	in	r28, 0x3d	; 61
    1b9e:	de b7       	in	r29, 0x3e	; 62
    1ba0:	89 83       	std	Y+1, r24	; 0x01
	// add data byte to the end of the tx buffer
	return bufferAddToEnd(&uartTxBuffer, data);
    1ba2:	69 81       	ldd	r22, Y+1	; 0x01
    1ba4:	89 e9       	ldi	r24, 0x99	; 153
    1ba6:	91 e0       	ldi	r25, 0x01	; 1
    1ba8:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <bufferAddToEnd>
}
    1bac:	0f 90       	pop	r0
    1bae:	df 91       	pop	r29
    1bb0:	cf 91       	pop	r28
    1bb2:	08 95       	ret

00001bb4 <uartSendTxBuffer>:

// start transmission of the current uart Tx buffer contents
void uartSendTxBuffer(void)
{
    1bb4:	cf 93       	push	r28
    1bb6:	df 93       	push	r29
    1bb8:	cd b7       	in	r28, 0x3d	; 61
    1bba:	de b7       	in	r29, 0x3e	; 62
	// turn on buffered transmit
	uartBufferedTx = TRUE;
    1bbc:	8f ef       	ldi	r24, 0xFF	; 255
    1bbe:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <uartBufferedTx>
	// send the first byte to get things going by interrupts
	uartSendByte(bufferGetFromFront(&uartTxBuffer));
    1bc2:	89 e9       	ldi	r24, 0x99	; 153
    1bc4:	91 e0       	ldi	r25, 0x01	; 1
    1bc6:	0e 94 86 00 	call	0x10c	; 0x10c <bufferGetFromFront>
    1bca:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <uartSendByte>
}
    1bce:	00 00       	nop
    1bd0:	df 91       	pop	r29
    1bd2:	cf 91       	pop	r28
    1bd4:	08 95       	ret

00001bd6 <__vector_15>:
	}
}
*/
// UART Transmit Complete Interrupt Handler
UART_INTERRUPT_HANDLER(USART_TXC_vect)
{
    1bd6:	1f 92       	push	r1
    1bd8:	0f 92       	push	r0
    1bda:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1bde:	0f 92       	push	r0
    1be0:	11 24       	eor	r1, r1
    1be2:	0f 93       	push	r16
    1be4:	1f 93       	push	r17
    1be6:	2f 93       	push	r18
    1be8:	3f 93       	push	r19
    1bea:	4f 93       	push	r20
    1bec:	5f 93       	push	r21
    1bee:	6f 93       	push	r22
    1bf0:	7f 93       	push	r23
    1bf2:	8f 93       	push	r24
    1bf4:	9f 93       	push	r25
    1bf6:	af 93       	push	r26
    1bf8:	bf 93       	push	r27
    1bfa:	ef 93       	push	r30
    1bfc:	ff 93       	push	r31
    1bfe:	cf 93       	push	r28
    1c00:	df 93       	push	r29
    1c02:	cd b7       	in	r28, 0x3d	; 61
    1c04:	de b7       	in	r29, 0x3e	; 62
	// check if buffered tx is enabled
	if(uartBufferedTx)
    1c06:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <uartBufferedTx>
    1c0a:	88 23       	and	r24, r24
    1c0c:	a9 f0       	breq	.+42     	; 0x1c38 <__vector_15+0x62>
	{
		// check if there's data left in the buffer
		if(uartTxBuffer.datalength)
    1c0e:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <uartTxBuffer+0x4>
    1c12:	90 91 9e 01 	lds	r25, 0x019E	; 0x80019e <uartTxBuffer+0x5>
    1c16:	89 2b       	or	r24, r25
    1c18:	49 f0       	breq	.+18     	; 0x1c2c <__vector_15+0x56>
		{
			// send byte from top of buffer
			outb(UDR, bufferGetFromFront(&uartTxBuffer));
    1c1a:	0c e2       	ldi	r16, 0x2C	; 44
    1c1c:	10 e0       	ldi	r17, 0x00	; 0
    1c1e:	89 e9       	ldi	r24, 0x99	; 153
    1c20:	91 e0       	ldi	r25, 0x01	; 1
    1c22:	0e 94 86 00 	call	0x10c	; 0x10c <bufferGetFromFront>
    1c26:	f8 01       	movw	r30, r16
    1c28:	80 83       	st	Z, r24
	{
		// we're using single-byte tx mode
		// indicate transmit complete, back to ready
		uartReadyTx = TRUE;
	}
}
    1c2a:	09 c0       	rjmp	.+18     	; 0x1c3e <__vector_15+0x68>
			outb(UDR, bufferGetFromFront(&uartTxBuffer));
		}
		else
		{
			// no data left
			uartBufferedTx = FALSE;
    1c2c:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <uartBufferedTx>
			// return to ready state
			uartReadyTx = TRUE;
    1c30:	8f ef       	ldi	r24, 0xFF	; 255
    1c32:	80 93 8f 01 	sts	0x018F, r24	; 0x80018f <uartReadyTx>
	{
		// we're using single-byte tx mode
		// indicate transmit complete, back to ready
		uartReadyTx = TRUE;
	}
}
    1c36:	03 c0       	rjmp	.+6      	; 0x1c3e <__vector_15+0x68>
	}
	else
	{
		// we're using single-byte tx mode
		// indicate transmit complete, back to ready
		uartReadyTx = TRUE;
    1c38:	8f ef       	ldi	r24, 0xFF	; 255
    1c3a:	80 93 8f 01 	sts	0x018F, r24	; 0x80018f <uartReadyTx>
	}
}
    1c3e:	00 00       	nop
    1c40:	df 91       	pop	r29
    1c42:	cf 91       	pop	r28
    1c44:	ff 91       	pop	r31
    1c46:	ef 91       	pop	r30
    1c48:	bf 91       	pop	r27
    1c4a:	af 91       	pop	r26
    1c4c:	9f 91       	pop	r25
    1c4e:	8f 91       	pop	r24
    1c50:	7f 91       	pop	r23
    1c52:	6f 91       	pop	r22
    1c54:	5f 91       	pop	r21
    1c56:	4f 91       	pop	r20
    1c58:	3f 91       	pop	r19
    1c5a:	2f 91       	pop	r18
    1c5c:	1f 91       	pop	r17
    1c5e:	0f 91       	pop	r16
    1c60:	0f 90       	pop	r0
    1c62:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1c66:	0f 90       	pop	r0
    1c68:	1f 90       	pop	r1
    1c6a:	18 95       	reti

00001c6c <__vector_13>:

// UART Receive Complete Interrupt Handler
UART_INTERRUPT_HANDLER(USART_RXC_vect)
{
    1c6c:	1f 92       	push	r1
    1c6e:	0f 92       	push	r0
    1c70:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1c74:	0f 92       	push	r0
    1c76:	11 24       	eor	r1, r1
    1c78:	2f 93       	push	r18
    1c7a:	3f 93       	push	r19
    1c7c:	4f 93       	push	r20
    1c7e:	5f 93       	push	r21
    1c80:	6f 93       	push	r22
    1c82:	7f 93       	push	r23
    1c84:	8f 93       	push	r24
    1c86:	9f 93       	push	r25
    1c88:	af 93       	push	r26
    1c8a:	bf 93       	push	r27
    1c8c:	ef 93       	push	r30
    1c8e:	ff 93       	push	r31
    1c90:	cf 93       	push	r28
    1c92:	df 93       	push	r29
    1c94:	1f 92       	push	r1
    1c96:	cd b7       	in	r28, 0x3d	; 61
    1c98:	de b7       	in	r29, 0x3e	; 62
	u08 c;
	
	// get received char
	c = inb(UDR);
    1c9a:	8c e2       	ldi	r24, 0x2C	; 44
    1c9c:	90 e0       	ldi	r25, 0x00	; 0
    1c9e:	fc 01       	movw	r30, r24
    1ca0:	80 81       	ld	r24, Z
    1ca2:	89 83       	std	Y+1, r24	; 0x01

	// if there's a user function to handle this receive event
	if(UartRxFunc)
    1ca4:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <UartRxFunc>
    1ca8:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <UartRxFunc+0x1>
    1cac:	89 2b       	or	r24, r25
    1cae:	41 f0       	breq	.+16     	; 0x1cc0 <__vector_13+0x54>
	{
		// call it and pass the received data
		UartRxFunc(c);
    1cb0:	20 91 42 01 	lds	r18, 0x0142	; 0x800142 <UartRxFunc>
    1cb4:	30 91 43 01 	lds	r19, 0x0143	; 0x800143 <UartRxFunc+0x1>
    1cb8:	89 81       	ldd	r24, Y+1	; 0x01
    1cba:	f9 01       	movw	r30, r18
    1cbc:	09 95       	icall
			// no space in buffer
			// count overflow
			uartRxOverflow++;
		}
	}
}
    1cbe:	10 c0       	rjmp	.+32     	; 0x1ce0 <__vector_13+0x74>
	else
	{
		// otherwise do default processing
		// put received char in buffer
		// check if there's space
		if( !bufferAddToEnd(&uartRxBuffer, c) )
    1cc0:	69 81       	ldd	r22, Y+1	; 0x01
    1cc2:	80 e9       	ldi	r24, 0x90	; 144
    1cc4:	91 e0       	ldi	r25, 0x01	; 1
    1cc6:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <bufferAddToEnd>
    1cca:	88 23       	and	r24, r24
    1ccc:	49 f4       	brne	.+18     	; 0x1ce0 <__vector_13+0x74>
		{
			// no space in buffer
			// count overflow
			uartRxOverflow++;
    1cce:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <uartRxOverflow>
    1cd2:	90 91 a2 01 	lds	r25, 0x01A2	; 0x8001a2 <uartRxOverflow+0x1>
    1cd6:	01 96       	adiw	r24, 0x01	; 1
    1cd8:	90 93 a2 01 	sts	0x01A2, r25	; 0x8001a2 <uartRxOverflow+0x1>
    1cdc:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <uartRxOverflow>
		}
	}
}
    1ce0:	00 00       	nop
    1ce2:	0f 90       	pop	r0
    1ce4:	df 91       	pop	r29
    1ce6:	cf 91       	pop	r28
    1ce8:	ff 91       	pop	r31
    1cea:	ef 91       	pop	r30
    1cec:	bf 91       	pop	r27
    1cee:	af 91       	pop	r26
    1cf0:	9f 91       	pop	r25
    1cf2:	8f 91       	pop	r24
    1cf4:	7f 91       	pop	r23
    1cf6:	6f 91       	pop	r22
    1cf8:	5f 91       	pop	r21
    1cfa:	4f 91       	pop	r20
    1cfc:	3f 91       	pop	r19
    1cfe:	2f 91       	pop	r18
    1d00:	0f 90       	pop	r0
    1d02:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1d06:	0f 90       	pop	r0
    1d08:	1f 90       	pop	r1
    1d0a:	18 95       	reti

00001d0c <USART_PutChar>:
}
//-------------------------------------
// Send sgngle char 
//-------------------------------------
void USART_PutChar(unsigned char data)
{
    1d0c:	cf 93       	push	r28
    1d0e:	df 93       	push	r29
    1d10:	1f 92       	push	r1
    1d12:	cd b7       	in	r28, 0x3d	; 61
    1d14:	de b7       	in	r29, 0x3e	; 62
    1d16:	89 83       	std	Y+1, r24	; 0x01
while (!(UCSRA & (1 << UDRE)));
    1d18:	00 00       	nop
    1d1a:	8b e2       	ldi	r24, 0x2B	; 43
    1d1c:	90 e0       	ldi	r25, 0x00	; 0
    1d1e:	fc 01       	movw	r30, r24
    1d20:	80 81       	ld	r24, Z
    1d22:	88 2f       	mov	r24, r24
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	80 72       	andi	r24, 0x20	; 32
    1d28:	99 27       	eor	r25, r25
    1d2a:	89 2b       	or	r24, r25
    1d2c:	b1 f3       	breq	.-20     	; 0x1d1a <USART_PutChar+0xe>
UDR = data;
    1d2e:	8c e2       	ldi	r24, 0x2C	; 44
    1d30:	90 e0       	ldi	r25, 0x00	; 0
    1d32:	29 81       	ldd	r18, Y+1	; 0x01
    1d34:	fc 01       	movw	r30, r24
    1d36:	20 83       	st	Z, r18
}
    1d38:	00 00       	nop
    1d3a:	0f 90       	pop	r0
    1d3c:	df 91       	pop	r29
    1d3e:	cf 91       	pop	r28
    1d40:	08 95       	ret

00001d42 <USART_GetChar>:
//-------------------------------------
// Receive single char
//-------------------------------------
unsigned char USART_GetChar(void)
{
    1d42:	cf 93       	push	r28
    1d44:	df 93       	push	r29
    1d46:	cd b7       	in	r28, 0x3d	; 61
    1d48:	de b7       	in	r29, 0x3e	; 62
while (!(UCSRA & (1 << RXC)));
    1d4a:	00 00       	nop
    1d4c:	8b e2       	ldi	r24, 0x2B	; 43
    1d4e:	90 e0       	ldi	r25, 0x00	; 0
    1d50:	fc 01       	movw	r30, r24
    1d52:	80 81       	ld	r24, Z
    1d54:	88 23       	and	r24, r24
    1d56:	d4 f7       	brge	.-12     	; 0x1d4c <USART_GetChar+0xa>
return UDR;
    1d58:	8c e2       	ldi	r24, 0x2C	; 44
    1d5a:	90 e0       	ldi	r25, 0x00	; 0
    1d5c:	fc 01       	movw	r30, r24
    1d5e:	80 81       	ld	r24, Z
}
    1d60:	df 91       	pop	r29
    1d62:	cf 91       	pop	r28
    1d64:	08 95       	ret

00001d66 <USART_PutString>:
//-------------------------------------
// Send string
//-------------------------------------
void USART_PutString(char * s)
{
    1d66:	cf 93       	push	r28
    1d68:	df 93       	push	r29
    1d6a:	00 d0       	rcall	.+0      	; 0x1d6c <USART_PutString+0x6>
    1d6c:	cd b7       	in	r28, 0x3d	; 61
    1d6e:	de b7       	in	r29, 0x3e	; 62
    1d70:	9a 83       	std	Y+2, r25	; 0x02
    1d72:	89 83       	std	Y+1, r24	; 0x01
while(*s)
    1d74:	0b c0       	rjmp	.+22     	; 0x1d8c <USART_PutString+0x26>
	USART_PutChar(*s++);
    1d76:	89 81       	ldd	r24, Y+1	; 0x01
    1d78:	9a 81       	ldd	r25, Y+2	; 0x02
    1d7a:	9c 01       	movw	r18, r24
    1d7c:	2f 5f       	subi	r18, 0xFF	; 255
    1d7e:	3f 4f       	sbci	r19, 0xFF	; 255
    1d80:	3a 83       	std	Y+2, r19	; 0x02
    1d82:	29 83       	std	Y+1, r18	; 0x01
    1d84:	fc 01       	movw	r30, r24
    1d86:	80 81       	ld	r24, Z
    1d88:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <USART_PutChar>
//-------------------------------------
// Send string
//-------------------------------------
void USART_PutString(char * s)
{
while(*s)
    1d8c:	89 81       	ldd	r24, Y+1	; 0x01
    1d8e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d90:	fc 01       	movw	r30, r24
    1d92:	80 81       	ld	r24, Z
    1d94:	88 23       	and	r24, r24
    1d96:	79 f7       	brne	.-34     	; 0x1d76 <USART_PutString+0x10>
	USART_PutChar(*s++);
}
    1d98:	00 00       	nop
    1d9a:	0f 90       	pop	r0
    1d9c:	0f 90       	pop	r0
    1d9e:	df 91       	pop	r29
    1da0:	cf 91       	pop	r28
    1da2:	08 95       	ret

00001da4 <USART_GetString>:
//-------------------------------------
// Receive string
//-------------------------------------
void USART_GetString(char * s)
{
    1da4:	cf 93       	push	r28
    1da6:	df 93       	push	r29
    1da8:	00 d0       	rcall	.+0      	; 0x1daa <USART_GetString+0x6>
    1daa:	1f 92       	push	r1
    1dac:	cd b7       	in	r28, 0x3d	; 61
    1dae:	de b7       	in	r29, 0x3e	; 62
    1db0:	9b 83       	std	Y+3, r25	; 0x03
    1db2:	8a 83       	std	Y+2, r24	; 0x02
char ch;

do{
  ch = USART_GetChar();
    1db4:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <USART_GetChar>
    1db8:	89 83       	std	Y+1, r24	; 0x01
  //USART_PutChar(ch);
  *s++ = ch;
    1dba:	8a 81       	ldd	r24, Y+2	; 0x02
    1dbc:	9b 81       	ldd	r25, Y+3	; 0x03
    1dbe:	9c 01       	movw	r18, r24
    1dc0:	2f 5f       	subi	r18, 0xFF	; 255
    1dc2:	3f 4f       	sbci	r19, 0xFF	; 255
    1dc4:	3b 83       	std	Y+3, r19	; 0x03
    1dc6:	2a 83       	std	Y+2, r18	; 0x02
    1dc8:	29 81       	ldd	r18, Y+1	; 0x01
    1dca:	fc 01       	movw	r30, r24
    1dcc:	20 83       	st	Z, r18
  if(ch == 0x0D) *s = 0;
    1dce:	89 81       	ldd	r24, Y+1	; 0x01
    1dd0:	8d 30       	cpi	r24, 0x0D	; 13
    1dd2:	21 f4       	brne	.+8      	; 0x1ddc <USART_GetString+0x38>
    1dd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd6:	9b 81       	ldd	r25, Y+3	; 0x03
    1dd8:	fc 01       	movw	r30, r24
    1dda:	10 82       	st	Z, r1
}while(ch != 0x0D);
    1ddc:	89 81       	ldd	r24, Y+1	; 0x01
    1dde:	8d 30       	cpi	r24, 0x0D	; 13
    1de0:	49 f7       	brne	.-46     	; 0x1db4 <USART_GetString+0x10>
}
    1de2:	00 00       	nop
    1de4:	0f 90       	pop	r0
    1de6:	0f 90       	pop	r0
    1de8:	0f 90       	pop	r0
    1dea:	df 91       	pop	r29
    1dec:	cf 91       	pop	r28
    1dee:	08 95       	ret

00001df0 <__cmpsf2>:
    1df0:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <__fp_cmp>
    1df4:	08 f4       	brcc	.+2      	; 0x1df8 <__cmpsf2+0x8>
    1df6:	81 e0       	ldi	r24, 0x01	; 1
    1df8:	08 95       	ret

00001dfa <__divsf3>:
    1dfa:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <__divsf3x>
    1dfe:	0c 94 1d 10 	jmp	0x203a	; 0x203a <__fp_round>
    1e02:	0e 94 16 10 	call	0x202c	; 0x202c <__fp_pscB>
    1e06:	58 f0       	brcs	.+22     	; 0x1e1e <__divsf3+0x24>
    1e08:	0e 94 0f 10 	call	0x201e	; 0x201e <__fp_pscA>
    1e0c:	40 f0       	brcs	.+16     	; 0x1e1e <__divsf3+0x24>
    1e0e:	29 f4       	brne	.+10     	; 0x1e1a <__divsf3+0x20>
    1e10:	5f 3f       	cpi	r21, 0xFF	; 255
    1e12:	29 f0       	breq	.+10     	; 0x1e1e <__divsf3+0x24>
    1e14:	0c 94 06 10 	jmp	0x200c	; 0x200c <__fp_inf>
    1e18:	51 11       	cpse	r21, r1
    1e1a:	0c 94 51 10 	jmp	0x20a2	; 0x20a2 <__fp_szero>
    1e1e:	0c 94 0c 10 	jmp	0x2018	; 0x2018 <__fp_nan>

00001e22 <__divsf3x>:
    1e22:	0e 94 2e 10 	call	0x205c	; 0x205c <__fp_split3>
    1e26:	68 f3       	brcs	.-38     	; 0x1e02 <__divsf3+0x8>

00001e28 <__divsf3_pse>:
    1e28:	99 23       	and	r25, r25
    1e2a:	b1 f3       	breq	.-20     	; 0x1e18 <__divsf3+0x1e>
    1e2c:	55 23       	and	r21, r21
    1e2e:	91 f3       	breq	.-28     	; 0x1e14 <__divsf3+0x1a>
    1e30:	95 1b       	sub	r25, r21
    1e32:	55 0b       	sbc	r21, r21
    1e34:	bb 27       	eor	r27, r27
    1e36:	aa 27       	eor	r26, r26
    1e38:	62 17       	cp	r22, r18
    1e3a:	73 07       	cpc	r23, r19
    1e3c:	84 07       	cpc	r24, r20
    1e3e:	38 f0       	brcs	.+14     	; 0x1e4e <__divsf3_pse+0x26>
    1e40:	9f 5f       	subi	r25, 0xFF	; 255
    1e42:	5f 4f       	sbci	r21, 0xFF	; 255
    1e44:	22 0f       	add	r18, r18
    1e46:	33 1f       	adc	r19, r19
    1e48:	44 1f       	adc	r20, r20
    1e4a:	aa 1f       	adc	r26, r26
    1e4c:	a9 f3       	breq	.-22     	; 0x1e38 <__divsf3_pse+0x10>
    1e4e:	35 d0       	rcall	.+106    	; 0x1eba <__divsf3_pse+0x92>
    1e50:	0e 2e       	mov	r0, r30
    1e52:	3a f0       	brmi	.+14     	; 0x1e62 <__divsf3_pse+0x3a>
    1e54:	e0 e8       	ldi	r30, 0x80	; 128
    1e56:	32 d0       	rcall	.+100    	; 0x1ebc <__divsf3_pse+0x94>
    1e58:	91 50       	subi	r25, 0x01	; 1
    1e5a:	50 40       	sbci	r21, 0x00	; 0
    1e5c:	e6 95       	lsr	r30
    1e5e:	00 1c       	adc	r0, r0
    1e60:	ca f7       	brpl	.-14     	; 0x1e54 <__divsf3_pse+0x2c>
    1e62:	2b d0       	rcall	.+86     	; 0x1eba <__divsf3_pse+0x92>
    1e64:	fe 2f       	mov	r31, r30
    1e66:	29 d0       	rcall	.+82     	; 0x1eba <__divsf3_pse+0x92>
    1e68:	66 0f       	add	r22, r22
    1e6a:	77 1f       	adc	r23, r23
    1e6c:	88 1f       	adc	r24, r24
    1e6e:	bb 1f       	adc	r27, r27
    1e70:	26 17       	cp	r18, r22
    1e72:	37 07       	cpc	r19, r23
    1e74:	48 07       	cpc	r20, r24
    1e76:	ab 07       	cpc	r26, r27
    1e78:	b0 e8       	ldi	r27, 0x80	; 128
    1e7a:	09 f0       	breq	.+2      	; 0x1e7e <__divsf3_pse+0x56>
    1e7c:	bb 0b       	sbc	r27, r27
    1e7e:	80 2d       	mov	r24, r0
    1e80:	bf 01       	movw	r22, r30
    1e82:	ff 27       	eor	r31, r31
    1e84:	93 58       	subi	r25, 0x83	; 131
    1e86:	5f 4f       	sbci	r21, 0xFF	; 255
    1e88:	3a f0       	brmi	.+14     	; 0x1e98 <__divsf3_pse+0x70>
    1e8a:	9e 3f       	cpi	r25, 0xFE	; 254
    1e8c:	51 05       	cpc	r21, r1
    1e8e:	78 f0       	brcs	.+30     	; 0x1eae <__divsf3_pse+0x86>
    1e90:	0c 94 06 10 	jmp	0x200c	; 0x200c <__fp_inf>
    1e94:	0c 94 51 10 	jmp	0x20a2	; 0x20a2 <__fp_szero>
    1e98:	5f 3f       	cpi	r21, 0xFF	; 255
    1e9a:	e4 f3       	brlt	.-8      	; 0x1e94 <__divsf3_pse+0x6c>
    1e9c:	98 3e       	cpi	r25, 0xE8	; 232
    1e9e:	d4 f3       	brlt	.-12     	; 0x1e94 <__divsf3_pse+0x6c>
    1ea0:	86 95       	lsr	r24
    1ea2:	77 95       	ror	r23
    1ea4:	67 95       	ror	r22
    1ea6:	b7 95       	ror	r27
    1ea8:	f7 95       	ror	r31
    1eaa:	9f 5f       	subi	r25, 0xFF	; 255
    1eac:	c9 f7       	brne	.-14     	; 0x1ea0 <__divsf3_pse+0x78>
    1eae:	88 0f       	add	r24, r24
    1eb0:	91 1d       	adc	r25, r1
    1eb2:	96 95       	lsr	r25
    1eb4:	87 95       	ror	r24
    1eb6:	97 f9       	bld	r25, 7
    1eb8:	08 95       	ret
    1eba:	e1 e0       	ldi	r30, 0x01	; 1
    1ebc:	66 0f       	add	r22, r22
    1ebe:	77 1f       	adc	r23, r23
    1ec0:	88 1f       	adc	r24, r24
    1ec2:	bb 1f       	adc	r27, r27
    1ec4:	62 17       	cp	r22, r18
    1ec6:	73 07       	cpc	r23, r19
    1ec8:	84 07       	cpc	r24, r20
    1eca:	ba 07       	cpc	r27, r26
    1ecc:	20 f0       	brcs	.+8      	; 0x1ed6 <__divsf3_pse+0xae>
    1ece:	62 1b       	sub	r22, r18
    1ed0:	73 0b       	sbc	r23, r19
    1ed2:	84 0b       	sbc	r24, r20
    1ed4:	ba 0b       	sbc	r27, r26
    1ed6:	ee 1f       	adc	r30, r30
    1ed8:	88 f7       	brcc	.-30     	; 0x1ebc <__divsf3_pse+0x94>
    1eda:	e0 95       	com	r30
    1edc:	08 95       	ret

00001ede <__fixsfsi>:
    1ede:	0e 94 76 0f 	call	0x1eec	; 0x1eec <__fixunssfsi>
    1ee2:	68 94       	set
    1ee4:	b1 11       	cpse	r27, r1
    1ee6:	0c 94 51 10 	jmp	0x20a2	; 0x20a2 <__fp_szero>
    1eea:	08 95       	ret

00001eec <__fixunssfsi>:
    1eec:	0e 94 36 10 	call	0x206c	; 0x206c <__fp_splitA>
    1ef0:	88 f0       	brcs	.+34     	; 0x1f14 <__fixunssfsi+0x28>
    1ef2:	9f 57       	subi	r25, 0x7F	; 127
    1ef4:	98 f0       	brcs	.+38     	; 0x1f1c <__fixunssfsi+0x30>
    1ef6:	b9 2f       	mov	r27, r25
    1ef8:	99 27       	eor	r25, r25
    1efa:	b7 51       	subi	r27, 0x17	; 23
    1efc:	b0 f0       	brcs	.+44     	; 0x1f2a <__fixunssfsi+0x3e>
    1efe:	e1 f0       	breq	.+56     	; 0x1f38 <__fixunssfsi+0x4c>
    1f00:	66 0f       	add	r22, r22
    1f02:	77 1f       	adc	r23, r23
    1f04:	88 1f       	adc	r24, r24
    1f06:	99 1f       	adc	r25, r25
    1f08:	1a f0       	brmi	.+6      	; 0x1f10 <__fixunssfsi+0x24>
    1f0a:	ba 95       	dec	r27
    1f0c:	c9 f7       	brne	.-14     	; 0x1f00 <__fixunssfsi+0x14>
    1f0e:	14 c0       	rjmp	.+40     	; 0x1f38 <__fixunssfsi+0x4c>
    1f10:	b1 30       	cpi	r27, 0x01	; 1
    1f12:	91 f0       	breq	.+36     	; 0x1f38 <__fixunssfsi+0x4c>
    1f14:	0e 94 50 10 	call	0x20a0	; 0x20a0 <__fp_zero>
    1f18:	b1 e0       	ldi	r27, 0x01	; 1
    1f1a:	08 95       	ret
    1f1c:	0c 94 50 10 	jmp	0x20a0	; 0x20a0 <__fp_zero>
    1f20:	67 2f       	mov	r22, r23
    1f22:	78 2f       	mov	r23, r24
    1f24:	88 27       	eor	r24, r24
    1f26:	b8 5f       	subi	r27, 0xF8	; 248
    1f28:	39 f0       	breq	.+14     	; 0x1f38 <__fixunssfsi+0x4c>
    1f2a:	b9 3f       	cpi	r27, 0xF9	; 249
    1f2c:	cc f3       	brlt	.-14     	; 0x1f20 <__fixunssfsi+0x34>
    1f2e:	86 95       	lsr	r24
    1f30:	77 95       	ror	r23
    1f32:	67 95       	ror	r22
    1f34:	b3 95       	inc	r27
    1f36:	d9 f7       	brne	.-10     	; 0x1f2e <__fixunssfsi+0x42>
    1f38:	3e f4       	brtc	.+14     	; 0x1f48 <__fixunssfsi+0x5c>
    1f3a:	90 95       	com	r25
    1f3c:	80 95       	com	r24
    1f3e:	70 95       	com	r23
    1f40:	61 95       	neg	r22
    1f42:	7f 4f       	sbci	r23, 0xFF	; 255
    1f44:	8f 4f       	sbci	r24, 0xFF	; 255
    1f46:	9f 4f       	sbci	r25, 0xFF	; 255
    1f48:	08 95       	ret

00001f4a <__floatunsisf>:
    1f4a:	e8 94       	clt
    1f4c:	09 c0       	rjmp	.+18     	; 0x1f60 <__floatsisf+0x12>

00001f4e <__floatsisf>:
    1f4e:	97 fb       	bst	r25, 7
    1f50:	3e f4       	brtc	.+14     	; 0x1f60 <__floatsisf+0x12>
    1f52:	90 95       	com	r25
    1f54:	80 95       	com	r24
    1f56:	70 95       	com	r23
    1f58:	61 95       	neg	r22
    1f5a:	7f 4f       	sbci	r23, 0xFF	; 255
    1f5c:	8f 4f       	sbci	r24, 0xFF	; 255
    1f5e:	9f 4f       	sbci	r25, 0xFF	; 255
    1f60:	99 23       	and	r25, r25
    1f62:	a9 f0       	breq	.+42     	; 0x1f8e <__floatsisf+0x40>
    1f64:	f9 2f       	mov	r31, r25
    1f66:	96 e9       	ldi	r25, 0x96	; 150
    1f68:	bb 27       	eor	r27, r27
    1f6a:	93 95       	inc	r25
    1f6c:	f6 95       	lsr	r31
    1f6e:	87 95       	ror	r24
    1f70:	77 95       	ror	r23
    1f72:	67 95       	ror	r22
    1f74:	b7 95       	ror	r27
    1f76:	f1 11       	cpse	r31, r1
    1f78:	f8 cf       	rjmp	.-16     	; 0x1f6a <__floatsisf+0x1c>
    1f7a:	fa f4       	brpl	.+62     	; 0x1fba <__floatsisf+0x6c>
    1f7c:	bb 0f       	add	r27, r27
    1f7e:	11 f4       	brne	.+4      	; 0x1f84 <__floatsisf+0x36>
    1f80:	60 ff       	sbrs	r22, 0
    1f82:	1b c0       	rjmp	.+54     	; 0x1fba <__floatsisf+0x6c>
    1f84:	6f 5f       	subi	r22, 0xFF	; 255
    1f86:	7f 4f       	sbci	r23, 0xFF	; 255
    1f88:	8f 4f       	sbci	r24, 0xFF	; 255
    1f8a:	9f 4f       	sbci	r25, 0xFF	; 255
    1f8c:	16 c0       	rjmp	.+44     	; 0x1fba <__floatsisf+0x6c>
    1f8e:	88 23       	and	r24, r24
    1f90:	11 f0       	breq	.+4      	; 0x1f96 <__floatsisf+0x48>
    1f92:	96 e9       	ldi	r25, 0x96	; 150
    1f94:	11 c0       	rjmp	.+34     	; 0x1fb8 <__floatsisf+0x6a>
    1f96:	77 23       	and	r23, r23
    1f98:	21 f0       	breq	.+8      	; 0x1fa2 <__floatsisf+0x54>
    1f9a:	9e e8       	ldi	r25, 0x8E	; 142
    1f9c:	87 2f       	mov	r24, r23
    1f9e:	76 2f       	mov	r23, r22
    1fa0:	05 c0       	rjmp	.+10     	; 0x1fac <__floatsisf+0x5e>
    1fa2:	66 23       	and	r22, r22
    1fa4:	71 f0       	breq	.+28     	; 0x1fc2 <__floatsisf+0x74>
    1fa6:	96 e8       	ldi	r25, 0x86	; 134
    1fa8:	86 2f       	mov	r24, r22
    1faa:	70 e0       	ldi	r23, 0x00	; 0
    1fac:	60 e0       	ldi	r22, 0x00	; 0
    1fae:	2a f0       	brmi	.+10     	; 0x1fba <__floatsisf+0x6c>
    1fb0:	9a 95       	dec	r25
    1fb2:	66 0f       	add	r22, r22
    1fb4:	77 1f       	adc	r23, r23
    1fb6:	88 1f       	adc	r24, r24
    1fb8:	da f7       	brpl	.-10     	; 0x1fb0 <__floatsisf+0x62>
    1fba:	88 0f       	add	r24, r24
    1fbc:	96 95       	lsr	r25
    1fbe:	87 95       	ror	r24
    1fc0:	97 f9       	bld	r25, 7
    1fc2:	08 95       	ret

00001fc4 <__fp_cmp>:
    1fc4:	99 0f       	add	r25, r25
    1fc6:	00 08       	sbc	r0, r0
    1fc8:	55 0f       	add	r21, r21
    1fca:	aa 0b       	sbc	r26, r26
    1fcc:	e0 e8       	ldi	r30, 0x80	; 128
    1fce:	fe ef       	ldi	r31, 0xFE	; 254
    1fd0:	16 16       	cp	r1, r22
    1fd2:	17 06       	cpc	r1, r23
    1fd4:	e8 07       	cpc	r30, r24
    1fd6:	f9 07       	cpc	r31, r25
    1fd8:	c0 f0       	brcs	.+48     	; 0x200a <__fp_cmp+0x46>
    1fda:	12 16       	cp	r1, r18
    1fdc:	13 06       	cpc	r1, r19
    1fde:	e4 07       	cpc	r30, r20
    1fe0:	f5 07       	cpc	r31, r21
    1fe2:	98 f0       	brcs	.+38     	; 0x200a <__fp_cmp+0x46>
    1fe4:	62 1b       	sub	r22, r18
    1fe6:	73 0b       	sbc	r23, r19
    1fe8:	84 0b       	sbc	r24, r20
    1fea:	95 0b       	sbc	r25, r21
    1fec:	39 f4       	brne	.+14     	; 0x1ffc <__fp_cmp+0x38>
    1fee:	0a 26       	eor	r0, r26
    1ff0:	61 f0       	breq	.+24     	; 0x200a <__fp_cmp+0x46>
    1ff2:	23 2b       	or	r18, r19
    1ff4:	24 2b       	or	r18, r20
    1ff6:	25 2b       	or	r18, r21
    1ff8:	21 f4       	brne	.+8      	; 0x2002 <__fp_cmp+0x3e>
    1ffa:	08 95       	ret
    1ffc:	0a 26       	eor	r0, r26
    1ffe:	09 f4       	brne	.+2      	; 0x2002 <__fp_cmp+0x3e>
    2000:	a1 40       	sbci	r26, 0x01	; 1
    2002:	a6 95       	lsr	r26
    2004:	8f ef       	ldi	r24, 0xFF	; 255
    2006:	81 1d       	adc	r24, r1
    2008:	81 1d       	adc	r24, r1
    200a:	08 95       	ret

0000200c <__fp_inf>:
    200c:	97 f9       	bld	r25, 7
    200e:	9f 67       	ori	r25, 0x7F	; 127
    2010:	80 e8       	ldi	r24, 0x80	; 128
    2012:	70 e0       	ldi	r23, 0x00	; 0
    2014:	60 e0       	ldi	r22, 0x00	; 0
    2016:	08 95       	ret

00002018 <__fp_nan>:
    2018:	9f ef       	ldi	r25, 0xFF	; 255
    201a:	80 ec       	ldi	r24, 0xC0	; 192
    201c:	08 95       	ret

0000201e <__fp_pscA>:
    201e:	00 24       	eor	r0, r0
    2020:	0a 94       	dec	r0
    2022:	16 16       	cp	r1, r22
    2024:	17 06       	cpc	r1, r23
    2026:	18 06       	cpc	r1, r24
    2028:	09 06       	cpc	r0, r25
    202a:	08 95       	ret

0000202c <__fp_pscB>:
    202c:	00 24       	eor	r0, r0
    202e:	0a 94       	dec	r0
    2030:	12 16       	cp	r1, r18
    2032:	13 06       	cpc	r1, r19
    2034:	14 06       	cpc	r1, r20
    2036:	05 06       	cpc	r0, r21
    2038:	08 95       	ret

0000203a <__fp_round>:
    203a:	09 2e       	mov	r0, r25
    203c:	03 94       	inc	r0
    203e:	00 0c       	add	r0, r0
    2040:	11 f4       	brne	.+4      	; 0x2046 <__fp_round+0xc>
    2042:	88 23       	and	r24, r24
    2044:	52 f0       	brmi	.+20     	; 0x205a <__fp_round+0x20>
    2046:	bb 0f       	add	r27, r27
    2048:	40 f4       	brcc	.+16     	; 0x205a <__fp_round+0x20>
    204a:	bf 2b       	or	r27, r31
    204c:	11 f4       	brne	.+4      	; 0x2052 <__fp_round+0x18>
    204e:	60 ff       	sbrs	r22, 0
    2050:	04 c0       	rjmp	.+8      	; 0x205a <__fp_round+0x20>
    2052:	6f 5f       	subi	r22, 0xFF	; 255
    2054:	7f 4f       	sbci	r23, 0xFF	; 255
    2056:	8f 4f       	sbci	r24, 0xFF	; 255
    2058:	9f 4f       	sbci	r25, 0xFF	; 255
    205a:	08 95       	ret

0000205c <__fp_split3>:
    205c:	57 fd       	sbrc	r21, 7
    205e:	90 58       	subi	r25, 0x80	; 128
    2060:	44 0f       	add	r20, r20
    2062:	55 1f       	adc	r21, r21
    2064:	59 f0       	breq	.+22     	; 0x207c <__fp_splitA+0x10>
    2066:	5f 3f       	cpi	r21, 0xFF	; 255
    2068:	71 f0       	breq	.+28     	; 0x2086 <__fp_splitA+0x1a>
    206a:	47 95       	ror	r20

0000206c <__fp_splitA>:
    206c:	88 0f       	add	r24, r24
    206e:	97 fb       	bst	r25, 7
    2070:	99 1f       	adc	r25, r25
    2072:	61 f0       	breq	.+24     	; 0x208c <__fp_splitA+0x20>
    2074:	9f 3f       	cpi	r25, 0xFF	; 255
    2076:	79 f0       	breq	.+30     	; 0x2096 <__fp_splitA+0x2a>
    2078:	87 95       	ror	r24
    207a:	08 95       	ret
    207c:	12 16       	cp	r1, r18
    207e:	13 06       	cpc	r1, r19
    2080:	14 06       	cpc	r1, r20
    2082:	55 1f       	adc	r21, r21
    2084:	f2 cf       	rjmp	.-28     	; 0x206a <__fp_split3+0xe>
    2086:	46 95       	lsr	r20
    2088:	f1 df       	rcall	.-30     	; 0x206c <__fp_splitA>
    208a:	08 c0       	rjmp	.+16     	; 0x209c <__fp_splitA+0x30>
    208c:	16 16       	cp	r1, r22
    208e:	17 06       	cpc	r1, r23
    2090:	18 06       	cpc	r1, r24
    2092:	99 1f       	adc	r25, r25
    2094:	f1 cf       	rjmp	.-30     	; 0x2078 <__fp_splitA+0xc>
    2096:	86 95       	lsr	r24
    2098:	71 05       	cpc	r23, r1
    209a:	61 05       	cpc	r22, r1
    209c:	08 94       	sec
    209e:	08 95       	ret

000020a0 <__fp_zero>:
    20a0:	e8 94       	clt

000020a2 <__fp_szero>:
    20a2:	bb 27       	eor	r27, r27
    20a4:	66 27       	eor	r22, r22
    20a6:	77 27       	eor	r23, r23
    20a8:	cb 01       	movw	r24, r22
    20aa:	97 f9       	bld	r25, 7
    20ac:	08 95       	ret

000020ae <__gesf2>:
    20ae:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <__fp_cmp>
    20b2:	08 f4       	brcc	.+2      	; 0x20b6 <__gesf2+0x8>
    20b4:	8f ef       	ldi	r24, 0xFF	; 255
    20b6:	08 95       	ret

000020b8 <__mulsf3>:
    20b8:	0e 94 6f 10 	call	0x20de	; 0x20de <__mulsf3x>
    20bc:	0c 94 1d 10 	jmp	0x203a	; 0x203a <__fp_round>
    20c0:	0e 94 0f 10 	call	0x201e	; 0x201e <__fp_pscA>
    20c4:	38 f0       	brcs	.+14     	; 0x20d4 <__mulsf3+0x1c>
    20c6:	0e 94 16 10 	call	0x202c	; 0x202c <__fp_pscB>
    20ca:	20 f0       	brcs	.+8      	; 0x20d4 <__mulsf3+0x1c>
    20cc:	95 23       	and	r25, r21
    20ce:	11 f0       	breq	.+4      	; 0x20d4 <__mulsf3+0x1c>
    20d0:	0c 94 06 10 	jmp	0x200c	; 0x200c <__fp_inf>
    20d4:	0c 94 0c 10 	jmp	0x2018	; 0x2018 <__fp_nan>
    20d8:	11 24       	eor	r1, r1
    20da:	0c 94 51 10 	jmp	0x20a2	; 0x20a2 <__fp_szero>

000020de <__mulsf3x>:
    20de:	0e 94 2e 10 	call	0x205c	; 0x205c <__fp_split3>
    20e2:	70 f3       	brcs	.-36     	; 0x20c0 <__mulsf3+0x8>

000020e4 <__mulsf3_pse>:
    20e4:	95 9f       	mul	r25, r21
    20e6:	c1 f3       	breq	.-16     	; 0x20d8 <__mulsf3+0x20>
    20e8:	95 0f       	add	r25, r21
    20ea:	50 e0       	ldi	r21, 0x00	; 0
    20ec:	55 1f       	adc	r21, r21
    20ee:	62 9f       	mul	r22, r18
    20f0:	f0 01       	movw	r30, r0
    20f2:	72 9f       	mul	r23, r18
    20f4:	bb 27       	eor	r27, r27
    20f6:	f0 0d       	add	r31, r0
    20f8:	b1 1d       	adc	r27, r1
    20fa:	63 9f       	mul	r22, r19
    20fc:	aa 27       	eor	r26, r26
    20fe:	f0 0d       	add	r31, r0
    2100:	b1 1d       	adc	r27, r1
    2102:	aa 1f       	adc	r26, r26
    2104:	64 9f       	mul	r22, r20
    2106:	66 27       	eor	r22, r22
    2108:	b0 0d       	add	r27, r0
    210a:	a1 1d       	adc	r26, r1
    210c:	66 1f       	adc	r22, r22
    210e:	82 9f       	mul	r24, r18
    2110:	22 27       	eor	r18, r18
    2112:	b0 0d       	add	r27, r0
    2114:	a1 1d       	adc	r26, r1
    2116:	62 1f       	adc	r22, r18
    2118:	73 9f       	mul	r23, r19
    211a:	b0 0d       	add	r27, r0
    211c:	a1 1d       	adc	r26, r1
    211e:	62 1f       	adc	r22, r18
    2120:	83 9f       	mul	r24, r19
    2122:	a0 0d       	add	r26, r0
    2124:	61 1d       	adc	r22, r1
    2126:	22 1f       	adc	r18, r18
    2128:	74 9f       	mul	r23, r20
    212a:	33 27       	eor	r19, r19
    212c:	a0 0d       	add	r26, r0
    212e:	61 1d       	adc	r22, r1
    2130:	23 1f       	adc	r18, r19
    2132:	84 9f       	mul	r24, r20
    2134:	60 0d       	add	r22, r0
    2136:	21 1d       	adc	r18, r1
    2138:	82 2f       	mov	r24, r18
    213a:	76 2f       	mov	r23, r22
    213c:	6a 2f       	mov	r22, r26
    213e:	11 24       	eor	r1, r1
    2140:	9f 57       	subi	r25, 0x7F	; 127
    2142:	50 40       	sbci	r21, 0x00	; 0
    2144:	9a f0       	brmi	.+38     	; 0x216c <__mulsf3_pse+0x88>
    2146:	f1 f0       	breq	.+60     	; 0x2184 <__mulsf3_pse+0xa0>
    2148:	88 23       	and	r24, r24
    214a:	4a f0       	brmi	.+18     	; 0x215e <__mulsf3_pse+0x7a>
    214c:	ee 0f       	add	r30, r30
    214e:	ff 1f       	adc	r31, r31
    2150:	bb 1f       	adc	r27, r27
    2152:	66 1f       	adc	r22, r22
    2154:	77 1f       	adc	r23, r23
    2156:	88 1f       	adc	r24, r24
    2158:	91 50       	subi	r25, 0x01	; 1
    215a:	50 40       	sbci	r21, 0x00	; 0
    215c:	a9 f7       	brne	.-22     	; 0x2148 <__mulsf3_pse+0x64>
    215e:	9e 3f       	cpi	r25, 0xFE	; 254
    2160:	51 05       	cpc	r21, r1
    2162:	80 f0       	brcs	.+32     	; 0x2184 <__mulsf3_pse+0xa0>
    2164:	0c 94 06 10 	jmp	0x200c	; 0x200c <__fp_inf>
    2168:	0c 94 51 10 	jmp	0x20a2	; 0x20a2 <__fp_szero>
    216c:	5f 3f       	cpi	r21, 0xFF	; 255
    216e:	e4 f3       	brlt	.-8      	; 0x2168 <__mulsf3_pse+0x84>
    2170:	98 3e       	cpi	r25, 0xE8	; 232
    2172:	d4 f3       	brlt	.-12     	; 0x2168 <__mulsf3_pse+0x84>
    2174:	86 95       	lsr	r24
    2176:	77 95       	ror	r23
    2178:	67 95       	ror	r22
    217a:	b7 95       	ror	r27
    217c:	f7 95       	ror	r31
    217e:	e7 95       	ror	r30
    2180:	9f 5f       	subi	r25, 0xFF	; 255
    2182:	c1 f7       	brne	.-16     	; 0x2174 <__mulsf3_pse+0x90>
    2184:	fe 2b       	or	r31, r30
    2186:	88 0f       	add	r24, r24
    2188:	91 1d       	adc	r25, r1
    218a:	96 95       	lsr	r25
    218c:	87 95       	ror	r24
    218e:	97 f9       	bld	r25, 7
    2190:	08 95       	ret

00002192 <__udivmodhi4>:
    2192:	aa 1b       	sub	r26, r26
    2194:	bb 1b       	sub	r27, r27
    2196:	51 e1       	ldi	r21, 0x11	; 17
    2198:	07 c0       	rjmp	.+14     	; 0x21a8 <__udivmodhi4_ep>

0000219a <__udivmodhi4_loop>:
    219a:	aa 1f       	adc	r26, r26
    219c:	bb 1f       	adc	r27, r27
    219e:	a6 17       	cp	r26, r22
    21a0:	b7 07       	cpc	r27, r23
    21a2:	10 f0       	brcs	.+4      	; 0x21a8 <__udivmodhi4_ep>
    21a4:	a6 1b       	sub	r26, r22
    21a6:	b7 0b       	sbc	r27, r23

000021a8 <__udivmodhi4_ep>:
    21a8:	88 1f       	adc	r24, r24
    21aa:	99 1f       	adc	r25, r25
    21ac:	5a 95       	dec	r21
    21ae:	a9 f7       	brne	.-22     	; 0x219a <__udivmodhi4_loop>
    21b0:	80 95       	com	r24
    21b2:	90 95       	com	r25
    21b4:	bc 01       	movw	r22, r24
    21b6:	cd 01       	movw	r24, r26
    21b8:	08 95       	ret

000021ba <__divmodhi4>:
    21ba:	97 fb       	bst	r25, 7
    21bc:	07 2e       	mov	r0, r23
    21be:	16 f4       	brtc	.+4      	; 0x21c4 <__divmodhi4+0xa>
    21c0:	00 94       	com	r0
    21c2:	07 d0       	rcall	.+14     	; 0x21d2 <__divmodhi4_neg1>
    21c4:	77 fd       	sbrc	r23, 7
    21c6:	09 d0       	rcall	.+18     	; 0x21da <__divmodhi4_neg2>
    21c8:	0e 94 c9 10 	call	0x2192	; 0x2192 <__udivmodhi4>
    21cc:	07 fc       	sbrc	r0, 7
    21ce:	05 d0       	rcall	.+10     	; 0x21da <__divmodhi4_neg2>
    21d0:	3e f4       	brtc	.+14     	; 0x21e0 <__divmodhi4_exit>

000021d2 <__divmodhi4_neg1>:
    21d2:	90 95       	com	r25
    21d4:	81 95       	neg	r24
    21d6:	9f 4f       	sbci	r25, 0xFF	; 255
    21d8:	08 95       	ret

000021da <__divmodhi4_neg2>:
    21da:	70 95       	com	r23
    21dc:	61 95       	neg	r22
    21de:	7f 4f       	sbci	r23, 0xFF	; 255

000021e0 <__divmodhi4_exit>:
    21e0:	08 95       	ret

000021e2 <__udivmodsi4>:
    21e2:	a1 e2       	ldi	r26, 0x21	; 33
    21e4:	1a 2e       	mov	r1, r26
    21e6:	aa 1b       	sub	r26, r26
    21e8:	bb 1b       	sub	r27, r27
    21ea:	fd 01       	movw	r30, r26
    21ec:	0d c0       	rjmp	.+26     	; 0x2208 <__udivmodsi4_ep>

000021ee <__udivmodsi4_loop>:
    21ee:	aa 1f       	adc	r26, r26
    21f0:	bb 1f       	adc	r27, r27
    21f2:	ee 1f       	adc	r30, r30
    21f4:	ff 1f       	adc	r31, r31
    21f6:	a2 17       	cp	r26, r18
    21f8:	b3 07       	cpc	r27, r19
    21fa:	e4 07       	cpc	r30, r20
    21fc:	f5 07       	cpc	r31, r21
    21fe:	20 f0       	brcs	.+8      	; 0x2208 <__udivmodsi4_ep>
    2200:	a2 1b       	sub	r26, r18
    2202:	b3 0b       	sbc	r27, r19
    2204:	e4 0b       	sbc	r30, r20
    2206:	f5 0b       	sbc	r31, r21

00002208 <__udivmodsi4_ep>:
    2208:	66 1f       	adc	r22, r22
    220a:	77 1f       	adc	r23, r23
    220c:	88 1f       	adc	r24, r24
    220e:	99 1f       	adc	r25, r25
    2210:	1a 94       	dec	r1
    2212:	69 f7       	brne	.-38     	; 0x21ee <__udivmodsi4_loop>
    2214:	60 95       	com	r22
    2216:	70 95       	com	r23
    2218:	80 95       	com	r24
    221a:	90 95       	com	r25
    221c:	9b 01       	movw	r18, r22
    221e:	ac 01       	movw	r20, r24
    2220:	bd 01       	movw	r22, r26
    2222:	cf 01       	movw	r24, r30
    2224:	08 95       	ret

00002226 <strcmp>:
    2226:	fb 01       	movw	r30, r22
    2228:	dc 01       	movw	r26, r24
    222a:	8d 91       	ld	r24, X+
    222c:	01 90       	ld	r0, Z+
    222e:	80 19       	sub	r24, r0
    2230:	01 10       	cpse	r0, r1
    2232:	d9 f3       	breq	.-10     	; 0x222a <strcmp+0x4>
    2234:	99 0b       	sbc	r25, r25
    2236:	08 95       	ret

00002238 <itoa>:
    2238:	45 32       	cpi	r20, 0x25	; 37
    223a:	51 05       	cpc	r21, r1
    223c:	20 f4       	brcc	.+8      	; 0x2246 <itoa+0xe>
    223e:	42 30       	cpi	r20, 0x02	; 2
    2240:	10 f0       	brcs	.+4      	; 0x2246 <itoa+0xe>
    2242:	0c 94 27 11 	jmp	0x224e	; 0x224e <__itoa_ncheck>
    2246:	fb 01       	movw	r30, r22
    2248:	10 82       	st	Z, r1
    224a:	cb 01       	movw	r24, r22
    224c:	08 95       	ret

0000224e <__itoa_ncheck>:
    224e:	bb 27       	eor	r27, r27
    2250:	4a 30       	cpi	r20, 0x0A	; 10
    2252:	31 f4       	brne	.+12     	; 0x2260 <__itoa_ncheck+0x12>
    2254:	99 23       	and	r25, r25
    2256:	22 f4       	brpl	.+8      	; 0x2260 <__itoa_ncheck+0x12>
    2258:	bd e2       	ldi	r27, 0x2D	; 45
    225a:	90 95       	com	r25
    225c:	81 95       	neg	r24
    225e:	9f 4f       	sbci	r25, 0xFF	; 255
    2260:	0c 94 33 11 	jmp	0x2266	; 0x2266 <__utoa_common>

00002264 <__utoa_ncheck>:
    2264:	bb 27       	eor	r27, r27

00002266 <__utoa_common>:
    2266:	fb 01       	movw	r30, r22
    2268:	55 27       	eor	r21, r21
    226a:	aa 27       	eor	r26, r26
    226c:	88 0f       	add	r24, r24
    226e:	99 1f       	adc	r25, r25
    2270:	aa 1f       	adc	r26, r26
    2272:	a4 17       	cp	r26, r20
    2274:	10 f0       	brcs	.+4      	; 0x227a <__utoa_common+0x14>
    2276:	a4 1b       	sub	r26, r20
    2278:	83 95       	inc	r24
    227a:	50 51       	subi	r21, 0x10	; 16
    227c:	b9 f7       	brne	.-18     	; 0x226c <__utoa_common+0x6>
    227e:	a0 5d       	subi	r26, 0xD0	; 208
    2280:	aa 33       	cpi	r26, 0x3A	; 58
    2282:	08 f0       	brcs	.+2      	; 0x2286 <__utoa_common+0x20>
    2284:	a9 5d       	subi	r26, 0xD9	; 217
    2286:	a1 93       	st	Z+, r26
    2288:	00 97       	sbiw	r24, 0x00	; 0
    228a:	79 f7       	brne	.-34     	; 0x226a <__utoa_common+0x4>
    228c:	b1 11       	cpse	r27, r1
    228e:	b1 93       	st	Z+, r27
    2290:	11 92       	st	Z+, r1
    2292:	cb 01       	movw	r24, r22
    2294:	0c 94 4c 11 	jmp	0x2298	; 0x2298 <strrev>

00002298 <strrev>:
    2298:	dc 01       	movw	r26, r24
    229a:	fc 01       	movw	r30, r24
    229c:	67 2f       	mov	r22, r23
    229e:	71 91       	ld	r23, Z+
    22a0:	77 23       	and	r23, r23
    22a2:	e1 f7       	brne	.-8      	; 0x229c <strrev+0x4>
    22a4:	32 97       	sbiw	r30, 0x02	; 2
    22a6:	04 c0       	rjmp	.+8      	; 0x22b0 <strrev+0x18>
    22a8:	7c 91       	ld	r23, X
    22aa:	6d 93       	st	X+, r22
    22ac:	70 83       	st	Z, r23
    22ae:	62 91       	ld	r22, -Z
    22b0:	ae 17       	cp	r26, r30
    22b2:	bf 07       	cpc	r27, r31
    22b4:	c8 f3       	brcs	.-14     	; 0x22a8 <strrev+0x10>
    22b6:	08 95       	ret

000022b8 <_exit>:
    22b8:	f8 94       	cli

000022ba <__stop_program>:
    22ba:	ff cf       	rjmp	.-2      	; 0x22ba <__stop_program>
