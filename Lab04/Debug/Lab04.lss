
Lab04.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002280  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000052  00800060  00002280  00002314  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000e7  008000b2  008000b2  00002366  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002366  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002398  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002c0  00000000  00000000  000023d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001dec  00000000  00000000  00002694  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cd9  00000000  00000000  00004480  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001b5c  00000000  00000000  00005159  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a8c  00000000  00000000  00006cb8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000acf  00000000  00000000  00007744  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000015ef  00000000  00000000  00008213  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002a8  00000000  00000000  00009802  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 0f 0c 	jmp	0x181e	; 0x181e <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 18 0e 	jmp	0x1c30	; 0x1c30 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 cd 0d 	jmp	0x1b9a	; 0x1b9a <__vector_15>
      40:	0c 94 51 0c 	jmp	0x18a2	; 0x18a2 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e8       	ldi	r30, 0x80	; 128
      68:	f2 e2       	ldi	r31, 0x22	; 34
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a2 3b       	cpi	r26, 0xB2	; 178
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	a2 eb       	ldi	r26, 0xB2	; 178
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 39       	cpi	r26, 0x99	; 153
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <main>
      8a:	0c 94 3e 11 	jmp	0x227c	; 0x227c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <bufferInit>:
	// return character at index in buffer
	unsigned char data = buffer->dataptr[(buffer->dataindex+index)%(buffer->size)];
	// end critical section
	CRITICAL_SECTION_END;
	return data;
}
      92:	cf 93       	push	r28
      94:	df 93       	push	r29
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
      9a:	27 97       	sbiw	r28, 0x07	; 7
      9c:	0f b6       	in	r0, 0x3f	; 63
      9e:	f8 94       	cli
      a0:	de bf       	out	0x3e, r29	; 62
      a2:	0f be       	out	0x3f, r0	; 63
      a4:	cd bf       	out	0x3d, r28	; 61
      a6:	9b 83       	std	Y+3, r25	; 0x03
      a8:	8a 83       	std	Y+2, r24	; 0x02
      aa:	7d 83       	std	Y+5, r23	; 0x05
      ac:	6c 83       	std	Y+4, r22	; 0x04
      ae:	5f 83       	std	Y+7, r21	; 0x07
      b0:	4e 83       	std	Y+6, r20	; 0x06
      b2:	8f e5       	ldi	r24, 0x5F	; 95
      b4:	90 e0       	ldi	r25, 0x00	; 0
      b6:	fc 01       	movw	r30, r24
      b8:	80 81       	ld	r24, Z
      ba:	89 83       	std	Y+1, r24	; 0x01
      bc:	f8 94       	cli
      be:	8a 81       	ldd	r24, Y+2	; 0x02
      c0:	9b 81       	ldd	r25, Y+3	; 0x03
      c2:	2c 81       	ldd	r18, Y+4	; 0x04
      c4:	3d 81       	ldd	r19, Y+5	; 0x05
      c6:	fc 01       	movw	r30, r24
      c8:	31 83       	std	Z+1, r19	; 0x01
      ca:	20 83       	st	Z, r18
      cc:	8a 81       	ldd	r24, Y+2	; 0x02
      ce:	9b 81       	ldd	r25, Y+3	; 0x03
      d0:	2e 81       	ldd	r18, Y+6	; 0x06
      d2:	3f 81       	ldd	r19, Y+7	; 0x07
      d4:	fc 01       	movw	r30, r24
      d6:	33 83       	std	Z+3, r19	; 0x03
      d8:	22 83       	std	Z+2, r18	; 0x02
      da:	8a 81       	ldd	r24, Y+2	; 0x02
      dc:	9b 81       	ldd	r25, Y+3	; 0x03
      de:	fc 01       	movw	r30, r24
      e0:	17 82       	std	Z+7, r1	; 0x07
      e2:	16 82       	std	Z+6, r1	; 0x06
      e4:	8a 81       	ldd	r24, Y+2	; 0x02
      e6:	9b 81       	ldd	r25, Y+3	; 0x03
      e8:	fc 01       	movw	r30, r24
      ea:	15 82       	std	Z+5, r1	; 0x05
      ec:	14 82       	std	Z+4, r1	; 0x04
      ee:	8f e5       	ldi	r24, 0x5F	; 95
      f0:	90 e0       	ldi	r25, 0x00	; 0
      f2:	29 81       	ldd	r18, Y+1	; 0x01
      f4:	fc 01       	movw	r30, r24
      f6:	20 83       	st	Z, r18
      f8:	00 00       	nop
      fa:	27 96       	adiw	r28, 0x07	; 7
      fc:	0f b6       	in	r0, 0x3f	; 63
      fe:	f8 94       	cli
     100:	de bf       	out	0x3e, r29	; 62
     102:	0f be       	out	0x3f, r0	; 63
     104:	cd bf       	out	0x3d, r28	; 61
     106:	df 91       	pop	r29
     108:	cf 91       	pop	r28
     10a:	08 95       	ret

0000010c <bufferGetFromFront>:
     10c:	cf 93       	push	r28
     10e:	df 93       	push	r29
     110:	00 d0       	rcall	.+0      	; 0x112 <bufferGetFromFront+0x6>
     112:	00 d0       	rcall	.+0      	; 0x114 <bufferGetFromFront+0x8>
     114:	cd b7       	in	r28, 0x3d	; 61
     116:	de b7       	in	r29, 0x3e	; 62
     118:	9c 83       	std	Y+4, r25	; 0x04
     11a:	8b 83       	std	Y+3, r24	; 0x03
     11c:	19 82       	std	Y+1, r1	; 0x01
     11e:	8f e5       	ldi	r24, 0x5F	; 95
     120:	90 e0       	ldi	r25, 0x00	; 0
     122:	fc 01       	movw	r30, r24
     124:	80 81       	ld	r24, Z
     126:	8a 83       	std	Y+2, r24	; 0x02
     128:	f8 94       	cli
     12a:	8b 81       	ldd	r24, Y+3	; 0x03
     12c:	9c 81       	ldd	r25, Y+4	; 0x04
     12e:	fc 01       	movw	r30, r24
     130:	84 81       	ldd	r24, Z+4	; 0x04
     132:	95 81       	ldd	r25, Z+5	; 0x05
     134:	89 2b       	or	r24, r25
     136:	09 f4       	brne	.+2      	; 0x13a <bufferGetFromFront+0x2e>
     138:	47 c0       	rjmp	.+142    	; 0x1c8 <bufferGetFromFront+0xbc>
     13a:	8b 81       	ldd	r24, Y+3	; 0x03
     13c:	9c 81       	ldd	r25, Y+4	; 0x04
     13e:	fc 01       	movw	r30, r24
     140:	20 81       	ld	r18, Z
     142:	31 81       	ldd	r19, Z+1	; 0x01
     144:	8b 81       	ldd	r24, Y+3	; 0x03
     146:	9c 81       	ldd	r25, Y+4	; 0x04
     148:	fc 01       	movw	r30, r24
     14a:	86 81       	ldd	r24, Z+6	; 0x06
     14c:	97 81       	ldd	r25, Z+7	; 0x07
     14e:	82 0f       	add	r24, r18
     150:	93 1f       	adc	r25, r19
     152:	fc 01       	movw	r30, r24
     154:	80 81       	ld	r24, Z
     156:	89 83       	std	Y+1, r24	; 0x01
     158:	8b 81       	ldd	r24, Y+3	; 0x03
     15a:	9c 81       	ldd	r25, Y+4	; 0x04
     15c:	fc 01       	movw	r30, r24
     15e:	86 81       	ldd	r24, Z+6	; 0x06
     160:	97 81       	ldd	r25, Z+7	; 0x07
     162:	9c 01       	movw	r18, r24
     164:	2f 5f       	subi	r18, 0xFF	; 255
     166:	3f 4f       	sbci	r19, 0xFF	; 255
     168:	8b 81       	ldd	r24, Y+3	; 0x03
     16a:	9c 81       	ldd	r25, Y+4	; 0x04
     16c:	fc 01       	movw	r30, r24
     16e:	37 83       	std	Z+7, r19	; 0x07
     170:	26 83       	std	Z+6, r18	; 0x06
     172:	8b 81       	ldd	r24, Y+3	; 0x03
     174:	9c 81       	ldd	r25, Y+4	; 0x04
     176:	fc 01       	movw	r30, r24
     178:	26 81       	ldd	r18, Z+6	; 0x06
     17a:	37 81       	ldd	r19, Z+7	; 0x07
     17c:	8b 81       	ldd	r24, Y+3	; 0x03
     17e:	9c 81       	ldd	r25, Y+4	; 0x04
     180:	fc 01       	movw	r30, r24
     182:	82 81       	ldd	r24, Z+2	; 0x02
     184:	93 81       	ldd	r25, Z+3	; 0x03
     186:	28 17       	cp	r18, r24
     188:	39 07       	cpc	r19, r25
     18a:	88 f0       	brcs	.+34     	; 0x1ae <bufferGetFromFront+0xa2>
     18c:	8b 81       	ldd	r24, Y+3	; 0x03
     18e:	9c 81       	ldd	r25, Y+4	; 0x04
     190:	fc 01       	movw	r30, r24
     192:	26 81       	ldd	r18, Z+6	; 0x06
     194:	37 81       	ldd	r19, Z+7	; 0x07
     196:	8b 81       	ldd	r24, Y+3	; 0x03
     198:	9c 81       	ldd	r25, Y+4	; 0x04
     19a:	fc 01       	movw	r30, r24
     19c:	82 81       	ldd	r24, Z+2	; 0x02
     19e:	93 81       	ldd	r25, Z+3	; 0x03
     1a0:	28 1b       	sub	r18, r24
     1a2:	39 0b       	sbc	r19, r25
     1a4:	8b 81       	ldd	r24, Y+3	; 0x03
     1a6:	9c 81       	ldd	r25, Y+4	; 0x04
     1a8:	fc 01       	movw	r30, r24
     1aa:	37 83       	std	Z+7, r19	; 0x07
     1ac:	26 83       	std	Z+6, r18	; 0x06
     1ae:	8b 81       	ldd	r24, Y+3	; 0x03
     1b0:	9c 81       	ldd	r25, Y+4	; 0x04
     1b2:	fc 01       	movw	r30, r24
     1b4:	84 81       	ldd	r24, Z+4	; 0x04
     1b6:	95 81       	ldd	r25, Z+5	; 0x05
     1b8:	9c 01       	movw	r18, r24
     1ba:	21 50       	subi	r18, 0x01	; 1
     1bc:	31 09       	sbc	r19, r1
     1be:	8b 81       	ldd	r24, Y+3	; 0x03
     1c0:	9c 81       	ldd	r25, Y+4	; 0x04
     1c2:	fc 01       	movw	r30, r24
     1c4:	35 83       	std	Z+5, r19	; 0x05
     1c6:	24 83       	std	Z+4, r18	; 0x04
     1c8:	8f e5       	ldi	r24, 0x5F	; 95
     1ca:	90 e0       	ldi	r25, 0x00	; 0
     1cc:	2a 81       	ldd	r18, Y+2	; 0x02
     1ce:	fc 01       	movw	r30, r24
     1d0:	20 83       	st	Z, r18
     1d2:	89 81       	ldd	r24, Y+1	; 0x01
     1d4:	0f 90       	pop	r0
     1d6:	0f 90       	pop	r0
     1d8:	0f 90       	pop	r0
     1da:	0f 90       	pop	r0
     1dc:	df 91       	pop	r29
     1de:	cf 91       	pop	r28
     1e0:	08 95       	ret

000001e2 <bufferAddToEnd>:

unsigned char bufferAddToEnd(cBuffer* buffer, unsigned char data)
{
     1e2:	cf 93       	push	r28
     1e4:	df 93       	push	r29
     1e6:	00 d0       	rcall	.+0      	; 0x1e8 <bufferAddToEnd+0x6>
     1e8:	00 d0       	rcall	.+0      	; 0x1ea <bufferAddToEnd+0x8>
     1ea:	cd b7       	in	r28, 0x3d	; 61
     1ec:	de b7       	in	r29, 0x3e	; 62
     1ee:	9b 83       	std	Y+3, r25	; 0x03
     1f0:	8a 83       	std	Y+2, r24	; 0x02
     1f2:	6c 83       	std	Y+4, r22	; 0x04
	// begin critical section
	CRITICAL_SECTION_START;
     1f4:	8f e5       	ldi	r24, 0x5F	; 95
     1f6:	90 e0       	ldi	r25, 0x00	; 0
     1f8:	fc 01       	movw	r30, r24
     1fa:	80 81       	ld	r24, Z
     1fc:	89 83       	std	Y+1, r24	; 0x01
     1fe:	f8 94       	cli
	// make sure the buffer has room
	if(buffer->datalength < buffer->size)
     200:	8a 81       	ldd	r24, Y+2	; 0x02
     202:	9b 81       	ldd	r25, Y+3	; 0x03
     204:	fc 01       	movw	r30, r24
     206:	24 81       	ldd	r18, Z+4	; 0x04
     208:	35 81       	ldd	r19, Z+5	; 0x05
     20a:	8a 81       	ldd	r24, Y+2	; 0x02
     20c:	9b 81       	ldd	r25, Y+3	; 0x03
     20e:	fc 01       	movw	r30, r24
     210:	82 81       	ldd	r24, Z+2	; 0x02
     212:	93 81       	ldd	r25, Z+3	; 0x03
     214:	28 17       	cp	r18, r24
     216:	39 07       	cpc	r19, r25
     218:	a0 f5       	brcc	.+104    	; 0x282 <bufferAddToEnd+0xa0>
	{
		// save data byte at end of buffer
		buffer->dataptr[(buffer->dataindex + buffer->datalength) % buffer->size] = data;
     21a:	8a 81       	ldd	r24, Y+2	; 0x02
     21c:	9b 81       	ldd	r25, Y+3	; 0x03
     21e:	fc 01       	movw	r30, r24
     220:	20 81       	ld	r18, Z
     222:	31 81       	ldd	r19, Z+1	; 0x01
     224:	8a 81       	ldd	r24, Y+2	; 0x02
     226:	9b 81       	ldd	r25, Y+3	; 0x03
     228:	fc 01       	movw	r30, r24
     22a:	46 81       	ldd	r20, Z+6	; 0x06
     22c:	57 81       	ldd	r21, Z+7	; 0x07
     22e:	8a 81       	ldd	r24, Y+2	; 0x02
     230:	9b 81       	ldd	r25, Y+3	; 0x03
     232:	fc 01       	movw	r30, r24
     234:	84 81       	ldd	r24, Z+4	; 0x04
     236:	95 81       	ldd	r25, Z+5	; 0x05
     238:	ba 01       	movw	r22, r20
     23a:	68 0f       	add	r22, r24
     23c:	79 1f       	adc	r23, r25
     23e:	8a 81       	ldd	r24, Y+2	; 0x02
     240:	9b 81       	ldd	r25, Y+3	; 0x03
     242:	fc 01       	movw	r30, r24
     244:	42 81       	ldd	r20, Z+2	; 0x02
     246:	53 81       	ldd	r21, Z+3	; 0x03
     248:	cb 01       	movw	r24, r22
     24a:	ba 01       	movw	r22, r20
     24c:	0e 94 ab 10 	call	0x2156	; 0x2156 <__udivmodhi4>
     250:	82 0f       	add	r24, r18
     252:	93 1f       	adc	r25, r19
     254:	2c 81       	ldd	r18, Y+4	; 0x04
     256:	fc 01       	movw	r30, r24
     258:	20 83       	st	Z, r18
		// increment the length
		buffer->datalength++;
     25a:	8a 81       	ldd	r24, Y+2	; 0x02
     25c:	9b 81       	ldd	r25, Y+3	; 0x03
     25e:	fc 01       	movw	r30, r24
     260:	84 81       	ldd	r24, Z+4	; 0x04
     262:	95 81       	ldd	r25, Z+5	; 0x05
     264:	9c 01       	movw	r18, r24
     266:	2f 5f       	subi	r18, 0xFF	; 255
     268:	3f 4f       	sbci	r19, 0xFF	; 255
     26a:	8a 81       	ldd	r24, Y+2	; 0x02
     26c:	9b 81       	ldd	r25, Y+3	; 0x03
     26e:	fc 01       	movw	r30, r24
     270:	35 83       	std	Z+5, r19	; 0x05
     272:	24 83       	std	Z+4, r18	; 0x04
		// end critical section
		CRITICAL_SECTION_END;
     274:	8f e5       	ldi	r24, 0x5F	; 95
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	29 81       	ldd	r18, Y+1	; 0x01
     27a:	fc 01       	movw	r30, r24
     27c:	20 83       	st	Z, r18
		// return success
		return -1;
     27e:	8f ef       	ldi	r24, 0xFF	; 255
     280:	06 c0       	rjmp	.+12     	; 0x28e <bufferAddToEnd+0xac>
	}
	// end critical section
	CRITICAL_SECTION_END;
     282:	8f e5       	ldi	r24, 0x5F	; 95
     284:	90 e0       	ldi	r25, 0x00	; 0
     286:	29 81       	ldd	r18, Y+1	; 0x01
     288:	fc 01       	movw	r30, r24
     28a:	20 83       	st	Z, r18
	// return failure
	return 0;
     28c:	80 e0       	ldi	r24, 0x00	; 0
}
     28e:	0f 90       	pop	r0
     290:	0f 90       	pop	r0
     292:	0f 90       	pop	r0
     294:	0f 90       	pop	r0
     296:	df 91       	pop	r29
     298:	cf 91       	pop	r28
     29a:	08 95       	ret

0000029c <_LCD_OutNibble>:
// Shift display right
//-------------------------------------
void LCD_ShiftRight(void)
{
LCD_WriteCommand(HD44780_DISPLAY_CURSOR_SHIFT | HD44780_SHIFT_RIGHT | HD44780_SHIFT_DISPLAY);
}
     29c:	cf 93       	push	r28
     29e:	df 93       	push	r29
     2a0:	1f 92       	push	r1
     2a2:	cd b7       	in	r28, 0x3d	; 61
     2a4:	de b7       	in	r29, 0x3e	; 62
     2a6:	89 83       	std	Y+1, r24	; 0x01
     2a8:	89 81       	ldd	r24, Y+1	; 0x01
     2aa:	88 2f       	mov	r24, r24
     2ac:	90 e0       	ldi	r25, 0x00	; 0
     2ae:	81 70       	andi	r24, 0x01	; 1
     2b0:	99 27       	eor	r25, r25
     2b2:	89 2b       	or	r24, r25
     2b4:	51 f0       	breq	.+20     	; 0x2ca <_LCD_OutNibble+0x2e>
     2b6:	8b e3       	ldi	r24, 0x3B	; 59
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	2b e3       	ldi	r18, 0x3B	; 59
     2bc:	30 e0       	ldi	r19, 0x00	; 0
     2be:	f9 01       	movw	r30, r18
     2c0:	20 81       	ld	r18, Z
     2c2:	24 60       	ori	r18, 0x04	; 4
     2c4:	fc 01       	movw	r30, r24
     2c6:	20 83       	st	Z, r18
     2c8:	09 c0       	rjmp	.+18     	; 0x2dc <_LCD_OutNibble+0x40>
     2ca:	8b e3       	ldi	r24, 0x3B	; 59
     2cc:	90 e0       	ldi	r25, 0x00	; 0
     2ce:	2b e3       	ldi	r18, 0x3B	; 59
     2d0:	30 e0       	ldi	r19, 0x00	; 0
     2d2:	f9 01       	movw	r30, r18
     2d4:	20 81       	ld	r18, Z
     2d6:	2b 7f       	andi	r18, 0xFB	; 251
     2d8:	fc 01       	movw	r30, r24
     2da:	20 83       	st	Z, r18
     2dc:	89 81       	ldd	r24, Y+1	; 0x01
     2de:	88 2f       	mov	r24, r24
     2e0:	90 e0       	ldi	r25, 0x00	; 0
     2e2:	82 70       	andi	r24, 0x02	; 2
     2e4:	99 27       	eor	r25, r25
     2e6:	89 2b       	or	r24, r25
     2e8:	51 f0       	breq	.+20     	; 0x2fe <_LCD_OutNibble+0x62>
     2ea:	8b e3       	ldi	r24, 0x3B	; 59
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	2b e3       	ldi	r18, 0x3B	; 59
     2f0:	30 e0       	ldi	r19, 0x00	; 0
     2f2:	f9 01       	movw	r30, r18
     2f4:	20 81       	ld	r18, Z
     2f6:	28 60       	ori	r18, 0x08	; 8
     2f8:	fc 01       	movw	r30, r24
     2fa:	20 83       	st	Z, r18
     2fc:	09 c0       	rjmp	.+18     	; 0x310 <_LCD_OutNibble+0x74>
     2fe:	8b e3       	ldi	r24, 0x3B	; 59
     300:	90 e0       	ldi	r25, 0x00	; 0
     302:	2b e3       	ldi	r18, 0x3B	; 59
     304:	30 e0       	ldi	r19, 0x00	; 0
     306:	f9 01       	movw	r30, r18
     308:	20 81       	ld	r18, Z
     30a:	27 7f       	andi	r18, 0xF7	; 247
     30c:	fc 01       	movw	r30, r24
     30e:	20 83       	st	Z, r18
     310:	89 81       	ldd	r24, Y+1	; 0x01
     312:	88 2f       	mov	r24, r24
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	84 70       	andi	r24, 0x04	; 4
     318:	99 27       	eor	r25, r25
     31a:	89 2b       	or	r24, r25
     31c:	51 f0       	breq	.+20     	; 0x332 <_LCD_OutNibble+0x96>
     31e:	8b e3       	ldi	r24, 0x3B	; 59
     320:	90 e0       	ldi	r25, 0x00	; 0
     322:	2b e3       	ldi	r18, 0x3B	; 59
     324:	30 e0       	ldi	r19, 0x00	; 0
     326:	f9 01       	movw	r30, r18
     328:	20 81       	ld	r18, Z
     32a:	20 61       	ori	r18, 0x10	; 16
     32c:	fc 01       	movw	r30, r24
     32e:	20 83       	st	Z, r18
     330:	09 c0       	rjmp	.+18     	; 0x344 <_LCD_OutNibble+0xa8>
     332:	8b e3       	ldi	r24, 0x3B	; 59
     334:	90 e0       	ldi	r25, 0x00	; 0
     336:	2b e3       	ldi	r18, 0x3B	; 59
     338:	30 e0       	ldi	r19, 0x00	; 0
     33a:	f9 01       	movw	r30, r18
     33c:	20 81       	ld	r18, Z
     33e:	2f 7e       	andi	r18, 0xEF	; 239
     340:	fc 01       	movw	r30, r24
     342:	20 83       	st	Z, r18
     344:	89 81       	ldd	r24, Y+1	; 0x01
     346:	88 2f       	mov	r24, r24
     348:	90 e0       	ldi	r25, 0x00	; 0
     34a:	88 70       	andi	r24, 0x08	; 8
     34c:	99 27       	eor	r25, r25
     34e:	89 2b       	or	r24, r25
     350:	51 f0       	breq	.+20     	; 0x366 <_LCD_OutNibble+0xca>
     352:	8b e3       	ldi	r24, 0x3B	; 59
     354:	90 e0       	ldi	r25, 0x00	; 0
     356:	2b e3       	ldi	r18, 0x3B	; 59
     358:	30 e0       	ldi	r19, 0x00	; 0
     35a:	f9 01       	movw	r30, r18
     35c:	20 81       	ld	r18, Z
     35e:	20 62       	ori	r18, 0x20	; 32
     360:	fc 01       	movw	r30, r24
     362:	20 83       	st	Z, r18
     364:	09 c0       	rjmp	.+18     	; 0x378 <_LCD_OutNibble+0xdc>
     366:	8b e3       	ldi	r24, 0x3B	; 59
     368:	90 e0       	ldi	r25, 0x00	; 0
     36a:	2b e3       	ldi	r18, 0x3B	; 59
     36c:	30 e0       	ldi	r19, 0x00	; 0
     36e:	f9 01       	movw	r30, r18
     370:	20 81       	ld	r18, Z
     372:	2f 7d       	andi	r18, 0xDF	; 223
     374:	fc 01       	movw	r30, r24
     376:	20 83       	st	Z, r18
     378:	00 00       	nop
     37a:	0f 90       	pop	r0
     37c:	df 91       	pop	r29
     37e:	cf 91       	pop	r28
     380:	08 95       	ret

00000382 <_LCD_Write>:
     382:	cf 93       	push	r28
     384:	df 93       	push	r29
     386:	cd b7       	in	r28, 0x3d	; 61
     388:	de b7       	in	r29, 0x3e	; 62
     38a:	a1 97       	sbiw	r28, 0x21	; 33
     38c:	0f b6       	in	r0, 0x3f	; 63
     38e:	f8 94       	cli
     390:	de bf       	out	0x3e, r29	; 62
     392:	0f be       	out	0x3f, r0	; 63
     394:	cd bf       	out	0x3d, r28	; 61
     396:	89 a3       	std	Y+33, r24	; 0x21
     398:	8b e3       	ldi	r24, 0x3B	; 59
     39a:	90 e0       	ldi	r25, 0x00	; 0
     39c:	2b e3       	ldi	r18, 0x3B	; 59
     39e:	30 e0       	ldi	r19, 0x00	; 0
     3a0:	f9 01       	movw	r30, r18
     3a2:	20 81       	ld	r18, Z
     3a4:	20 64       	ori	r18, 0x40	; 64
     3a6:	fc 01       	movw	r30, r24
     3a8:	20 83       	st	Z, r18
     3aa:	89 a1       	ldd	r24, Y+33	; 0x21
     3ac:	82 95       	swap	r24
     3ae:	8f 70       	andi	r24, 0x0F	; 15
     3b0:	0e 94 4e 01 	call	0x29c	; 0x29c <_LCD_OutNibble>
     3b4:	8b e3       	ldi	r24, 0x3B	; 59
     3b6:	90 e0       	ldi	r25, 0x00	; 0
     3b8:	2b e3       	ldi	r18, 0x3B	; 59
     3ba:	30 e0       	ldi	r19, 0x00	; 0
     3bc:	f9 01       	movw	r30, r18
     3be:	20 81       	ld	r18, Z
     3c0:	2f 7b       	andi	r18, 0xBF	; 191
     3c2:	fc 01       	movw	r30, r24
     3c4:	20 83       	st	Z, r18
     3c6:	8b e3       	ldi	r24, 0x3B	; 59
     3c8:	90 e0       	ldi	r25, 0x00	; 0
     3ca:	2b e3       	ldi	r18, 0x3B	; 59
     3cc:	30 e0       	ldi	r19, 0x00	; 0
     3ce:	f9 01       	movw	r30, r18
     3d0:	20 81       	ld	r18, Z
     3d2:	20 64       	ori	r18, 0x40	; 64
     3d4:	fc 01       	movw	r30, r24
     3d6:	20 83       	st	Z, r18
     3d8:	89 a1       	ldd	r24, Y+33	; 0x21
     3da:	0e 94 4e 01 	call	0x29c	; 0x29c <_LCD_OutNibble>
     3de:	8b e3       	ldi	r24, 0x3B	; 59
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	2b e3       	ldi	r18, 0x3B	; 59
     3e4:	30 e0       	ldi	r19, 0x00	; 0
     3e6:	f9 01       	movw	r30, r18
     3e8:	20 81       	ld	r18, Z
     3ea:	2f 7b       	andi	r18, 0xBF	; 191
     3ec:	fc 01       	movw	r30, r24
     3ee:	20 83       	st	Z, r18
     3f0:	80 e0       	ldi	r24, 0x00	; 0
     3f2:	90 e0       	ldi	r25, 0x00	; 0
     3f4:	a8 e4       	ldi	r26, 0x48	; 72
     3f6:	b2 e4       	ldi	r27, 0x42	; 66
     3f8:	89 83       	std	Y+1, r24	; 0x01
     3fa:	9a 83       	std	Y+2, r25	; 0x02
     3fc:	ab 83       	std	Y+3, r26	; 0x03
     3fe:	bc 83       	std	Y+4, r27	; 0x04
     400:	2b ea       	ldi	r18, 0xAB	; 171
     402:	3a ea       	ldi	r19, 0xAA	; 170
     404:	4a ea       	ldi	r20, 0xAA	; 170
     406:	50 e4       	ldi	r21, 0x40	; 64
     408:	69 81       	ldd	r22, Y+1	; 0x01
     40a:	7a 81       	ldd	r23, Y+2	; 0x02
     40c:	8b 81       	ldd	r24, Y+3	; 0x03
     40e:	9c 81       	ldd	r25, Y+4	; 0x04
     410:	0e 94 3e 10 	call	0x207c	; 0x207c <__mulsf3>
     414:	dc 01       	movw	r26, r24
     416:	cb 01       	movw	r24, r22
     418:	8d 83       	std	Y+5, r24	; 0x05
     41a:	9e 83       	std	Y+6, r25	; 0x06
     41c:	af 83       	std	Y+7, r26	; 0x07
     41e:	b8 87       	std	Y+8, r27	; 0x08
     420:	20 e0       	ldi	r18, 0x00	; 0
     422:	30 e0       	ldi	r19, 0x00	; 0
     424:	40 e8       	ldi	r20, 0x80	; 128
     426:	50 e4       	ldi	r21, 0x40	; 64
     428:	69 81       	ldd	r22, Y+1	; 0x01
     42a:	7a 81       	ldd	r23, Y+2	; 0x02
     42c:	8b 81       	ldd	r24, Y+3	; 0x03
     42e:	9c 81       	ldd	r25, Y+4	; 0x04
     430:	0e 94 3e 10 	call	0x207c	; 0x207c <__mulsf3>
     434:	dc 01       	movw	r26, r24
     436:	cb 01       	movw	r24, r22
     438:	89 87       	std	Y+9, r24	; 0x09
     43a:	9a 87       	std	Y+10, r25	; 0x0a
     43c:	ab 87       	std	Y+11, r26	; 0x0b
     43e:	bc 87       	std	Y+12, r27	; 0x0c
     440:	20 e0       	ldi	r18, 0x00	; 0
     442:	30 e0       	ldi	r19, 0x00	; 0
     444:	40 e8       	ldi	r20, 0x80	; 128
     446:	5f e3       	ldi	r21, 0x3F	; 63
     448:	6d 81       	ldd	r22, Y+5	; 0x05
     44a:	7e 81       	ldd	r23, Y+6	; 0x06
     44c:	8f 81       	ldd	r24, Y+7	; 0x07
     44e:	98 85       	ldd	r25, Y+8	; 0x08
     450:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <__cmpsf2>
     454:	88 23       	and	r24, r24
     456:	1c f4       	brge	.+6      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
     458:	81 e0       	ldi	r24, 0x01	; 1
     45a:	8d 87       	std	Y+13, r24	; 0x0d
     45c:	b2 c0       	rjmp	.+356    	; 0x5c2 <__LOCK_REGION_LENGTH__+0x1c2>
     45e:	20 e0       	ldi	r18, 0x00	; 0
     460:	3f ef       	ldi	r19, 0xFF	; 255
     462:	4f e7       	ldi	r20, 0x7F	; 127
     464:	57 e4       	ldi	r21, 0x47	; 71
     466:	69 85       	ldd	r22, Y+9	; 0x09
     468:	7a 85       	ldd	r23, Y+10	; 0x0a
     46a:	8b 85       	ldd	r24, Y+11	; 0x0b
     46c:	9c 85       	ldd	r25, Y+12	; 0x0c
     46e:	0e 94 39 10 	call	0x2072	; 0x2072 <__gesf2>
     472:	18 16       	cp	r1, r24
     474:	0c f0       	brlt	.+2      	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
     476:	7b c0       	rjmp	.+246    	; 0x56e <__LOCK_REGION_LENGTH__+0x16e>
     478:	20 e0       	ldi	r18, 0x00	; 0
     47a:	30 e0       	ldi	r19, 0x00	; 0
     47c:	4a e7       	ldi	r20, 0x7A	; 122
     47e:	54 e4       	ldi	r21, 0x44	; 68
     480:	69 81       	ldd	r22, Y+1	; 0x01
     482:	7a 81       	ldd	r23, Y+2	; 0x02
     484:	8b 81       	ldd	r24, Y+3	; 0x03
     486:	9c 81       	ldd	r25, Y+4	; 0x04
     488:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <__divsf3>
     48c:	dc 01       	movw	r26, r24
     48e:	cb 01       	movw	r24, r22
     490:	8e 87       	std	Y+14, r24	; 0x0e
     492:	9f 87       	std	Y+15, r25	; 0x0f
     494:	a8 8b       	std	Y+16, r26	; 0x10
     496:	b9 8b       	std	Y+17, r27	; 0x11
     498:	20 e0       	ldi	r18, 0x00	; 0
     49a:	30 e0       	ldi	r19, 0x00	; 0
     49c:	4a e7       	ldi	r20, 0x7A	; 122
     49e:	55 e4       	ldi	r21, 0x45	; 69
     4a0:	6e 85       	ldd	r22, Y+14	; 0x0e
     4a2:	7f 85       	ldd	r23, Y+15	; 0x0f
     4a4:	88 89       	ldd	r24, Y+16	; 0x10
     4a6:	99 89       	ldd	r25, Y+17	; 0x11
     4a8:	0e 94 3e 10 	call	0x207c	; 0x207c <__mulsf3>
     4ac:	dc 01       	movw	r26, r24
     4ae:	cb 01       	movw	r24, r22
     4b0:	8a 8b       	std	Y+18, r24	; 0x12
     4b2:	9b 8b       	std	Y+19, r25	; 0x13
     4b4:	ac 8b       	std	Y+20, r26	; 0x14
     4b6:	bd 8b       	std	Y+21, r27	; 0x15
     4b8:	20 e0       	ldi	r18, 0x00	; 0
     4ba:	30 e0       	ldi	r19, 0x00	; 0
     4bc:	40 e8       	ldi	r20, 0x80	; 128
     4be:	5f e3       	ldi	r21, 0x3F	; 63
     4c0:	6a 89       	ldd	r22, Y+18	; 0x12
     4c2:	7b 89       	ldd	r23, Y+19	; 0x13
     4c4:	8c 89       	ldd	r24, Y+20	; 0x14
     4c6:	9d 89       	ldd	r25, Y+21	; 0x15
     4c8:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <__cmpsf2>
     4cc:	88 23       	and	r24, r24
     4ce:	2c f4       	brge	.+10     	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
     4d0:	81 e0       	ldi	r24, 0x01	; 1
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	9f 8b       	std	Y+23, r25	; 0x17
     4d6:	8e 8b       	std	Y+22, r24	; 0x16
     4d8:	3f c0       	rjmp	.+126    	; 0x558 <__LOCK_REGION_LENGTH__+0x158>
     4da:	20 e0       	ldi	r18, 0x00	; 0
     4dc:	3f ef       	ldi	r19, 0xFF	; 255
     4de:	4f e7       	ldi	r20, 0x7F	; 127
     4e0:	57 e4       	ldi	r21, 0x47	; 71
     4e2:	6a 89       	ldd	r22, Y+18	; 0x12
     4e4:	7b 89       	ldd	r23, Y+19	; 0x13
     4e6:	8c 89       	ldd	r24, Y+20	; 0x14
     4e8:	9d 89       	ldd	r25, Y+21	; 0x15
     4ea:	0e 94 39 10 	call	0x2072	; 0x2072 <__gesf2>
     4ee:	18 16       	cp	r1, r24
     4f0:	4c f5       	brge	.+82     	; 0x544 <__LOCK_REGION_LENGTH__+0x144>
     4f2:	20 e0       	ldi	r18, 0x00	; 0
     4f4:	30 e0       	ldi	r19, 0x00	; 0
     4f6:	40 e2       	ldi	r20, 0x20	; 32
     4f8:	51 e4       	ldi	r21, 0x41	; 65
     4fa:	6e 85       	ldd	r22, Y+14	; 0x0e
     4fc:	7f 85       	ldd	r23, Y+15	; 0x0f
     4fe:	88 89       	ldd	r24, Y+16	; 0x10
     500:	99 89       	ldd	r25, Y+17	; 0x11
     502:	0e 94 3e 10 	call	0x207c	; 0x207c <__mulsf3>
     506:	dc 01       	movw	r26, r24
     508:	cb 01       	movw	r24, r22
     50a:	bc 01       	movw	r22, r24
     50c:	cd 01       	movw	r24, r26
     50e:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <__fixunssfsi>
     512:	dc 01       	movw	r26, r24
     514:	cb 01       	movw	r24, r22
     516:	9f 8b       	std	Y+23, r25	; 0x17
     518:	8e 8b       	std	Y+22, r24	; 0x16
     51a:	0f c0       	rjmp	.+30     	; 0x53a <__LOCK_REGION_LENGTH__+0x13a>
     51c:	80 e9       	ldi	r24, 0x90	; 144
     51e:	91 e0       	ldi	r25, 0x01	; 1
     520:	99 8f       	std	Y+25, r25	; 0x19
     522:	88 8f       	std	Y+24, r24	; 0x18
     524:	88 8d       	ldd	r24, Y+24	; 0x18
     526:	99 8d       	ldd	r25, Y+25	; 0x19
     528:	01 97       	sbiw	r24, 0x01	; 1
     52a:	f1 f7       	brne	.-4      	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
     52c:	99 8f       	std	Y+25, r25	; 0x19
     52e:	88 8f       	std	Y+24, r24	; 0x18
     530:	8e 89       	ldd	r24, Y+22	; 0x16
     532:	9f 89       	ldd	r25, Y+23	; 0x17
     534:	01 97       	sbiw	r24, 0x01	; 1
     536:	9f 8b       	std	Y+23, r25	; 0x17
     538:	8e 8b       	std	Y+22, r24	; 0x16
     53a:	8e 89       	ldd	r24, Y+22	; 0x16
     53c:	9f 89       	ldd	r25, Y+23	; 0x17
     53e:	89 2b       	or	r24, r25
     540:	69 f7       	brne	.-38     	; 0x51c <__LOCK_REGION_LENGTH__+0x11c>
     542:	3f c0       	rjmp	.+126    	; 0x5c2 <__LOCK_REGION_LENGTH__+0x1c2>
     544:	6a 89       	ldd	r22, Y+18	; 0x12
     546:	7b 89       	ldd	r23, Y+19	; 0x13
     548:	8c 89       	ldd	r24, Y+20	; 0x14
     54a:	9d 89       	ldd	r25, Y+21	; 0x15
     54c:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <__fixunssfsi>
     550:	dc 01       	movw	r26, r24
     552:	cb 01       	movw	r24, r22
     554:	9f 8b       	std	Y+23, r25	; 0x17
     556:	8e 8b       	std	Y+22, r24	; 0x16
     558:	8e 89       	ldd	r24, Y+22	; 0x16
     55a:	9f 89       	ldd	r25, Y+23	; 0x17
     55c:	9b 8f       	std	Y+27, r25	; 0x1b
     55e:	8a 8f       	std	Y+26, r24	; 0x1a
     560:	8a 8d       	ldd	r24, Y+26	; 0x1a
     562:	9b 8d       	ldd	r25, Y+27	; 0x1b
     564:	01 97       	sbiw	r24, 0x01	; 1
     566:	f1 f7       	brne	.-4      	; 0x564 <__LOCK_REGION_LENGTH__+0x164>
     568:	9b 8f       	std	Y+27, r25	; 0x1b
     56a:	8a 8f       	std	Y+26, r24	; 0x1a
     56c:	2a c0       	rjmp	.+84     	; 0x5c2 <__LOCK_REGION_LENGTH__+0x1c2>
     56e:	20 e0       	ldi	r18, 0x00	; 0
     570:	30 e0       	ldi	r19, 0x00	; 0
     572:	4f e7       	ldi	r20, 0x7F	; 127
     574:	53 e4       	ldi	r21, 0x43	; 67
     576:	6d 81       	ldd	r22, Y+5	; 0x05
     578:	7e 81       	ldd	r23, Y+6	; 0x06
     57a:	8f 81       	ldd	r24, Y+7	; 0x07
     57c:	98 85       	ldd	r25, Y+8	; 0x08
     57e:	0e 94 39 10 	call	0x2072	; 0x2072 <__gesf2>
     582:	18 16       	cp	r1, r24
     584:	ac f4       	brge	.+42     	; 0x5b0 <__LOCK_REGION_LENGTH__+0x1b0>
     586:	69 85       	ldd	r22, Y+9	; 0x09
     588:	7a 85       	ldd	r23, Y+10	; 0x0a
     58a:	8b 85       	ldd	r24, Y+11	; 0x0b
     58c:	9c 85       	ldd	r25, Y+12	; 0x0c
     58e:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <__fixunssfsi>
     592:	dc 01       	movw	r26, r24
     594:	cb 01       	movw	r24, r22
     596:	9d 8f       	std	Y+29, r25	; 0x1d
     598:	8c 8f       	std	Y+28, r24	; 0x1c
     59a:	8c 8d       	ldd	r24, Y+28	; 0x1c
     59c:	9d 8d       	ldd	r25, Y+29	; 0x1d
     59e:	9f 8f       	std	Y+31, r25	; 0x1f
     5a0:	8e 8f       	std	Y+30, r24	; 0x1e
     5a2:	8e 8d       	ldd	r24, Y+30	; 0x1e
     5a4:	9f 8d       	ldd	r25, Y+31	; 0x1f
     5a6:	01 97       	sbiw	r24, 0x01	; 1
     5a8:	f1 f7       	brne	.-4      	; 0x5a6 <__LOCK_REGION_LENGTH__+0x1a6>
     5aa:	9f 8f       	std	Y+31, r25	; 0x1f
     5ac:	8e 8f       	std	Y+30, r24	; 0x1e
     5ae:	0f c0       	rjmp	.+30     	; 0x5ce <__LOCK_REGION_LENGTH__+0x1ce>
     5b0:	6d 81       	ldd	r22, Y+5	; 0x05
     5b2:	7e 81       	ldd	r23, Y+6	; 0x06
     5b4:	8f 81       	ldd	r24, Y+7	; 0x07
     5b6:	98 85       	ldd	r25, Y+8	; 0x08
     5b8:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <__fixunssfsi>
     5bc:	dc 01       	movw	r26, r24
     5be:	cb 01       	movw	r24, r22
     5c0:	8d 87       	std	Y+13, r24	; 0x0d
     5c2:	8d 85       	ldd	r24, Y+13	; 0x0d
     5c4:	88 a3       	std	Y+32, r24	; 0x20
     5c6:	88 a1       	ldd	r24, Y+32	; 0x20
     5c8:	8a 95       	dec	r24
     5ca:	f1 f7       	brne	.-4      	; 0x5c8 <__LOCK_REGION_LENGTH__+0x1c8>
     5cc:	88 a3       	std	Y+32, r24	; 0x20
     5ce:	00 00       	nop
     5d0:	a1 96       	adiw	r28, 0x21	; 33
     5d2:	0f b6       	in	r0, 0x3f	; 63
     5d4:	f8 94       	cli
     5d6:	de bf       	out	0x3e, r29	; 62
     5d8:	0f be       	out	0x3f, r0	; 63
     5da:	cd bf       	out	0x3d, r28	; 61
     5dc:	df 91       	pop	r29
     5de:	cf 91       	pop	r28
     5e0:	08 95       	ret

000005e2 <LCD_WriteCommand>:
     5e2:	cf 93       	push	r28
     5e4:	df 93       	push	r29
     5e6:	1f 92       	push	r1
     5e8:	cd b7       	in	r28, 0x3d	; 61
     5ea:	de b7       	in	r29, 0x3e	; 62
     5ec:	89 83       	std	Y+1, r24	; 0x01
     5ee:	8b e3       	ldi	r24, 0x3B	; 59
     5f0:	90 e0       	ldi	r25, 0x00	; 0
     5f2:	2b e3       	ldi	r18, 0x3B	; 59
     5f4:	30 e0       	ldi	r19, 0x00	; 0
     5f6:	f9 01       	movw	r30, r18
     5f8:	20 81       	ld	r18, Z
     5fa:	2f 77       	andi	r18, 0x7F	; 127
     5fc:	fc 01       	movw	r30, r24
     5fe:	20 83       	st	Z, r18
     600:	89 81       	ldd	r24, Y+1	; 0x01
     602:	0e 94 c1 01 	call	0x382	; 0x382 <_LCD_Write>
     606:	00 00       	nop
     608:	0f 90       	pop	r0
     60a:	df 91       	pop	r29
     60c:	cf 91       	pop	r28
     60e:	08 95       	ret

00000610 <LCD_WriteData>:
     610:	cf 93       	push	r28
     612:	df 93       	push	r29
     614:	1f 92       	push	r1
     616:	cd b7       	in	r28, 0x3d	; 61
     618:	de b7       	in	r29, 0x3e	; 62
     61a:	89 83       	std	Y+1, r24	; 0x01
     61c:	8b e3       	ldi	r24, 0x3B	; 59
     61e:	90 e0       	ldi	r25, 0x00	; 0
     620:	2b e3       	ldi	r18, 0x3B	; 59
     622:	30 e0       	ldi	r19, 0x00	; 0
     624:	f9 01       	movw	r30, r18
     626:	20 81       	ld	r18, Z
     628:	20 68       	ori	r18, 0x80	; 128
     62a:	fc 01       	movw	r30, r24
     62c:	20 83       	st	Z, r18
     62e:	89 81       	ldd	r24, Y+1	; 0x01
     630:	0e 94 c1 01 	call	0x382	; 0x382 <_LCD_Write>
     634:	00 00       	nop
     636:	0f 90       	pop	r0
     638:	df 91       	pop	r29
     63a:	cf 91       	pop	r28
     63c:	08 95       	ret

0000063e <LCD_WriteText>:
     63e:	cf 93       	push	r28
     640:	df 93       	push	r29
     642:	00 d0       	rcall	.+0      	; 0x644 <LCD_WriteText+0x6>
     644:	cd b7       	in	r28, 0x3d	; 61
     646:	de b7       	in	r29, 0x3e	; 62
     648:	9a 83       	std	Y+2, r25	; 0x02
     64a:	89 83       	std	Y+1, r24	; 0x01
     64c:	0b c0       	rjmp	.+22     	; 0x664 <LCD_WriteText+0x26>
     64e:	89 81       	ldd	r24, Y+1	; 0x01
     650:	9a 81       	ldd	r25, Y+2	; 0x02
     652:	9c 01       	movw	r18, r24
     654:	2f 5f       	subi	r18, 0xFF	; 255
     656:	3f 4f       	sbci	r19, 0xFF	; 255
     658:	3a 83       	std	Y+2, r19	; 0x02
     65a:	29 83       	std	Y+1, r18	; 0x01
     65c:	fc 01       	movw	r30, r24
     65e:	80 81       	ld	r24, Z
     660:	0e 94 08 03 	call	0x610	; 0x610 <LCD_WriteData>
     664:	89 81       	ldd	r24, Y+1	; 0x01
     666:	9a 81       	ldd	r25, Y+2	; 0x02
     668:	fc 01       	movw	r30, r24
     66a:	80 81       	ld	r24, Z
     66c:	88 23       	and	r24, r24
     66e:	79 f7       	brne	.-34     	; 0x64e <LCD_WriteText+0x10>
     670:	00 00       	nop
     672:	0f 90       	pop	r0
     674:	0f 90       	pop	r0
     676:	df 91       	pop	r29
     678:	cf 91       	pop	r28
     67a:	08 95       	ret

0000067c <LCD_GoTo>:
     67c:	cf 93       	push	r28
     67e:	df 93       	push	r29
     680:	00 d0       	rcall	.+0      	; 0x682 <LCD_GoTo+0x6>
     682:	cd b7       	in	r28, 0x3d	; 61
     684:	de b7       	in	r29, 0x3e	; 62
     686:	89 83       	std	Y+1, r24	; 0x01
     688:	6a 83       	std	Y+2, r22	; 0x02
     68a:	8a 81       	ldd	r24, Y+2	; 0x02
     68c:	98 2f       	mov	r25, r24
     68e:	92 95       	swap	r25
     690:	99 0f       	add	r25, r25
     692:	99 0f       	add	r25, r25
     694:	90 7c       	andi	r25, 0xC0	; 192
     696:	89 81       	ldd	r24, Y+1	; 0x01
     698:	89 0f       	add	r24, r25
     69a:	80 68       	ori	r24, 0x80	; 128
     69c:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <LCD_WriteCommand>
     6a0:	00 00       	nop
     6a2:	0f 90       	pop	r0
     6a4:	0f 90       	pop	r0
     6a6:	df 91       	pop	r29
     6a8:	cf 91       	pop	r28
     6aa:	08 95       	ret

000006ac <LCD_Clear>:
     6ac:	cf 93       	push	r28
     6ae:	df 93       	push	r29
     6b0:	cd b7       	in	r28, 0x3d	; 61
     6b2:	de b7       	in	r29, 0x3e	; 62
     6b4:	2e 97       	sbiw	r28, 0x0e	; 14
     6b6:	0f b6       	in	r0, 0x3f	; 63
     6b8:	f8 94       	cli
     6ba:	de bf       	out	0x3e, r29	; 62
     6bc:	0f be       	out	0x3f, r0	; 63
     6be:	cd bf       	out	0x3d, r28	; 61
     6c0:	81 e0       	ldi	r24, 0x01	; 1
     6c2:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <LCD_WriteCommand>
     6c6:	80 e0       	ldi	r24, 0x00	; 0
     6c8:	90 e0       	ldi	r25, 0x00	; 0
     6ca:	a0 e0       	ldi	r26, 0x00	; 0
     6cc:	b0 e4       	ldi	r27, 0x40	; 64
     6ce:	89 83       	std	Y+1, r24	; 0x01
     6d0:	9a 83       	std	Y+2, r25	; 0x02
     6d2:	ab 83       	std	Y+3, r26	; 0x03
     6d4:	bc 83       	std	Y+4, r27	; 0x04
     6d6:	20 e0       	ldi	r18, 0x00	; 0
     6d8:	30 e0       	ldi	r19, 0x00	; 0
     6da:	4a e7       	ldi	r20, 0x7A	; 122
     6dc:	55 e4       	ldi	r21, 0x45	; 69
     6de:	69 81       	ldd	r22, Y+1	; 0x01
     6e0:	7a 81       	ldd	r23, Y+2	; 0x02
     6e2:	8b 81       	ldd	r24, Y+3	; 0x03
     6e4:	9c 81       	ldd	r25, Y+4	; 0x04
     6e6:	0e 94 3e 10 	call	0x207c	; 0x207c <__mulsf3>
     6ea:	dc 01       	movw	r26, r24
     6ec:	cb 01       	movw	r24, r22
     6ee:	8d 83       	std	Y+5, r24	; 0x05
     6f0:	9e 83       	std	Y+6, r25	; 0x06
     6f2:	af 83       	std	Y+7, r26	; 0x07
     6f4:	b8 87       	std	Y+8, r27	; 0x08
     6f6:	20 e0       	ldi	r18, 0x00	; 0
     6f8:	30 e0       	ldi	r19, 0x00	; 0
     6fa:	40 e8       	ldi	r20, 0x80	; 128
     6fc:	5f e3       	ldi	r21, 0x3F	; 63
     6fe:	6d 81       	ldd	r22, Y+5	; 0x05
     700:	7e 81       	ldd	r23, Y+6	; 0x06
     702:	8f 81       	ldd	r24, Y+7	; 0x07
     704:	98 85       	ldd	r25, Y+8	; 0x08
     706:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <__cmpsf2>
     70a:	88 23       	and	r24, r24
     70c:	2c f4       	brge	.+10     	; 0x718 <LCD_Clear+0x6c>
     70e:	81 e0       	ldi	r24, 0x01	; 1
     710:	90 e0       	ldi	r25, 0x00	; 0
     712:	9a 87       	std	Y+10, r25	; 0x0a
     714:	89 87       	std	Y+9, r24	; 0x09
     716:	3f c0       	rjmp	.+126    	; 0x796 <LCD_Clear+0xea>
     718:	20 e0       	ldi	r18, 0x00	; 0
     71a:	3f ef       	ldi	r19, 0xFF	; 255
     71c:	4f e7       	ldi	r20, 0x7F	; 127
     71e:	57 e4       	ldi	r21, 0x47	; 71
     720:	6d 81       	ldd	r22, Y+5	; 0x05
     722:	7e 81       	ldd	r23, Y+6	; 0x06
     724:	8f 81       	ldd	r24, Y+7	; 0x07
     726:	98 85       	ldd	r25, Y+8	; 0x08
     728:	0e 94 39 10 	call	0x2072	; 0x2072 <__gesf2>
     72c:	18 16       	cp	r1, r24
     72e:	4c f5       	brge	.+82     	; 0x782 <LCD_Clear+0xd6>
     730:	20 e0       	ldi	r18, 0x00	; 0
     732:	30 e0       	ldi	r19, 0x00	; 0
     734:	40 e2       	ldi	r20, 0x20	; 32
     736:	51 e4       	ldi	r21, 0x41	; 65
     738:	69 81       	ldd	r22, Y+1	; 0x01
     73a:	7a 81       	ldd	r23, Y+2	; 0x02
     73c:	8b 81       	ldd	r24, Y+3	; 0x03
     73e:	9c 81       	ldd	r25, Y+4	; 0x04
     740:	0e 94 3e 10 	call	0x207c	; 0x207c <__mulsf3>
     744:	dc 01       	movw	r26, r24
     746:	cb 01       	movw	r24, r22
     748:	bc 01       	movw	r22, r24
     74a:	cd 01       	movw	r24, r26
     74c:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <__fixunssfsi>
     750:	dc 01       	movw	r26, r24
     752:	cb 01       	movw	r24, r22
     754:	9a 87       	std	Y+10, r25	; 0x0a
     756:	89 87       	std	Y+9, r24	; 0x09
     758:	0f c0       	rjmp	.+30     	; 0x778 <LCD_Clear+0xcc>
     75a:	80 e9       	ldi	r24, 0x90	; 144
     75c:	91 e0       	ldi	r25, 0x01	; 1
     75e:	9c 87       	std	Y+12, r25	; 0x0c
     760:	8b 87       	std	Y+11, r24	; 0x0b
     762:	8b 85       	ldd	r24, Y+11	; 0x0b
     764:	9c 85       	ldd	r25, Y+12	; 0x0c
     766:	01 97       	sbiw	r24, 0x01	; 1
     768:	f1 f7       	brne	.-4      	; 0x766 <LCD_Clear+0xba>
     76a:	9c 87       	std	Y+12, r25	; 0x0c
     76c:	8b 87       	std	Y+11, r24	; 0x0b
     76e:	89 85       	ldd	r24, Y+9	; 0x09
     770:	9a 85       	ldd	r25, Y+10	; 0x0a
     772:	01 97       	sbiw	r24, 0x01	; 1
     774:	9a 87       	std	Y+10, r25	; 0x0a
     776:	89 87       	std	Y+9, r24	; 0x09
     778:	89 85       	ldd	r24, Y+9	; 0x09
     77a:	9a 85       	ldd	r25, Y+10	; 0x0a
     77c:	89 2b       	or	r24, r25
     77e:	69 f7       	brne	.-38     	; 0x75a <LCD_Clear+0xae>
     780:	14 c0       	rjmp	.+40     	; 0x7aa <LCD_Clear+0xfe>
     782:	6d 81       	ldd	r22, Y+5	; 0x05
     784:	7e 81       	ldd	r23, Y+6	; 0x06
     786:	8f 81       	ldd	r24, Y+7	; 0x07
     788:	98 85       	ldd	r25, Y+8	; 0x08
     78a:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <__fixunssfsi>
     78e:	dc 01       	movw	r26, r24
     790:	cb 01       	movw	r24, r22
     792:	9a 87       	std	Y+10, r25	; 0x0a
     794:	89 87       	std	Y+9, r24	; 0x09
     796:	89 85       	ldd	r24, Y+9	; 0x09
     798:	9a 85       	ldd	r25, Y+10	; 0x0a
     79a:	9e 87       	std	Y+14, r25	; 0x0e
     79c:	8d 87       	std	Y+13, r24	; 0x0d
     79e:	8d 85       	ldd	r24, Y+13	; 0x0d
     7a0:	9e 85       	ldd	r25, Y+14	; 0x0e
     7a2:	01 97       	sbiw	r24, 0x01	; 1
     7a4:	f1 f7       	brne	.-4      	; 0x7a2 <LCD_Clear+0xf6>
     7a6:	9e 87       	std	Y+14, r25	; 0x0e
     7a8:	8d 87       	std	Y+13, r24	; 0x0d
     7aa:	00 00       	nop
     7ac:	2e 96       	adiw	r28, 0x0e	; 14
     7ae:	0f b6       	in	r0, 0x3f	; 63
     7b0:	f8 94       	cli
     7b2:	de bf       	out	0x3e, r29	; 62
     7b4:	0f be       	out	0x3f, r0	; 63
     7b6:	cd bf       	out	0x3d, r28	; 61
     7b8:	df 91       	pop	r29
     7ba:	cf 91       	pop	r28
     7bc:	08 95       	ret

000007be <LCD_Initialize>:
//-------------------------------------
// Display initialization
//-------------------------------------
void LCD_Initialize(void)
{
     7be:	cf 93       	push	r28
     7c0:	df 93       	push	r29
     7c2:	cd b7       	in	r28, 0x3d	; 61
     7c4:	de b7       	in	r29, 0x3e	; 62
     7c6:	e9 97       	sbiw	r28, 0x39	; 57
     7c8:	0f b6       	in	r0, 0x3f	; 63
     7ca:	f8 94       	cli
     7cc:	de bf       	out	0x3e, r29	; 62
     7ce:	0f be       	out	0x3f, r0	; 63
     7d0:	cd bf       	out	0x3d, r28	; 61
unsigned char i;
LCD_DB4_DIR |= LCD_DB4; 
     7d2:	8a e3       	ldi	r24, 0x3A	; 58
     7d4:	90 e0       	ldi	r25, 0x00	; 0
     7d6:	2a e3       	ldi	r18, 0x3A	; 58
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	f9 01       	movw	r30, r18
     7dc:	20 81       	ld	r18, Z
     7de:	24 60       	ori	r18, 0x04	; 4
     7e0:	fc 01       	movw	r30, r24
     7e2:	20 83       	st	Z, r18
LCD_DB5_DIR |= LCD_DB5; 
     7e4:	8a e3       	ldi	r24, 0x3A	; 58
     7e6:	90 e0       	ldi	r25, 0x00	; 0
     7e8:	2a e3       	ldi	r18, 0x3A	; 58
     7ea:	30 e0       	ldi	r19, 0x00	; 0
     7ec:	f9 01       	movw	r30, r18
     7ee:	20 81       	ld	r18, Z
     7f0:	28 60       	ori	r18, 0x08	; 8
     7f2:	fc 01       	movw	r30, r24
     7f4:	20 83       	st	Z, r18
LCD_DB6_DIR |= LCD_DB6; 
     7f6:	8a e3       	ldi	r24, 0x3A	; 58
     7f8:	90 e0       	ldi	r25, 0x00	; 0
     7fa:	2a e3       	ldi	r18, 0x3A	; 58
     7fc:	30 e0       	ldi	r19, 0x00	; 0
     7fe:	f9 01       	movw	r30, r18
     800:	20 81       	ld	r18, Z
     802:	20 61       	ori	r18, 0x10	; 16
     804:	fc 01       	movw	r30, r24
     806:	20 83       	st	Z, r18
LCD_DB7_DIR |= LCD_DB7; 
     808:	8a e3       	ldi	r24, 0x3A	; 58
     80a:	90 e0       	ldi	r25, 0x00	; 0
     80c:	2a e3       	ldi	r18, 0x3A	; 58
     80e:	30 e0       	ldi	r19, 0x00	; 0
     810:	f9 01       	movw	r30, r18
     812:	20 81       	ld	r18, Z
     814:	20 62       	ori	r18, 0x20	; 32
     816:	fc 01       	movw	r30, r24
     818:	20 83       	st	Z, r18
LCD_E_DIR 	|= LCD_E;   
     81a:	8a e3       	ldi	r24, 0x3A	; 58
     81c:	90 e0       	ldi	r25, 0x00	; 0
     81e:	2a e3       	ldi	r18, 0x3A	; 58
     820:	30 e0       	ldi	r19, 0x00	; 0
     822:	f9 01       	movw	r30, r18
     824:	20 81       	ld	r18, Z
     826:	20 64       	ori	r18, 0x40	; 64
     828:	fc 01       	movw	r30, r24
     82a:	20 83       	st	Z, r18
LCD_RS_DIR 	|= LCD_RS;  
     82c:	8a e3       	ldi	r24, 0x3A	; 58
     82e:	90 e0       	ldi	r25, 0x00	; 0
     830:	2a e3       	ldi	r18, 0x3A	; 58
     832:	30 e0       	ldi	r19, 0x00	; 0
     834:	f9 01       	movw	r30, r18
     836:	20 81       	ld	r18, Z
     838:	20 68       	ori	r18, 0x80	; 128
     83a:	fc 01       	movw	r30, r24
     83c:	20 83       	st	Z, r18
     83e:	80 e0       	ldi	r24, 0x00	; 0
     840:	90 e0       	ldi	r25, 0x00	; 0
     842:	a0 e7       	ldi	r26, 0x70	; 112
     844:	b1 e4       	ldi	r27, 0x41	; 65
     846:	8e 87       	std	Y+14, r24	; 0x0e
     848:	9f 87       	std	Y+15, r25	; 0x0f
     84a:	a8 8b       	std	Y+16, r26	; 0x10
     84c:	b9 8b       	std	Y+17, r27	; 0x11

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     84e:	20 e0       	ldi	r18, 0x00	; 0
     850:	30 e0       	ldi	r19, 0x00	; 0
     852:	4a e7       	ldi	r20, 0x7A	; 122
     854:	55 e4       	ldi	r21, 0x45	; 69
     856:	6e 85       	ldd	r22, Y+14	; 0x0e
     858:	7f 85       	ldd	r23, Y+15	; 0x0f
     85a:	88 89       	ldd	r24, Y+16	; 0x10
     85c:	99 89       	ldd	r25, Y+17	; 0x11
     85e:	0e 94 3e 10 	call	0x207c	; 0x207c <__mulsf3>
     862:	dc 01       	movw	r26, r24
     864:	cb 01       	movw	r24, r22
     866:	8a 8b       	std	Y+18, r24	; 0x12
     868:	9b 8b       	std	Y+19, r25	; 0x13
     86a:	ac 8b       	std	Y+20, r26	; 0x14
     86c:	bd 8b       	std	Y+21, r27	; 0x15
	if (__tmp < 1.0)
     86e:	20 e0       	ldi	r18, 0x00	; 0
     870:	30 e0       	ldi	r19, 0x00	; 0
     872:	40 e8       	ldi	r20, 0x80	; 128
     874:	5f e3       	ldi	r21, 0x3F	; 63
     876:	6a 89       	ldd	r22, Y+18	; 0x12
     878:	7b 89       	ldd	r23, Y+19	; 0x13
     87a:	8c 89       	ldd	r24, Y+20	; 0x14
     87c:	9d 89       	ldd	r25, Y+21	; 0x15
     87e:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <__cmpsf2>
     882:	88 23       	and	r24, r24
     884:	2c f4       	brge	.+10     	; 0x890 <__stack+0x31>
		__ticks = 1;
     886:	81 e0       	ldi	r24, 0x01	; 1
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	9f 8b       	std	Y+23, r25	; 0x17
     88c:	8e 8b       	std	Y+22, r24	; 0x16
     88e:	3f c0       	rjmp	.+126    	; 0x90e <__stack+0xaf>
	else if (__tmp > 65535)
     890:	20 e0       	ldi	r18, 0x00	; 0
     892:	3f ef       	ldi	r19, 0xFF	; 255
     894:	4f e7       	ldi	r20, 0x7F	; 127
     896:	57 e4       	ldi	r21, 0x47	; 71
     898:	6a 89       	ldd	r22, Y+18	; 0x12
     89a:	7b 89       	ldd	r23, Y+19	; 0x13
     89c:	8c 89       	ldd	r24, Y+20	; 0x14
     89e:	9d 89       	ldd	r25, Y+21	; 0x15
     8a0:	0e 94 39 10 	call	0x2072	; 0x2072 <__gesf2>
     8a4:	18 16       	cp	r1, r24
     8a6:	4c f5       	brge	.+82     	; 0x8fa <__stack+0x9b>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     8a8:	20 e0       	ldi	r18, 0x00	; 0
     8aa:	30 e0       	ldi	r19, 0x00	; 0
     8ac:	40 e2       	ldi	r20, 0x20	; 32
     8ae:	51 e4       	ldi	r21, 0x41	; 65
     8b0:	6e 85       	ldd	r22, Y+14	; 0x0e
     8b2:	7f 85       	ldd	r23, Y+15	; 0x0f
     8b4:	88 89       	ldd	r24, Y+16	; 0x10
     8b6:	99 89       	ldd	r25, Y+17	; 0x11
     8b8:	0e 94 3e 10 	call	0x207c	; 0x207c <__mulsf3>
     8bc:	dc 01       	movw	r26, r24
     8be:	cb 01       	movw	r24, r22
     8c0:	bc 01       	movw	r22, r24
     8c2:	cd 01       	movw	r24, r26
     8c4:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <__fixunssfsi>
     8c8:	dc 01       	movw	r26, r24
     8ca:	cb 01       	movw	r24, r22
     8cc:	9f 8b       	std	Y+23, r25	; 0x17
     8ce:	8e 8b       	std	Y+22, r24	; 0x16
     8d0:	0f c0       	rjmp	.+30     	; 0x8f0 <__stack+0x91>
     8d2:	80 e9       	ldi	r24, 0x90	; 144
     8d4:	91 e0       	ldi	r25, 0x01	; 1
     8d6:	99 8f       	std	Y+25, r25	; 0x19
     8d8:	88 8f       	std	Y+24, r24	; 0x18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     8da:	88 8d       	ldd	r24, Y+24	; 0x18
     8dc:	99 8d       	ldd	r25, Y+25	; 0x19
     8de:	01 97       	sbiw	r24, 0x01	; 1
     8e0:	f1 f7       	brne	.-4      	; 0x8de <__stack+0x7f>
     8e2:	99 8f       	std	Y+25, r25	; 0x19
     8e4:	88 8f       	std	Y+24, r24	; 0x18
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8e6:	8e 89       	ldd	r24, Y+22	; 0x16
     8e8:	9f 89       	ldd	r25, Y+23	; 0x17
     8ea:	01 97       	sbiw	r24, 0x01	; 1
     8ec:	9f 8b       	std	Y+23, r25	; 0x17
     8ee:	8e 8b       	std	Y+22, r24	; 0x16
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8f0:	8e 89       	ldd	r24, Y+22	; 0x16
     8f2:	9f 89       	ldd	r25, Y+23	; 0x17
     8f4:	89 2b       	or	r24, r25
     8f6:	69 f7       	brne	.-38     	; 0x8d2 <__stack+0x73>
     8f8:	14 c0       	rjmp	.+40     	; 0x922 <__stack+0xc3>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     8fa:	6a 89       	ldd	r22, Y+18	; 0x12
     8fc:	7b 89       	ldd	r23, Y+19	; 0x13
     8fe:	8c 89       	ldd	r24, Y+20	; 0x14
     900:	9d 89       	ldd	r25, Y+21	; 0x15
     902:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <__fixunssfsi>
     906:	dc 01       	movw	r26, r24
     908:	cb 01       	movw	r24, r22
     90a:	9f 8b       	std	Y+23, r25	; 0x17
     90c:	8e 8b       	std	Y+22, r24	; 0x16
     90e:	8e 89       	ldd	r24, Y+22	; 0x16
     910:	9f 89       	ldd	r25, Y+23	; 0x17
     912:	9b 8f       	std	Y+27, r25	; 0x1b
     914:	8a 8f       	std	Y+26, r24	; 0x1a
     916:	8a 8d       	ldd	r24, Y+26	; 0x1a
     918:	9b 8d       	ldd	r25, Y+27	; 0x1b
     91a:	01 97       	sbiw	r24, 0x01	; 1
     91c:	f1 f7       	brne	.-4      	; 0x91a <__stack+0xbb>
     91e:	9b 8f       	std	Y+27, r25	; 0x1b
     920:	8a 8f       	std	Y+26, r24	; 0x1a
_delay_ms(15); 
LCD_RS_PORT &= ~LCD_RS; 
     922:	8b e3       	ldi	r24, 0x3B	; 59
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	2b e3       	ldi	r18, 0x3B	; 59
     928:	30 e0       	ldi	r19, 0x00	; 0
     92a:	f9 01       	movw	r30, r18
     92c:	20 81       	ld	r18, Z
     92e:	2f 77       	andi	r18, 0x7F	; 127
     930:	fc 01       	movw	r30, r24
     932:	20 83       	st	Z, r18
LCD_E_PORT &= ~LCD_E;  
     934:	8b e3       	ldi	r24, 0x3B	; 59
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	2b e3       	ldi	r18, 0x3B	; 59
     93a:	30 e0       	ldi	r19, 0x00	; 0
     93c:	f9 01       	movw	r30, r18
     93e:	20 81       	ld	r18, Z
     940:	2f 7b       	andi	r18, 0xBF	; 191
     942:	fc 01       	movw	r30, r24
     944:	20 83       	st	Z, r18

for(i = 0; i < 3; i++)
     946:	19 82       	std	Y+1, r1	; 0x01
     948:	8a c0       	rjmp	.+276    	; 0xa5e <__stack+0x1ff>
  {
  LCD_E_PORT |= LCD_E; 
     94a:	8b e3       	ldi	r24, 0x3B	; 59
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	2b e3       	ldi	r18, 0x3B	; 59
     950:	30 e0       	ldi	r19, 0x00	; 0
     952:	f9 01       	movw	r30, r18
     954:	20 81       	ld	r18, Z
     956:	20 64       	ori	r18, 0x40	; 64
     958:	fc 01       	movw	r30, r24
     95a:	20 83       	st	Z, r18
  _LCD_OutNibble(0x03); 
     95c:	83 e0       	ldi	r24, 0x03	; 3
     95e:	0e 94 4e 01 	call	0x29c	; 0x29c <_LCD_OutNibble>
  LCD_E_PORT &= ~LCD_E; 
     962:	8b e3       	ldi	r24, 0x3B	; 59
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	2b e3       	ldi	r18, 0x3B	; 59
     968:	30 e0       	ldi	r19, 0x00	; 0
     96a:	f9 01       	movw	r30, r18
     96c:	20 81       	ld	r18, Z
     96e:	2f 7b       	andi	r18, 0xBF	; 191
     970:	fc 01       	movw	r30, r24
     972:	20 83       	st	Z, r18
     974:	80 e0       	ldi	r24, 0x00	; 0
     976:	90 e0       	ldi	r25, 0x00	; 0
     978:	a0 ea       	ldi	r26, 0xA0	; 160
     97a:	b0 e4       	ldi	r27, 0x40	; 64
     97c:	8a 83       	std	Y+2, r24	; 0x02
     97e:	9b 83       	std	Y+3, r25	; 0x03
     980:	ac 83       	std	Y+4, r26	; 0x04
     982:	bd 83       	std	Y+5, r27	; 0x05

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     984:	20 e0       	ldi	r18, 0x00	; 0
     986:	30 e0       	ldi	r19, 0x00	; 0
     988:	4a e7       	ldi	r20, 0x7A	; 122
     98a:	55 e4       	ldi	r21, 0x45	; 69
     98c:	6a 81       	ldd	r22, Y+2	; 0x02
     98e:	7b 81       	ldd	r23, Y+3	; 0x03
     990:	8c 81       	ldd	r24, Y+4	; 0x04
     992:	9d 81       	ldd	r25, Y+5	; 0x05
     994:	0e 94 3e 10 	call	0x207c	; 0x207c <__mulsf3>
     998:	dc 01       	movw	r26, r24
     99a:	cb 01       	movw	r24, r22
     99c:	8c 8f       	std	Y+28, r24	; 0x1c
     99e:	9d 8f       	std	Y+29, r25	; 0x1d
     9a0:	ae 8f       	std	Y+30, r26	; 0x1e
     9a2:	bf 8f       	std	Y+31, r27	; 0x1f
	if (__tmp < 1.0)
     9a4:	20 e0       	ldi	r18, 0x00	; 0
     9a6:	30 e0       	ldi	r19, 0x00	; 0
     9a8:	40 e8       	ldi	r20, 0x80	; 128
     9aa:	5f e3       	ldi	r21, 0x3F	; 63
     9ac:	6c 8d       	ldd	r22, Y+28	; 0x1c
     9ae:	7d 8d       	ldd	r23, Y+29	; 0x1d
     9b0:	8e 8d       	ldd	r24, Y+30	; 0x1e
     9b2:	9f 8d       	ldd	r25, Y+31	; 0x1f
     9b4:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <__cmpsf2>
     9b8:	88 23       	and	r24, r24
     9ba:	2c f4       	brge	.+10     	; 0x9c6 <__stack+0x167>
		__ticks = 1;
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	99 a3       	std	Y+33, r25	; 0x21
     9c2:	88 a3       	std	Y+32, r24	; 0x20
     9c4:	3f c0       	rjmp	.+126    	; 0xa44 <__stack+0x1e5>
	else if (__tmp > 65535)
     9c6:	20 e0       	ldi	r18, 0x00	; 0
     9c8:	3f ef       	ldi	r19, 0xFF	; 255
     9ca:	4f e7       	ldi	r20, 0x7F	; 127
     9cc:	57 e4       	ldi	r21, 0x47	; 71
     9ce:	6c 8d       	ldd	r22, Y+28	; 0x1c
     9d0:	7d 8d       	ldd	r23, Y+29	; 0x1d
     9d2:	8e 8d       	ldd	r24, Y+30	; 0x1e
     9d4:	9f 8d       	ldd	r25, Y+31	; 0x1f
     9d6:	0e 94 39 10 	call	0x2072	; 0x2072 <__gesf2>
     9da:	18 16       	cp	r1, r24
     9dc:	4c f5       	brge	.+82     	; 0xa30 <__stack+0x1d1>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     9de:	20 e0       	ldi	r18, 0x00	; 0
     9e0:	30 e0       	ldi	r19, 0x00	; 0
     9e2:	40 e2       	ldi	r20, 0x20	; 32
     9e4:	51 e4       	ldi	r21, 0x41	; 65
     9e6:	6a 81       	ldd	r22, Y+2	; 0x02
     9e8:	7b 81       	ldd	r23, Y+3	; 0x03
     9ea:	8c 81       	ldd	r24, Y+4	; 0x04
     9ec:	9d 81       	ldd	r25, Y+5	; 0x05
     9ee:	0e 94 3e 10 	call	0x207c	; 0x207c <__mulsf3>
     9f2:	dc 01       	movw	r26, r24
     9f4:	cb 01       	movw	r24, r22
     9f6:	bc 01       	movw	r22, r24
     9f8:	cd 01       	movw	r24, r26
     9fa:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <__fixunssfsi>
     9fe:	dc 01       	movw	r26, r24
     a00:	cb 01       	movw	r24, r22
     a02:	99 a3       	std	Y+33, r25	; 0x21
     a04:	88 a3       	std	Y+32, r24	; 0x20
     a06:	0f c0       	rjmp	.+30     	; 0xa26 <__stack+0x1c7>
     a08:	80 e9       	ldi	r24, 0x90	; 144
     a0a:	91 e0       	ldi	r25, 0x01	; 1
     a0c:	9b a3       	std	Y+35, r25	; 0x23
     a0e:	8a a3       	std	Y+34, r24	; 0x22
     a10:	8a a1       	ldd	r24, Y+34	; 0x22
     a12:	9b a1       	ldd	r25, Y+35	; 0x23
     a14:	01 97       	sbiw	r24, 0x01	; 1
     a16:	f1 f7       	brne	.-4      	; 0xa14 <__stack+0x1b5>
     a18:	9b a3       	std	Y+35, r25	; 0x23
     a1a:	8a a3       	std	Y+34, r24	; 0x22
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a1c:	88 a1       	ldd	r24, Y+32	; 0x20
     a1e:	99 a1       	ldd	r25, Y+33	; 0x21
     a20:	01 97       	sbiw	r24, 0x01	; 1
     a22:	99 a3       	std	Y+33, r25	; 0x21
     a24:	88 a3       	std	Y+32, r24	; 0x20
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a26:	88 a1       	ldd	r24, Y+32	; 0x20
     a28:	99 a1       	ldd	r25, Y+33	; 0x21
     a2a:	89 2b       	or	r24, r25
     a2c:	69 f7       	brne	.-38     	; 0xa08 <__stack+0x1a9>
     a2e:	14 c0       	rjmp	.+40     	; 0xa58 <__stack+0x1f9>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a30:	6c 8d       	ldd	r22, Y+28	; 0x1c
     a32:	7d 8d       	ldd	r23, Y+29	; 0x1d
     a34:	8e 8d       	ldd	r24, Y+30	; 0x1e
     a36:	9f 8d       	ldd	r25, Y+31	; 0x1f
     a38:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <__fixunssfsi>
     a3c:	dc 01       	movw	r26, r24
     a3e:	cb 01       	movw	r24, r22
     a40:	99 a3       	std	Y+33, r25	; 0x21
     a42:	88 a3       	std	Y+32, r24	; 0x20
     a44:	88 a1       	ldd	r24, Y+32	; 0x20
     a46:	99 a1       	ldd	r25, Y+33	; 0x21
     a48:	9d a3       	std	Y+37, r25	; 0x25
     a4a:	8c a3       	std	Y+36, r24	; 0x24
     a4c:	8c a1       	ldd	r24, Y+36	; 0x24
     a4e:	9d a1       	ldd	r25, Y+37	; 0x25
     a50:	01 97       	sbiw	r24, 0x01	; 1
     a52:	f1 f7       	brne	.-4      	; 0xa50 <__stack+0x1f1>
     a54:	9d a3       	std	Y+37, r25	; 0x25
     a56:	8c a3       	std	Y+36, r24	; 0x24
LCD_RS_DIR 	|= LCD_RS;  
_delay_ms(15); 
LCD_RS_PORT &= ~LCD_RS; 
LCD_E_PORT &= ~LCD_E;  

for(i = 0; i < 3; i++)
     a58:	89 81       	ldd	r24, Y+1	; 0x01
     a5a:	8f 5f       	subi	r24, 0xFF	; 255
     a5c:	89 83       	std	Y+1, r24	; 0x01
     a5e:	89 81       	ldd	r24, Y+1	; 0x01
     a60:	83 30       	cpi	r24, 0x03	; 3
     a62:	08 f4       	brcc	.+2      	; 0xa66 <__stack+0x207>
     a64:	72 cf       	rjmp	.-284    	; 0x94a <__stack+0xeb>
  _LCD_OutNibble(0x03); 
  LCD_E_PORT &= ~LCD_E; 
  _delay_ms(5); 
  }

LCD_E_PORT |= LCD_E; 
     a66:	8b e3       	ldi	r24, 0x3B	; 59
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	2b e3       	ldi	r18, 0x3B	; 59
     a6c:	30 e0       	ldi	r19, 0x00	; 0
     a6e:	f9 01       	movw	r30, r18
     a70:	20 81       	ld	r18, Z
     a72:	20 64       	ori	r18, 0x40	; 64
     a74:	fc 01       	movw	r30, r24
     a76:	20 83       	st	Z, r18
_LCD_OutNibble(0x02); 
     a78:	82 e0       	ldi	r24, 0x02	; 2
     a7a:	0e 94 4e 01 	call	0x29c	; 0x29c <_LCD_OutNibble>
LCD_E_PORT &= ~LCD_E; 
     a7e:	8b e3       	ldi	r24, 0x3B	; 59
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	2b e3       	ldi	r18, 0x3B	; 59
     a84:	30 e0       	ldi	r19, 0x00	; 0
     a86:	f9 01       	movw	r30, r18
     a88:	20 81       	ld	r18, Z
     a8a:	2f 7b       	andi	r18, 0xBF	; 191
     a8c:	fc 01       	movw	r30, r24
     a8e:	20 83       	st	Z, r18
     a90:	80 e0       	ldi	r24, 0x00	; 0
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	a0 e8       	ldi	r26, 0x80	; 128
     a96:	bf e3       	ldi	r27, 0x3F	; 63
     a98:	8a 87       	std	Y+10, r24	; 0x0a
     a9a:	9b 87       	std	Y+11, r25	; 0x0b
     a9c:	ac 87       	std	Y+12, r26	; 0x0c
     a9e:	bd 87       	std	Y+13, r27	; 0x0d

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     aa0:	20 e0       	ldi	r18, 0x00	; 0
     aa2:	30 e0       	ldi	r19, 0x00	; 0
     aa4:	4a e7       	ldi	r20, 0x7A	; 122
     aa6:	55 e4       	ldi	r21, 0x45	; 69
     aa8:	6a 85       	ldd	r22, Y+10	; 0x0a
     aaa:	7b 85       	ldd	r23, Y+11	; 0x0b
     aac:	8c 85       	ldd	r24, Y+12	; 0x0c
     aae:	9d 85       	ldd	r25, Y+13	; 0x0d
     ab0:	0e 94 3e 10 	call	0x207c	; 0x207c <__mulsf3>
     ab4:	dc 01       	movw	r26, r24
     ab6:	cb 01       	movw	r24, r22
     ab8:	88 ab       	std	Y+48, r24	; 0x30
     aba:	99 ab       	std	Y+49, r25	; 0x31
     abc:	aa ab       	std	Y+50, r26	; 0x32
     abe:	bb ab       	std	Y+51, r27	; 0x33
	if (__tmp < 1.0)
     ac0:	20 e0       	ldi	r18, 0x00	; 0
     ac2:	30 e0       	ldi	r19, 0x00	; 0
     ac4:	40 e8       	ldi	r20, 0x80	; 128
     ac6:	5f e3       	ldi	r21, 0x3F	; 63
     ac8:	68 a9       	ldd	r22, Y+48	; 0x30
     aca:	79 a9       	ldd	r23, Y+49	; 0x31
     acc:	8a a9       	ldd	r24, Y+50	; 0x32
     ace:	9b a9       	ldd	r25, Y+51	; 0x33
     ad0:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <__cmpsf2>
     ad4:	88 23       	and	r24, r24
     ad6:	2c f4       	brge	.+10     	; 0xae2 <__stack+0x283>
		__ticks = 1;
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	9d ab       	std	Y+53, r25	; 0x35
     ade:	8c ab       	std	Y+52, r24	; 0x34
     ae0:	3f c0       	rjmp	.+126    	; 0xb60 <__stack+0x301>
	else if (__tmp > 65535)
     ae2:	20 e0       	ldi	r18, 0x00	; 0
     ae4:	3f ef       	ldi	r19, 0xFF	; 255
     ae6:	4f e7       	ldi	r20, 0x7F	; 127
     ae8:	57 e4       	ldi	r21, 0x47	; 71
     aea:	68 a9       	ldd	r22, Y+48	; 0x30
     aec:	79 a9       	ldd	r23, Y+49	; 0x31
     aee:	8a a9       	ldd	r24, Y+50	; 0x32
     af0:	9b a9       	ldd	r25, Y+51	; 0x33
     af2:	0e 94 39 10 	call	0x2072	; 0x2072 <__gesf2>
     af6:	18 16       	cp	r1, r24
     af8:	4c f5       	brge	.+82     	; 0xb4c <__stack+0x2ed>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     afa:	20 e0       	ldi	r18, 0x00	; 0
     afc:	30 e0       	ldi	r19, 0x00	; 0
     afe:	40 e2       	ldi	r20, 0x20	; 32
     b00:	51 e4       	ldi	r21, 0x41	; 65
     b02:	6a 85       	ldd	r22, Y+10	; 0x0a
     b04:	7b 85       	ldd	r23, Y+11	; 0x0b
     b06:	8c 85       	ldd	r24, Y+12	; 0x0c
     b08:	9d 85       	ldd	r25, Y+13	; 0x0d
     b0a:	0e 94 3e 10 	call	0x207c	; 0x207c <__mulsf3>
     b0e:	dc 01       	movw	r26, r24
     b10:	cb 01       	movw	r24, r22
     b12:	bc 01       	movw	r22, r24
     b14:	cd 01       	movw	r24, r26
     b16:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <__fixunssfsi>
     b1a:	dc 01       	movw	r26, r24
     b1c:	cb 01       	movw	r24, r22
     b1e:	9d ab       	std	Y+53, r25	; 0x35
     b20:	8c ab       	std	Y+52, r24	; 0x34
     b22:	0f c0       	rjmp	.+30     	; 0xb42 <__stack+0x2e3>
     b24:	80 e9       	ldi	r24, 0x90	; 144
     b26:	91 e0       	ldi	r25, 0x01	; 1
     b28:	9f ab       	std	Y+55, r25	; 0x37
     b2a:	8e ab       	std	Y+54, r24	; 0x36
     b2c:	8e a9       	ldd	r24, Y+54	; 0x36
     b2e:	9f a9       	ldd	r25, Y+55	; 0x37
     b30:	01 97       	sbiw	r24, 0x01	; 1
     b32:	f1 f7       	brne	.-4      	; 0xb30 <__stack+0x2d1>
     b34:	9f ab       	std	Y+55, r25	; 0x37
     b36:	8e ab       	std	Y+54, r24	; 0x36
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b38:	8c a9       	ldd	r24, Y+52	; 0x34
     b3a:	9d a9       	ldd	r25, Y+53	; 0x35
     b3c:	01 97       	sbiw	r24, 0x01	; 1
     b3e:	9d ab       	std	Y+53, r25	; 0x35
     b40:	8c ab       	std	Y+52, r24	; 0x34
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b42:	8c a9       	ldd	r24, Y+52	; 0x34
     b44:	9d a9       	ldd	r25, Y+53	; 0x35
     b46:	89 2b       	or	r24, r25
     b48:	69 f7       	brne	.-38     	; 0xb24 <__stack+0x2c5>
     b4a:	14 c0       	rjmp	.+40     	; 0xb74 <__stack+0x315>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     b4c:	68 a9       	ldd	r22, Y+48	; 0x30
     b4e:	79 a9       	ldd	r23, Y+49	; 0x31
     b50:	8a a9       	ldd	r24, Y+50	; 0x32
     b52:	9b a9       	ldd	r25, Y+51	; 0x33
     b54:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <__fixunssfsi>
     b58:	dc 01       	movw	r26, r24
     b5a:	cb 01       	movw	r24, r22
     b5c:	9d ab       	std	Y+53, r25	; 0x35
     b5e:	8c ab       	std	Y+52, r24	; 0x34
     b60:	8c a9       	ldd	r24, Y+52	; 0x34
     b62:	9d a9       	ldd	r25, Y+53	; 0x35
     b64:	99 af       	std	Y+57, r25	; 0x39
     b66:	88 af       	std	Y+56, r24	; 0x38
     b68:	88 ad       	ldd	r24, Y+56	; 0x38
     b6a:	99 ad       	ldd	r25, Y+57	; 0x39
     b6c:	01 97       	sbiw	r24, 0x01	; 1
     b6e:	f1 f7       	brne	.-4      	; 0xb6c <__stack+0x30d>
     b70:	99 af       	std	Y+57, r25	; 0x39
     b72:	88 af       	std	Y+56, r24	; 0x38

_delay_ms(1); 
LCD_WriteCommand(HD44780_FUNCTION_SET | HD44780_FONT5x7 | HD44780_TWO_LINE | HD44780_4_BIT); 
     b74:	88 e2       	ldi	r24, 0x28	; 40
     b76:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <LCD_WriteCommand>
LCD_WriteCommand(HD44780_DISPLAY_ONOFF | HD44780_DISPLAY_OFF); 
     b7a:	88 e0       	ldi	r24, 0x08	; 8
     b7c:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <LCD_WriteCommand>
LCD_WriteCommand(HD44780_CLEAR); 
     b80:	81 e0       	ldi	r24, 0x01	; 1
     b82:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <LCD_WriteCommand>
     b86:	80 e0       	ldi	r24, 0x00	; 0
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	a0 e0       	ldi	r26, 0x00	; 0
     b8c:	b0 e4       	ldi	r27, 0x40	; 64
     b8e:	8e 83       	std	Y+6, r24	; 0x06
     b90:	9f 83       	std	Y+7, r25	; 0x07
     b92:	a8 87       	std	Y+8, r26	; 0x08
     b94:	b9 87       	std	Y+9, r27	; 0x09

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     b96:	20 e0       	ldi	r18, 0x00	; 0
     b98:	30 e0       	ldi	r19, 0x00	; 0
     b9a:	4a e7       	ldi	r20, 0x7A	; 122
     b9c:	55 e4       	ldi	r21, 0x45	; 69
     b9e:	6e 81       	ldd	r22, Y+6	; 0x06
     ba0:	7f 81       	ldd	r23, Y+7	; 0x07
     ba2:	88 85       	ldd	r24, Y+8	; 0x08
     ba4:	99 85       	ldd	r25, Y+9	; 0x09
     ba6:	0e 94 3e 10 	call	0x207c	; 0x207c <__mulsf3>
     baa:	dc 01       	movw	r26, r24
     bac:	cb 01       	movw	r24, r22
     bae:	8e a3       	std	Y+38, r24	; 0x26
     bb0:	9f a3       	std	Y+39, r25	; 0x27
     bb2:	a8 a7       	std	Y+40, r26	; 0x28
     bb4:	b9 a7       	std	Y+41, r27	; 0x29
	if (__tmp < 1.0)
     bb6:	20 e0       	ldi	r18, 0x00	; 0
     bb8:	30 e0       	ldi	r19, 0x00	; 0
     bba:	40 e8       	ldi	r20, 0x80	; 128
     bbc:	5f e3       	ldi	r21, 0x3F	; 63
     bbe:	6e a1       	ldd	r22, Y+38	; 0x26
     bc0:	7f a1       	ldd	r23, Y+39	; 0x27
     bc2:	88 a5       	ldd	r24, Y+40	; 0x28
     bc4:	99 a5       	ldd	r25, Y+41	; 0x29
     bc6:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <__cmpsf2>
     bca:	88 23       	and	r24, r24
     bcc:	2c f4       	brge	.+10     	; 0xbd8 <__stack+0x379>
		__ticks = 1;
     bce:	81 e0       	ldi	r24, 0x01	; 1
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	9b a7       	std	Y+43, r25	; 0x2b
     bd4:	8a a7       	std	Y+42, r24	; 0x2a
     bd6:	3f c0       	rjmp	.+126    	; 0xc56 <__stack+0x3f7>
	else if (__tmp > 65535)
     bd8:	20 e0       	ldi	r18, 0x00	; 0
     bda:	3f ef       	ldi	r19, 0xFF	; 255
     bdc:	4f e7       	ldi	r20, 0x7F	; 127
     bde:	57 e4       	ldi	r21, 0x47	; 71
     be0:	6e a1       	ldd	r22, Y+38	; 0x26
     be2:	7f a1       	ldd	r23, Y+39	; 0x27
     be4:	88 a5       	ldd	r24, Y+40	; 0x28
     be6:	99 a5       	ldd	r25, Y+41	; 0x29
     be8:	0e 94 39 10 	call	0x2072	; 0x2072 <__gesf2>
     bec:	18 16       	cp	r1, r24
     bee:	4c f5       	brge	.+82     	; 0xc42 <__stack+0x3e3>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bf0:	20 e0       	ldi	r18, 0x00	; 0
     bf2:	30 e0       	ldi	r19, 0x00	; 0
     bf4:	40 e2       	ldi	r20, 0x20	; 32
     bf6:	51 e4       	ldi	r21, 0x41	; 65
     bf8:	6e 81       	ldd	r22, Y+6	; 0x06
     bfa:	7f 81       	ldd	r23, Y+7	; 0x07
     bfc:	88 85       	ldd	r24, Y+8	; 0x08
     bfe:	99 85       	ldd	r25, Y+9	; 0x09
     c00:	0e 94 3e 10 	call	0x207c	; 0x207c <__mulsf3>
     c04:	dc 01       	movw	r26, r24
     c06:	cb 01       	movw	r24, r22
     c08:	bc 01       	movw	r22, r24
     c0a:	cd 01       	movw	r24, r26
     c0c:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <__fixunssfsi>
     c10:	dc 01       	movw	r26, r24
     c12:	cb 01       	movw	r24, r22
     c14:	9b a7       	std	Y+43, r25	; 0x2b
     c16:	8a a7       	std	Y+42, r24	; 0x2a
     c18:	0f c0       	rjmp	.+30     	; 0xc38 <__stack+0x3d9>
     c1a:	80 e9       	ldi	r24, 0x90	; 144
     c1c:	91 e0       	ldi	r25, 0x01	; 1
     c1e:	9d a7       	std	Y+45, r25	; 0x2d
     c20:	8c a7       	std	Y+44, r24	; 0x2c
     c22:	8c a5       	ldd	r24, Y+44	; 0x2c
     c24:	9d a5       	ldd	r25, Y+45	; 0x2d
     c26:	01 97       	sbiw	r24, 0x01	; 1
     c28:	f1 f7       	brne	.-4      	; 0xc26 <__stack+0x3c7>
     c2a:	9d a7       	std	Y+45, r25	; 0x2d
     c2c:	8c a7       	std	Y+44, r24	; 0x2c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c2e:	8a a5       	ldd	r24, Y+42	; 0x2a
     c30:	9b a5       	ldd	r25, Y+43	; 0x2b
     c32:	01 97       	sbiw	r24, 0x01	; 1
     c34:	9b a7       	std	Y+43, r25	; 0x2b
     c36:	8a a7       	std	Y+42, r24	; 0x2a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c38:	8a a5       	ldd	r24, Y+42	; 0x2a
     c3a:	9b a5       	ldd	r25, Y+43	; 0x2b
     c3c:	89 2b       	or	r24, r25
     c3e:	69 f7       	brne	.-38     	; 0xc1a <__stack+0x3bb>
     c40:	14 c0       	rjmp	.+40     	; 0xc6a <__stack+0x40b>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c42:	6e a1       	ldd	r22, Y+38	; 0x26
     c44:	7f a1       	ldd	r23, Y+39	; 0x27
     c46:	88 a5       	ldd	r24, Y+40	; 0x28
     c48:	99 a5       	ldd	r25, Y+41	; 0x29
     c4a:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <__fixunssfsi>
     c4e:	dc 01       	movw	r26, r24
     c50:	cb 01       	movw	r24, r22
     c52:	9b a7       	std	Y+43, r25	; 0x2b
     c54:	8a a7       	std	Y+42, r24	; 0x2a
     c56:	8a a5       	ldd	r24, Y+42	; 0x2a
     c58:	9b a5       	ldd	r25, Y+43	; 0x2b
     c5a:	9f a7       	std	Y+47, r25	; 0x2f
     c5c:	8e a7       	std	Y+46, r24	; 0x2e
     c5e:	8e a5       	ldd	r24, Y+46	; 0x2e
     c60:	9f a5       	ldd	r25, Y+47	; 0x2f
     c62:	01 97       	sbiw	r24, 0x01	; 1
     c64:	f1 f7       	brne	.-4      	; 0xc62 <__stack+0x403>
     c66:	9f a7       	std	Y+47, r25	; 0x2f
     c68:	8e a7       	std	Y+46, r24	; 0x2e
_delay_ms(2);
LCD_WriteCommand(HD44780_ENTRY_MODE | HD44780_EM_SHIFT_CURSOR | HD44780_EM_INCREMENT);
     c6a:	86 e0       	ldi	r24, 0x06	; 6
     c6c:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <LCD_WriteCommand>
LCD_WriteCommand(HD44780_DISPLAY_ONOFF | HD44780_DISPLAY_ON | HD44780_CURSOR_OFF | HD44780_CURSOR_NOBLINK);
     c70:	8c e0       	ldi	r24, 0x0C	; 12
     c72:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <LCD_WriteCommand>
}
     c76:	00 00       	nop
     c78:	e9 96       	adiw	r28, 0x39	; 57
     c7a:	0f b6       	in	r0, 0x3f	; 63
     c7c:	f8 94       	cli
     c7e:	de bf       	out	0x3e, r29	; 62
     c80:	0f be       	out	0x3f, r0	; 63
     c82:	cd bf       	out	0x3d, r28	; 61
     c84:	df 91       	pop	r29
     c86:	cf 91       	pop	r28
     c88:	08 95       	ret

00000c8a <TWI_Start>:
		}
	}
	else{
		PreviousState = 0;
	}
}
     c8a:	cf 93       	push	r28
     c8c:	df 93       	push	r29
     c8e:	cd b7       	in	r28, 0x3d	; 61
     c90:	de b7       	in	r29, 0x3e	; 62
     c92:	86 e5       	ldi	r24, 0x56	; 86
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	24 ea       	ldi	r18, 0xA4	; 164
     c98:	fc 01       	movw	r30, r24
     c9a:	20 83       	st	Z, r18
     c9c:	00 00       	nop
     c9e:	86 e5       	ldi	r24, 0x56	; 86
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	fc 01       	movw	r30, r24
     ca4:	80 81       	ld	r24, Z
     ca6:	88 23       	and	r24, r24
     ca8:	d4 f7       	brge	.-12     	; 0xc9e <TWI_Start+0x14>
     caa:	00 00       	nop
     cac:	df 91       	pop	r29
     cae:	cf 91       	pop	r28
     cb0:	08 95       	ret

00000cb2 <TWI_Stop>:
     cb2:	cf 93       	push	r28
     cb4:	df 93       	push	r29
     cb6:	cd b7       	in	r28, 0x3d	; 61
     cb8:	de b7       	in	r29, 0x3e	; 62
     cba:	86 e5       	ldi	r24, 0x56	; 86
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	24 e9       	ldi	r18, 0x94	; 148
     cc0:	fc 01       	movw	r30, r24
     cc2:	20 83       	st	Z, r18
     cc4:	00 00       	nop
     cc6:	86 e5       	ldi	r24, 0x56	; 86
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	fc 01       	movw	r30, r24
     ccc:	80 81       	ld	r24, Z
     cce:	88 2f       	mov	r24, r24
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	80 71       	andi	r24, 0x10	; 16
     cd4:	99 27       	eor	r25, r25
     cd6:	89 2b       	or	r24, r25
     cd8:	b1 f7       	brne	.-20     	; 0xcc6 <TWI_Stop+0x14>
     cda:	00 00       	nop
     cdc:	df 91       	pop	r29
     cde:	cf 91       	pop	r28
     ce0:	08 95       	ret

00000ce2 <TWI_Write>:
     ce2:	cf 93       	push	r28
     ce4:	df 93       	push	r29
     ce6:	1f 92       	push	r1
     ce8:	cd b7       	in	r28, 0x3d	; 61
     cea:	de b7       	in	r29, 0x3e	; 62
     cec:	89 83       	std	Y+1, r24	; 0x01
     cee:	83 e2       	ldi	r24, 0x23	; 35
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	29 81       	ldd	r18, Y+1	; 0x01
     cf4:	fc 01       	movw	r30, r24
     cf6:	20 83       	st	Z, r18
     cf8:	86 e5       	ldi	r24, 0x56	; 86
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	24 e8       	ldi	r18, 0x84	; 132
     cfe:	fc 01       	movw	r30, r24
     d00:	20 83       	st	Z, r18
     d02:	00 00       	nop
     d04:	86 e5       	ldi	r24, 0x56	; 86
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	fc 01       	movw	r30, r24
     d0a:	80 81       	ld	r24, Z
     d0c:	88 23       	and	r24, r24
     d0e:	d4 f7       	brge	.-12     	; 0xd04 <TWI_Write+0x22>
     d10:	81 e2       	ldi	r24, 0x21	; 33
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	fc 01       	movw	r30, r24
     d16:	80 81       	ld	r24, Z
     d18:	21 e0       	ldi	r18, 0x01	; 1
     d1a:	82 31       	cpi	r24, 0x12	; 18
     d1c:	09 f0       	breq	.+2      	; 0xd20 <TWI_Write+0x3e>
     d1e:	20 e0       	ldi	r18, 0x00	; 0
     d20:	81 e2       	ldi	r24, 0x21	; 33
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	fc 01       	movw	r30, r24
     d26:	90 81       	ld	r25, Z
     d28:	81 e0       	ldi	r24, 0x01	; 1
     d2a:	9c 31       	cpi	r25, 0x1C	; 28
     d2c:	09 f0       	breq	.+2      	; 0xd30 <TWI_Write+0x4e>
     d2e:	80 e0       	ldi	r24, 0x00	; 0
     d30:	82 2b       	or	r24, r18
     d32:	88 23       	and	r24, r24
     d34:	11 f0       	breq	.+4      	; 0xd3a <TWI_Write+0x58>
     d36:	80 e0       	ldi	r24, 0x00	; 0
     d38:	01 c0       	rjmp	.+2      	; 0xd3c <TWI_Write+0x5a>
     d3a:	81 e0       	ldi	r24, 0x01	; 1
     d3c:	0f 90       	pop	r0
     d3e:	df 91       	pop	r29
     d40:	cf 91       	pop	r28
     d42:	08 95       	ret

00000d44 <TWI_Read>:
     d44:	cf 93       	push	r28
     d46:	df 93       	push	r29
     d48:	1f 92       	push	r1
     d4a:	cd b7       	in	r28, 0x3d	; 61
     d4c:	de b7       	in	r29, 0x3e	; 62
     d4e:	89 83       	std	Y+1, r24	; 0x01
     d50:	86 e5       	ldi	r24, 0x56	; 86
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	29 81       	ldd	r18, Y+1	; 0x01
     d56:	22 23       	and	r18, r18
     d58:	11 f0       	breq	.+4      	; 0xd5e <TWI_Read+0x1a>
     d5a:	24 ec       	ldi	r18, 0xC4	; 196
     d5c:	01 c0       	rjmp	.+2      	; 0xd60 <TWI_Read+0x1c>
     d5e:	24 e8       	ldi	r18, 0x84	; 132
     d60:	fc 01       	movw	r30, r24
     d62:	20 83       	st	Z, r18
     d64:	00 00       	nop
     d66:	86 e5       	ldi	r24, 0x56	; 86
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	fc 01       	movw	r30, r24
     d6c:	80 81       	ld	r24, Z
     d6e:	88 23       	and	r24, r24
     d70:	d4 f7       	brge	.-12     	; 0xd66 <TWI_Read+0x22>
     d72:	83 e2       	ldi	r24, 0x23	; 35
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	fc 01       	movw	r30, r24
     d78:	80 81       	ld	r24, Z
     d7a:	0f 90       	pop	r0
     d7c:	df 91       	pop	r29
     d7e:	cf 91       	pop	r28
     d80:	08 95       	ret

00000d82 <TWI_Init>:
     d82:	cf 93       	push	r28
     d84:	df 93       	push	r29
     d86:	cd b7       	in	r28, 0x3d	; 61
     d88:	de b7       	in	r29, 0x3e	; 62
     d8a:	80 e2       	ldi	r24, 0x20	; 32
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	24 e6       	ldi	r18, 0x64	; 100
     d90:	fc 01       	movw	r30, r24
     d92:	20 83       	st	Z, r18
     d94:	00 00       	nop
     d96:	df 91       	pop	r29
     d98:	cf 91       	pop	r28
     d9a:	08 95       	ret

00000d9c <SPI_Init>:
     d9c:	cf 93       	push	r28
     d9e:	df 93       	push	r29
     da0:	cd b7       	in	r28, 0x3d	; 61
     da2:	de b7       	in	r29, 0x3e	; 62
     da4:	87 e3       	ldi	r24, 0x37	; 55
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	20 e9       	ldi	r18, 0x90	; 144
     daa:	fc 01       	movw	r30, r24
     dac:	20 83       	st	Z, r18
     dae:	8d e2       	ldi	r24, 0x2D	; 45
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	21 e5       	ldi	r18, 0x51	; 81
     db4:	fc 01       	movw	r30, r24
     db6:	20 83       	st	Z, r18
     db8:	00 00       	nop
     dba:	df 91       	pop	r29
     dbc:	cf 91       	pop	r28
     dbe:	08 95       	ret

00000dc0 <ADC_Init>:
     dc0:	cf 93       	push	r28
     dc2:	df 93       	push	r29
     dc4:	cd b7       	in	r28, 0x3d	; 61
     dc6:	de b7       	in	r29, 0x3e	; 62
     dc8:	87 e2       	ldi	r24, 0x27	; 39
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	20 e4       	ldi	r18, 0x40	; 64
     dce:	fc 01       	movw	r30, r24
     dd0:	20 83       	st	Z, r18
     dd2:	86 e2       	ldi	r24, 0x26	; 38
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	2f e8       	ldi	r18, 0x8F	; 143
     dd8:	fc 01       	movw	r30, r24
     dda:	20 83       	st	Z, r18
     ddc:	86 e2       	ldi	r24, 0x26	; 38
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	26 e2       	ldi	r18, 0x26	; 38
     de2:	30 e0       	ldi	r19, 0x00	; 0
     de4:	f9 01       	movw	r30, r18
     de6:	20 81       	ld	r18, Z
     de8:	20 66       	ori	r18, 0x60	; 96
     dea:	fc 01       	movw	r30, r24
     dec:	20 83       	st	Z, r18
     dee:	00 00       	nop
     df0:	df 91       	pop	r29
     df2:	cf 91       	pop	r28
     df4:	08 95       	ret

00000df6 <Timer1_Init>:
     df6:	cf 93       	push	r28
     df8:	df 93       	push	r29
     dfa:	cd b7       	in	r28, 0x3d	; 61
     dfc:	de b7       	in	r29, 0x3e	; 62
     dfe:	8e e4       	ldi	r24, 0x4E	; 78
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	2e e4       	ldi	r18, 0x4E	; 78
     e04:	30 e0       	ldi	r19, 0x00	; 0
     e06:	f9 01       	movw	r30, r18
     e08:	20 81       	ld	r18, Z
     e0a:	2d 60       	ori	r18, 0x0D	; 13
     e0c:	fc 01       	movw	r30, r24
     e0e:	20 83       	st	Z, r18
     e10:	89 e5       	ldi	r24, 0x59	; 89
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	29 e5       	ldi	r18, 0x59	; 89
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	f9 01       	movw	r30, r18
     e1a:	20 81       	ld	r18, Z
     e1c:	20 61       	ori	r18, 0x10	; 16
     e1e:	fc 01       	movw	r30, r24
     e20:	20 83       	st	Z, r18
     e22:	8a e4       	ldi	r24, 0x4A	; 74
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	2b e1       	ldi	r18, 0x1B	; 27
     e28:	36 e0       	ldi	r19, 0x06	; 6
     e2a:	fc 01       	movw	r30, r24
     e2c:	31 83       	std	Z+1, r19	; 0x01
     e2e:	20 83       	st	Z, r18
     e30:	00 00       	nop
     e32:	df 91       	pop	r29
     e34:	cf 91       	pop	r28
     e36:	08 95       	ret

00000e38 <USART_Int_Init>:
     e38:	cf 93       	push	r28
     e3a:	df 93       	push	r29
     e3c:	cd b7       	in	r28, 0x3d	; 61
     e3e:	de b7       	in	r29, 0x3e	; 62
     e40:	8a e2       	ldi	r24, 0x2A	; 42
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	2a e2       	ldi	r18, 0x2A	; 42
     e46:	30 e0       	ldi	r19, 0x00	; 0
     e48:	f9 01       	movw	r30, r18
     e4a:	20 81       	ld	r18, Z
     e4c:	28 69       	ori	r18, 0x98	; 152
     e4e:	fc 01       	movw	r30, r24
     e50:	20 83       	st	Z, r18
     e52:	00 00       	nop
     e54:	df 91       	pop	r29
     e56:	cf 91       	pop	r28
     e58:	08 95       	ret

00000e5a <SPI_Transmit>:
     e5a:	cf 93       	push	r28
     e5c:	df 93       	push	r29
     e5e:	1f 92       	push	r1
     e60:	cd b7       	in	r28, 0x3d	; 61
     e62:	de b7       	in	r29, 0x3e	; 62
     e64:	89 83       	std	Y+1, r24	; 0x01
     e66:	8f e2       	ldi	r24, 0x2F	; 47
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	29 81       	ldd	r18, Y+1	; 0x01
     e6c:	fc 01       	movw	r30, r24
     e6e:	20 83       	st	Z, r18
     e70:	00 00       	nop
     e72:	8e e2       	ldi	r24, 0x2E	; 46
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	fc 01       	movw	r30, r24
     e78:	80 81       	ld	r24, Z
     e7a:	88 23       	and	r24, r24
     e7c:	d4 f7       	brge	.-12     	; 0xe72 <SPI_Transmit+0x18>
     e7e:	8f e2       	ldi	r24, 0x2F	; 47
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	fc 01       	movw	r30, r24
     e84:	80 81       	ld	r24, Z
     e86:	0f 90       	pop	r0
     e88:	df 91       	pop	r29
     e8a:	cf 91       	pop	r28
     e8c:	08 95       	ret

00000e8e <adc_read>:
     e8e:	cf 93       	push	r28
     e90:	df 93       	push	r29
     e92:	cd b7       	in	r28, 0x3d	; 61
     e94:	de b7       	in	r29, 0x3e	; 62
     e96:	84 e2       	ldi	r24, 0x24	; 36
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	fc 01       	movw	r30, r24
     e9c:	80 81       	ld	r24, Z
     e9e:	88 2f       	mov	r24, r24
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	90 93 b5 00 	sts	0x00B5, r25	; 0x8000b5 <W+0x1>
     ea6:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <W>
     eaa:	85 e2       	ldi	r24, 0x25	; 37
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	fc 01       	movw	r30, r24
     eb0:	80 81       	ld	r24, Z
     eb2:	88 2f       	mov	r24, r24
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	98 2f       	mov	r25, r24
     eb8:	88 27       	eor	r24, r24
     eba:	9c 01       	movw	r18, r24
     ebc:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <W>
     ec0:	90 91 b5 00 	lds	r25, 0x00B5	; 0x8000b5 <W+0x1>
     ec4:	82 2b       	or	r24, r18
     ec6:	93 2b       	or	r25, r19
     ec8:	90 93 b5 00 	sts	0x00B5, r25	; 0x8000b5 <W+0x1>
     ecc:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <W>
     ed0:	20 91 b4 00 	lds	r18, 0x00B4	; 0x8000b4 <W>
     ed4:	30 91 b5 00 	lds	r19, 0x00B5	; 0x8000b5 <W+0x1>
     ed8:	42 e3       	ldi	r20, 0x32	; 50
     eda:	42 9f       	mul	r20, r18
     edc:	c0 01       	movw	r24, r0
     ede:	43 9f       	mul	r20, r19
     ee0:	90 0d       	add	r25, r0
     ee2:	11 24       	eor	r1, r1
     ee4:	89 2f       	mov	r24, r25
     ee6:	99 27       	eor	r25, r25
     ee8:	86 95       	lsr	r24
     eea:	86 95       	lsr	r24
     eec:	90 93 b7 00 	sts	0x00B7, r25	; 0x8000b7 <adc+0x1>
     ef0:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <adc>
     ef4:	00 00       	nop
     ef6:	df 91       	pop	r29
     ef8:	cf 91       	pop	r28
     efa:	08 95       	ret

00000efc <setTime>:
     efc:	cf 93       	push	r28
     efe:	df 93       	push	r29
     f00:	cd b7       	in	r28, 0x3d	; 61
     f02:	de b7       	in	r29, 0x3e	; 62
     f04:	68 97       	sbiw	r28, 0x18	; 24
     f06:	0f b6       	in	r0, 0x3f	; 63
     f08:	f8 94       	cli
     f0a:	de bf       	out	0x3e, r29	; 62
     f0c:	0f be       	out	0x3f, r0	; 63
     f0e:	cd bf       	out	0x3d, r28	; 61
     f10:	9c 8b       	std	Y+20, r25	; 0x14
     f12:	8b 8b       	std	Y+19, r24	; 0x13
     f14:	7e 8b       	std	Y+22, r23	; 0x16
     f16:	6d 8b       	std	Y+21, r22	; 0x15
     f18:	58 8f       	std	Y+24, r21	; 0x18
     f1a:	4f 8b       	std	Y+23, r20	; 0x17
     f1c:	8b 89       	ldd	r24, Y+19	; 0x13
     f1e:	9c 89       	ldd	r25, Y+20	; 0x14
     f20:	2a e0       	ldi	r18, 0x0A	; 10
     f22:	30 e0       	ldi	r19, 0x00	; 0
     f24:	b9 01       	movw	r22, r18
     f26:	0e 94 bf 10 	call	0x217e	; 0x217e <__divmodhi4>
     f2a:	9a 83       	std	Y+2, r25	; 0x02
     f2c:	89 83       	std	Y+1, r24	; 0x01
     f2e:	2b 89       	ldd	r18, Y+19	; 0x13
     f30:	3c 89       	ldd	r19, Y+20	; 0x14
     f32:	89 81       	ldd	r24, Y+1	; 0x01
     f34:	9a 81       	ldd	r25, Y+2	; 0x02
     f36:	a9 01       	movw	r20, r18
     f38:	48 1b       	sub	r20, r24
     f3a:	59 0b       	sbc	r21, r25
     f3c:	ca 01       	movw	r24, r20
     f3e:	2a e0       	ldi	r18, 0x0A	; 10
     f40:	30 e0       	ldi	r19, 0x00	; 0
     f42:	b9 01       	movw	r22, r18
     f44:	0e 94 bf 10 	call	0x217e	; 0x217e <__divmodhi4>
     f48:	cb 01       	movw	r24, r22
     f4a:	9c 83       	std	Y+4, r25	; 0x04
     f4c:	8b 83       	std	Y+3, r24	; 0x03
     f4e:	1e 82       	std	Y+6, r1	; 0x06
     f50:	1d 82       	std	Y+5, r1	; 0x05
     f52:	8b 81       	ldd	r24, Y+3	; 0x03
     f54:	9c 81       	ldd	r25, Y+4	; 0x04
     f56:	82 95       	swap	r24
     f58:	92 95       	swap	r25
     f5a:	90 7f       	andi	r25, 0xF0	; 240
     f5c:	98 27       	eor	r25, r24
     f5e:	80 7f       	andi	r24, 0xF0	; 240
     f60:	98 27       	eor	r25, r24
     f62:	9c 83       	std	Y+4, r25	; 0x04
     f64:	8b 83       	std	Y+3, r24	; 0x03
     f66:	2b 81       	ldd	r18, Y+3	; 0x03
     f68:	3c 81       	ldd	r19, Y+4	; 0x04
     f6a:	89 81       	ldd	r24, Y+1	; 0x01
     f6c:	9a 81       	ldd	r25, Y+2	; 0x02
     f6e:	82 0f       	add	r24, r18
     f70:	93 1f       	adc	r25, r19
     f72:	9e 83       	std	Y+6, r25	; 0x06
     f74:	8d 83       	std	Y+5, r24	; 0x05
     f76:	8d 89       	ldd	r24, Y+21	; 0x15
     f78:	9e 89       	ldd	r25, Y+22	; 0x16
     f7a:	2a e0       	ldi	r18, 0x0A	; 10
     f7c:	30 e0       	ldi	r19, 0x00	; 0
     f7e:	b9 01       	movw	r22, r18
     f80:	0e 94 bf 10 	call	0x217e	; 0x217e <__divmodhi4>
     f84:	98 87       	std	Y+8, r25	; 0x08
     f86:	8f 83       	std	Y+7, r24	; 0x07
     f88:	2d 89       	ldd	r18, Y+21	; 0x15
     f8a:	3e 89       	ldd	r19, Y+22	; 0x16
     f8c:	8f 81       	ldd	r24, Y+7	; 0x07
     f8e:	98 85       	ldd	r25, Y+8	; 0x08
     f90:	a9 01       	movw	r20, r18
     f92:	48 1b       	sub	r20, r24
     f94:	59 0b       	sbc	r21, r25
     f96:	ca 01       	movw	r24, r20
     f98:	2a e0       	ldi	r18, 0x0A	; 10
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	b9 01       	movw	r22, r18
     f9e:	0e 94 bf 10 	call	0x217e	; 0x217e <__divmodhi4>
     fa2:	cb 01       	movw	r24, r22
     fa4:	9a 87       	std	Y+10, r25	; 0x0a
     fa6:	89 87       	std	Y+9, r24	; 0x09
     fa8:	1c 86       	std	Y+12, r1	; 0x0c
     faa:	1b 86       	std	Y+11, r1	; 0x0b
     fac:	89 85       	ldd	r24, Y+9	; 0x09
     fae:	9a 85       	ldd	r25, Y+10	; 0x0a
     fb0:	82 95       	swap	r24
     fb2:	92 95       	swap	r25
     fb4:	90 7f       	andi	r25, 0xF0	; 240
     fb6:	98 27       	eor	r25, r24
     fb8:	80 7f       	andi	r24, 0xF0	; 240
     fba:	98 27       	eor	r25, r24
     fbc:	9a 87       	std	Y+10, r25	; 0x0a
     fbe:	89 87       	std	Y+9, r24	; 0x09
     fc0:	29 85       	ldd	r18, Y+9	; 0x09
     fc2:	3a 85       	ldd	r19, Y+10	; 0x0a
     fc4:	8f 81       	ldd	r24, Y+7	; 0x07
     fc6:	98 85       	ldd	r25, Y+8	; 0x08
     fc8:	82 0f       	add	r24, r18
     fca:	93 1f       	adc	r25, r19
     fcc:	9c 87       	std	Y+12, r25	; 0x0c
     fce:	8b 87       	std	Y+11, r24	; 0x0b
     fd0:	8f 89       	ldd	r24, Y+23	; 0x17
     fd2:	98 8d       	ldd	r25, Y+24	; 0x18
     fd4:	2a e0       	ldi	r18, 0x0A	; 10
     fd6:	30 e0       	ldi	r19, 0x00	; 0
     fd8:	b9 01       	movw	r22, r18
     fda:	0e 94 bf 10 	call	0x217e	; 0x217e <__divmodhi4>
     fde:	9e 87       	std	Y+14, r25	; 0x0e
     fe0:	8d 87       	std	Y+13, r24	; 0x0d
     fe2:	2f 89       	ldd	r18, Y+23	; 0x17
     fe4:	38 8d       	ldd	r19, Y+24	; 0x18
     fe6:	8d 85       	ldd	r24, Y+13	; 0x0d
     fe8:	9e 85       	ldd	r25, Y+14	; 0x0e
     fea:	a9 01       	movw	r20, r18
     fec:	48 1b       	sub	r20, r24
     fee:	59 0b       	sbc	r21, r25
     ff0:	ca 01       	movw	r24, r20
     ff2:	2a e0       	ldi	r18, 0x0A	; 10
     ff4:	30 e0       	ldi	r19, 0x00	; 0
     ff6:	b9 01       	movw	r22, r18
     ff8:	0e 94 bf 10 	call	0x217e	; 0x217e <__divmodhi4>
     ffc:	cb 01       	movw	r24, r22
     ffe:	98 8b       	std	Y+16, r25	; 0x10
    1000:	8f 87       	std	Y+15, r24	; 0x0f
    1002:	1a 8a       	std	Y+18, r1	; 0x12
    1004:	19 8a       	std	Y+17, r1	; 0x11
    1006:	8f 85       	ldd	r24, Y+15	; 0x0f
    1008:	98 89       	ldd	r25, Y+16	; 0x10
    100a:	82 95       	swap	r24
    100c:	92 95       	swap	r25
    100e:	90 7f       	andi	r25, 0xF0	; 240
    1010:	98 27       	eor	r25, r24
    1012:	80 7f       	andi	r24, 0xF0	; 240
    1014:	98 27       	eor	r25, r24
    1016:	98 8b       	std	Y+16, r25	; 0x10
    1018:	8f 87       	std	Y+15, r24	; 0x0f
    101a:	2f 85       	ldd	r18, Y+15	; 0x0f
    101c:	38 89       	ldd	r19, Y+16	; 0x10
    101e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1020:	9e 85       	ldd	r25, Y+14	; 0x0e
    1022:	82 0f       	add	r24, r18
    1024:	93 1f       	adc	r25, r19
    1026:	9a 8b       	std	Y+18, r25	; 0x12
    1028:	89 8b       	std	Y+17, r24	; 0x11
    102a:	0e 94 45 06 	call	0xc8a	; 0xc8a <TWI_Start>
    102e:	80 ed       	ldi	r24, 0xD0	; 208
    1030:	0e 94 71 06 	call	0xce2	; 0xce2 <TWI_Write>
    1034:	80 e0       	ldi	r24, 0x00	; 0
    1036:	0e 94 71 06 	call	0xce2	; 0xce2 <TWI_Write>
    103a:	89 89       	ldd	r24, Y+17	; 0x11
    103c:	0e 94 71 06 	call	0xce2	; 0xce2 <TWI_Write>
    1040:	8b 85       	ldd	r24, Y+11	; 0x0b
    1042:	0e 94 71 06 	call	0xce2	; 0xce2 <TWI_Write>
    1046:	8d 81       	ldd	r24, Y+5	; 0x05
    1048:	0e 94 71 06 	call	0xce2	; 0xce2 <TWI_Write>
    104c:	0e 94 59 06 	call	0xcb2	; 0xcb2 <TWI_Stop>
    1050:	00 00       	nop
    1052:	68 96       	adiw	r28, 0x18	; 24
    1054:	0f b6       	in	r0, 0x3f	; 63
    1056:	f8 94       	cli
    1058:	de bf       	out	0x3e, r29	; 62
    105a:	0f be       	out	0x3f, r0	; 63
    105c:	cd bf       	out	0x3d, r28	; 61
    105e:	df 91       	pop	r29
    1060:	cf 91       	pop	r28
    1062:	08 95       	ret

00001064 <getTime>:
    1064:	cf 93       	push	r28
    1066:	df 93       	push	r29
    1068:	00 d0       	rcall	.+0      	; 0x106a <getTime+0x6>
    106a:	00 d0       	rcall	.+0      	; 0x106c <getTime+0x8>
    106c:	00 d0       	rcall	.+0      	; 0x106e <getTime+0xa>
    106e:	cd b7       	in	r28, 0x3d	; 61
    1070:	de b7       	in	r29, 0x3e	; 62
    1072:	9a 83       	std	Y+2, r25	; 0x02
    1074:	89 83       	std	Y+1, r24	; 0x01
    1076:	7c 83       	std	Y+4, r23	; 0x04
    1078:	6b 83       	std	Y+3, r22	; 0x03
    107a:	5e 83       	std	Y+6, r21	; 0x06
    107c:	4d 83       	std	Y+5, r20	; 0x05
    107e:	0e 94 45 06 	call	0xc8a	; 0xc8a <TWI_Start>
    1082:	80 ed       	ldi	r24, 0xD0	; 208
    1084:	0e 94 71 06 	call	0xce2	; 0xce2 <TWI_Write>
    1088:	80 e0       	ldi	r24, 0x00	; 0
    108a:	0e 94 71 06 	call	0xce2	; 0xce2 <TWI_Write>
    108e:	0e 94 45 06 	call	0xc8a	; 0xc8a <TWI_Start>
    1092:	81 ed       	ldi	r24, 0xD1	; 209
    1094:	0e 94 71 06 	call	0xce2	; 0xce2 <TWI_Write>
    1098:	81 e0       	ldi	r24, 0x01	; 1
    109a:	0e 94 a2 06 	call	0xd44	; 0xd44 <TWI_Read>
    109e:	28 2f       	mov	r18, r24
    10a0:	30 e0       	ldi	r19, 0x00	; 0
    10a2:	8d 81       	ldd	r24, Y+5	; 0x05
    10a4:	9e 81       	ldd	r25, Y+6	; 0x06
    10a6:	fc 01       	movw	r30, r24
    10a8:	31 83       	std	Z+1, r19	; 0x01
    10aa:	20 83       	st	Z, r18
    10ac:	81 e0       	ldi	r24, 0x01	; 1
    10ae:	0e 94 a2 06 	call	0xd44	; 0xd44 <TWI_Read>
    10b2:	28 2f       	mov	r18, r24
    10b4:	30 e0       	ldi	r19, 0x00	; 0
    10b6:	8b 81       	ldd	r24, Y+3	; 0x03
    10b8:	9c 81       	ldd	r25, Y+4	; 0x04
    10ba:	fc 01       	movw	r30, r24
    10bc:	31 83       	std	Z+1, r19	; 0x01
    10be:	20 83       	st	Z, r18
    10c0:	80 e0       	ldi	r24, 0x00	; 0
    10c2:	0e 94 a2 06 	call	0xd44	; 0xd44 <TWI_Read>
    10c6:	28 2f       	mov	r18, r24
    10c8:	30 e0       	ldi	r19, 0x00	; 0
    10ca:	89 81       	ldd	r24, Y+1	; 0x01
    10cc:	9a 81       	ldd	r25, Y+2	; 0x02
    10ce:	fc 01       	movw	r30, r24
    10d0:	31 83       	std	Z+1, r19	; 0x01
    10d2:	20 83       	st	Z, r18
    10d4:	0e 94 59 06 	call	0xcb2	; 0xcb2 <TWI_Stop>
    10d8:	00 00       	nop
    10da:	26 96       	adiw	r28, 0x06	; 6
    10dc:	0f b6       	in	r0, 0x3f	; 63
    10de:	f8 94       	cli
    10e0:	de bf       	out	0x3e, r29	; 62
    10e2:	0f be       	out	0x3f, r0	; 63
    10e4:	cd bf       	out	0x3d, r28	; 61
    10e6:	df 91       	pop	r29
    10e8:	cf 91       	pop	r28
    10ea:	08 95       	ret

000010ec <getTemp>:
    10ec:	cf 93       	push	r28
    10ee:	df 93       	push	r29
    10f0:	cd b7       	in	r28, 0x3d	; 61
    10f2:	de b7       	in	r29, 0x3e	; 62
    10f4:	28 97       	sbiw	r28, 0x08	; 8
    10f6:	0f b6       	in	r0, 0x3f	; 63
    10f8:	f8 94       	cli
    10fa:	de bf       	out	0x3e, r29	; 62
    10fc:	0f be       	out	0x3f, r0	; 63
    10fe:	cd bf       	out	0x3d, r28	; 61
    1100:	98 87       	std	Y+8, r25	; 0x08
    1102:	8f 83       	std	Y+7, r24	; 0x07
    1104:	88 e3       	ldi	r24, 0x38	; 56
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	28 e3       	ldi	r18, 0x38	; 56
    110a:	30 e0       	ldi	r19, 0x00	; 0
    110c:	f9 01       	movw	r30, r18
    110e:	20 81       	ld	r18, Z
    1110:	2f 7e       	andi	r18, 0xEF	; 239
    1112:	fc 01       	movw	r30, r24
    1114:	20 83       	st	Z, r18
    1116:	80 e0       	ldi	r24, 0x00	; 0
    1118:	0e 94 2d 07 	call	0xe5a	; 0xe5a <SPI_Transmit>
    111c:	88 2f       	mov	r24, r24
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	9a 83       	std	Y+2, r25	; 0x02
    1122:	89 83       	std	Y+1, r24	; 0x01
    1124:	80 e0       	ldi	r24, 0x00	; 0
    1126:	0e 94 2d 07 	call	0xe5a	; 0xe5a <SPI_Transmit>
    112a:	88 2f       	mov	r24, r24
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	9c 83       	std	Y+4, r25	; 0x04
    1130:	8b 83       	std	Y+3, r24	; 0x03
    1132:	88 e3       	ldi	r24, 0x38	; 56
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	28 e3       	ldi	r18, 0x38	; 56
    1138:	30 e0       	ldi	r19, 0x00	; 0
    113a:	f9 01       	movw	r30, r18
    113c:	20 81       	ld	r18, Z
    113e:	20 61       	ori	r18, 0x10	; 16
    1140:	fc 01       	movw	r30, r24
    1142:	20 83       	st	Z, r18
    1144:	89 81       	ldd	r24, Y+1	; 0x01
    1146:	9a 81       	ldd	r25, Y+2	; 0x02
    1148:	98 2f       	mov	r25, r24
    114a:	88 27       	eor	r24, r24
    114c:	9a 83       	std	Y+2, r25	; 0x02
    114e:	89 83       	std	Y+1, r24	; 0x01
    1150:	8b 81       	ldd	r24, Y+3	; 0x03
    1152:	9c 81       	ldd	r25, Y+4	; 0x04
    1154:	07 97       	sbiw	r24, 0x07	; 7
    1156:	9c 83       	std	Y+4, r25	; 0x04
    1158:	8b 83       	std	Y+3, r24	; 0x03
    115a:	29 81       	ldd	r18, Y+1	; 0x01
    115c:	3a 81       	ldd	r19, Y+2	; 0x02
    115e:	8b 81       	ldd	r24, Y+3	; 0x03
    1160:	9c 81       	ldd	r25, Y+4	; 0x04
    1162:	82 0f       	add	r24, r18
    1164:	93 1f       	adc	r25, r19
    1166:	9a 83       	std	Y+2, r25	; 0x02
    1168:	89 83       	std	Y+1, r24	; 0x01
    116a:	89 81       	ldd	r24, Y+1	; 0x01
    116c:	9a 81       	ldd	r25, Y+2	; 0x02
    116e:	95 95       	asr	r25
    1170:	87 95       	ror	r24
    1172:	95 95       	asr	r25
    1174:	87 95       	ror	r24
    1176:	95 95       	asr	r25
    1178:	87 95       	ror	r24
    117a:	9a 83       	std	Y+2, r25	; 0x02
    117c:	89 83       	std	Y+1, r24	; 0x01
    117e:	89 81       	ldd	r24, Y+1	; 0x01
    1180:	9a 81       	ldd	r25, Y+2	; 0x02
    1182:	9e 83       	std	Y+6, r25	; 0x06
    1184:	8d 83       	std	Y+5, r24	; 0x05
    1186:	8d 81       	ldd	r24, Y+5	; 0x05
    1188:	9e 81       	ldd	r25, Y+6	; 0x06
    118a:	09 2e       	mov	r0, r25
    118c:	00 0c       	add	r0, r0
    118e:	aa 0b       	sbc	r26, r26
    1190:	bb 0b       	sbc	r27, r27
    1192:	bc 01       	movw	r22, r24
    1194:	cd 01       	movw	r24, r26
    1196:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <__floatsisf>
    119a:	dc 01       	movw	r26, r24
    119c:	cb 01       	movw	r24, r22
    119e:	20 e0       	ldi	r18, 0x00	; 0
    11a0:	30 e0       	ldi	r19, 0x00	; 0
    11a2:	40 e2       	ldi	r20, 0x20	; 32
    11a4:	5f e3       	ldi	r21, 0x3F	; 63
    11a6:	bc 01       	movw	r22, r24
    11a8:	cd 01       	movw	r24, r26
    11aa:	0e 94 3e 10 	call	0x207c	; 0x207c <__mulsf3>
    11ae:	dc 01       	movw	r26, r24
    11b0:	cb 01       	movw	r24, r22
    11b2:	bc 01       	movw	r22, r24
    11b4:	cd 01       	movw	r24, r26
    11b6:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <__fixsfsi>
    11ba:	dc 01       	movw	r26, r24
    11bc:	cb 01       	movw	r24, r22
    11be:	9e 83       	std	Y+6, r25	; 0x06
    11c0:	8d 83       	std	Y+5, r24	; 0x05
    11c2:	8f 81       	ldd	r24, Y+7	; 0x07
    11c4:	98 85       	ldd	r25, Y+8	; 0x08
    11c6:	89 2b       	or	r24, r25
    11c8:	19 f4       	brne	.+6      	; 0x11d0 <getTemp+0xe4>
    11ca:	8d 81       	ldd	r24, Y+5	; 0x05
    11cc:	9e 81       	ldd	r25, Y+6	; 0x06
    11ce:	1f c0       	rjmp	.+62     	; 0x120e <getTemp+0x122>
    11d0:	8f 81       	ldd	r24, Y+7	; 0x07
    11d2:	98 85       	ldd	r25, Y+8	; 0x08
    11d4:	01 97       	sbiw	r24, 0x01	; 1
    11d6:	b9 f4       	brne	.+46     	; 0x1206 <getTemp+0x11a>
    11d8:	2d 81       	ldd	r18, Y+5	; 0x05
    11da:	3e 81       	ldd	r19, Y+6	; 0x06
    11dc:	c9 01       	movw	r24, r18
    11de:	88 0f       	add	r24, r24
    11e0:	99 1f       	adc	r25, r25
    11e2:	88 0f       	add	r24, r24
    11e4:	99 1f       	adc	r25, r25
    11e6:	88 0f       	add	r24, r24
    11e8:	99 1f       	adc	r25, r25
    11ea:	82 0f       	add	r24, r18
    11ec:	93 1f       	adc	r25, r19
    11ee:	25 e0       	ldi	r18, 0x05	; 5
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	b9 01       	movw	r22, r18
    11f4:	0e 94 bf 10 	call	0x217e	; 0x217e <__divmodhi4>
    11f8:	cb 01       	movw	r24, r22
    11fa:	80 96       	adiw	r24, 0x20	; 32
    11fc:	9e 83       	std	Y+6, r25	; 0x06
    11fe:	8d 83       	std	Y+5, r24	; 0x05
    1200:	8d 81       	ldd	r24, Y+5	; 0x05
    1202:	9e 81       	ldd	r25, Y+6	; 0x06
    1204:	04 c0       	rjmp	.+8      	; 0x120e <getTemp+0x122>
    1206:	1e 82       	std	Y+6, r1	; 0x06
    1208:	1d 82       	std	Y+5, r1	; 0x05
    120a:	8d 81       	ldd	r24, Y+5	; 0x05
    120c:	9e 81       	ldd	r25, Y+6	; 0x06
    120e:	28 96       	adiw	r28, 0x08	; 8
    1210:	0f b6       	in	r0, 0x3f	; 63
    1212:	f8 94       	cli
    1214:	de bf       	out	0x3e, r29	; 62
    1216:	0f be       	out	0x3f, r0	; 63
    1218:	cd bf       	out	0x3d, r28	; 61
    121a:	df 91       	pop	r29
    121c:	cf 91       	pop	r28
    121e:	08 95       	ret

00001220 <displayData>:
    1220:	cf 93       	push	r28
    1222:	df 93       	push	r29
    1224:	00 d0       	rcall	.+0      	; 0x1226 <displayData+0x6>
    1226:	00 d0       	rcall	.+0      	; 0x1228 <displayData+0x8>
    1228:	00 d0       	rcall	.+0      	; 0x122a <displayData+0xa>
    122a:	cd b7       	in	r28, 0x3d	; 61
    122c:	de b7       	in	r29, 0x3e	; 62
    122e:	9a 83       	std	Y+2, r25	; 0x02
    1230:	89 83       	std	Y+1, r24	; 0x01
    1232:	7c 83       	std	Y+4, r23	; 0x04
    1234:	6b 83       	std	Y+3, r22	; 0x03
    1236:	5e 83       	std	Y+6, r21	; 0x06
    1238:	4d 83       	std	Y+5, r20	; 0x05
    123a:	0e 94 56 03 	call	0x6ac	; 0x6ac <LCD_Clear>
    123e:	89 81       	ldd	r24, Y+1	; 0x01
    1240:	9a 81       	ldd	r25, Y+2	; 0x02
    1242:	82 30       	cpi	r24, 0x02	; 2
    1244:	91 05       	cpc	r25, r1
    1246:	09 f4       	brne	.+2      	; 0x124a <displayData+0x2a>
    1248:	87 c0       	rjmp	.+270    	; 0x1358 <displayData+0x138>
    124a:	83 30       	cpi	r24, 0x03	; 3
    124c:	91 05       	cpc	r25, r1
    124e:	09 f4       	brne	.+2      	; 0x1252 <displayData+0x32>
    1250:	d6 c0       	rjmp	.+428    	; 0x13fe <displayData+0x1de>
    1252:	01 97       	sbiw	r24, 0x01	; 1
    1254:	09 f0       	breq	.+2      	; 0x1258 <displayData+0x38>
    1256:	d9 c1       	rjmp	.+946    	; 0x160a <displayData+0x3ea>
    1258:	9d 81       	ldd	r25, Y+5	; 0x05
    125a:	8b 81       	ldd	r24, Y+3	; 0x03
    125c:	69 2f       	mov	r22, r25
    125e:	0e 94 3e 03 	call	0x67c	; 0x67c <LCD_GoTo>
    1262:	82 e6       	ldi	r24, 0x62	; 98
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	0e 94 1f 03 	call	0x63e	; 0x63e <LCD_WriteText>
    126a:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <adc>
    126e:	90 91 b7 00 	lds	r25, 0x00B7	; 0x8000b7 <adc+0x1>
    1272:	0a 97       	sbiw	r24, 0x0a	; 10
    1274:	e0 f1       	brcs	.+120    	; 0x12ee <displayData+0xce>
    1276:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <adc>
    127a:	90 91 b7 00 	lds	r25, 0x00B7	; 0x8000b7 <adc+0x1>
    127e:	4a e0       	ldi	r20, 0x0A	; 10
    1280:	50 e0       	ldi	r21, 0x00	; 0
    1282:	64 e4       	ldi	r22, 0x44	; 68
    1284:	71 e0       	ldi	r23, 0x01	; 1
    1286:	0e 94 fe 10 	call	0x21fc	; 0x21fc <itoa>
    128a:	8d e0       	ldi	r24, 0x0D	; 13
    128c:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <uartAddToTxBuffer>
    1290:	8a e0       	ldi	r24, 0x0A	; 10
    1292:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <uartAddToTxBuffer>
    1296:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <VoltageString>
    129a:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <uartAddToTxBuffer>
    129e:	8e e2       	ldi	r24, 0x2E	; 46
    12a0:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <uartAddToTxBuffer>
    12a4:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <VoltageString+0x1>
    12a8:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <uartAddToTxBuffer>
    12ac:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <uartSendTxBuffer>
    12b0:	9d 81       	ldd	r25, Y+5	; 0x05
    12b2:	8b 81       	ldd	r24, Y+3	; 0x03
    12b4:	87 5f       	subi	r24, 0xF7	; 247
    12b6:	69 2f       	mov	r22, r25
    12b8:	0e 94 3e 03 	call	0x67c	; 0x67c <LCD_GoTo>
    12bc:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <VoltageString>
    12c0:	0e 94 08 03 	call	0x610	; 0x610 <LCD_WriteData>
    12c4:	9d 81       	ldd	r25, Y+5	; 0x05
    12c6:	8b 81       	ldd	r24, Y+3	; 0x03
    12c8:	86 5f       	subi	r24, 0xF6	; 246
    12ca:	69 2f       	mov	r22, r25
    12cc:	0e 94 3e 03 	call	0x67c	; 0x67c <LCD_GoTo>
    12d0:	8c e6       	ldi	r24, 0x6C	; 108
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	0e 94 1f 03 	call	0x63e	; 0x63e <LCD_WriteText>
    12d8:	9d 81       	ldd	r25, Y+5	; 0x05
    12da:	8b 81       	ldd	r24, Y+3	; 0x03
    12dc:	85 5f       	subi	r24, 0xF5	; 245
    12de:	69 2f       	mov	r22, r25
    12e0:	0e 94 3e 03 	call	0x67c	; 0x67c <LCD_GoTo>
    12e4:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <VoltageString+0x1>
    12e8:	0e 94 08 03 	call	0x610	; 0x610 <LCD_WriteData>
    12ec:	8e c1       	rjmp	.+796    	; 0x160a <displayData+0x3ea>
    12ee:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <adc>
    12f2:	90 91 b7 00 	lds	r25, 0x00B7	; 0x8000b7 <adc+0x1>
    12f6:	4a e0       	ldi	r20, 0x0A	; 10
    12f8:	50 e0       	ldi	r21, 0x00	; 0
    12fa:	64 e4       	ldi	r22, 0x44	; 68
    12fc:	71 e0       	ldi	r23, 0x01	; 1
    12fe:	0e 94 fe 10 	call	0x21fc	; 0x21fc <itoa>
    1302:	8d e0       	ldi	r24, 0x0D	; 13
    1304:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <uartAddToTxBuffer>
    1308:	8a e0       	ldi	r24, 0x0A	; 10
    130a:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <uartAddToTxBuffer>
    130e:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <VoltageString>
    1312:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <uartAddToTxBuffer>
    1316:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <uartSendTxBuffer>
    131a:	9d 81       	ldd	r25, Y+5	; 0x05
    131c:	8b 81       	ldd	r24, Y+3	; 0x03
    131e:	87 5f       	subi	r24, 0xF7	; 247
    1320:	69 2f       	mov	r22, r25
    1322:	0e 94 3e 03 	call	0x67c	; 0x67c <LCD_GoTo>
    1326:	8e e6       	ldi	r24, 0x6E	; 110
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	0e 94 1f 03 	call	0x63e	; 0x63e <LCD_WriteText>
    132e:	9d 81       	ldd	r25, Y+5	; 0x05
    1330:	8b 81       	ldd	r24, Y+3	; 0x03
    1332:	86 5f       	subi	r24, 0xF6	; 246
    1334:	69 2f       	mov	r22, r25
    1336:	0e 94 3e 03 	call	0x67c	; 0x67c <LCD_GoTo>
    133a:	8c e6       	ldi	r24, 0x6C	; 108
    133c:	90 e0       	ldi	r25, 0x00	; 0
    133e:	0e 94 1f 03 	call	0x63e	; 0x63e <LCD_WriteText>
    1342:	9d 81       	ldd	r25, Y+5	; 0x05
    1344:	8b 81       	ldd	r24, Y+3	; 0x03
    1346:	85 5f       	subi	r24, 0xF5	; 245
    1348:	69 2f       	mov	r22, r25
    134a:	0e 94 3e 03 	call	0x67c	; 0x67c <LCD_GoTo>
    134e:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <VoltageString>
    1352:	0e 94 08 03 	call	0x610	; 0x610 <LCD_WriteData>
    1356:	59 c1       	rjmp	.+690    	; 0x160a <displayData+0x3ea>
    1358:	9d 81       	ldd	r25, Y+5	; 0x05
    135a:	8b 81       	ldd	r24, Y+3	; 0x03
    135c:	69 2f       	mov	r22, r25
    135e:	0e 94 3e 03 	call	0x67c	; 0x67c <LCD_GoTo>
    1362:	80 e7       	ldi	r24, 0x70	; 112
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	0e 94 1f 03 	call	0x63e	; 0x63e <LCD_WriteText>
    136a:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <__data_end>
    136e:	90 91 b3 00 	lds	r25, 0x00B3	; 0x8000b3 <__data_end+0x1>
    1372:	4a e0       	ldi	r20, 0x0A	; 10
    1374:	50 e0       	ldi	r21, 0x00	; 0
    1376:	6c e6       	ldi	r22, 0x6C	; 108
    1378:	71 e0       	ldi	r23, 0x01	; 1
    137a:	0e 94 fe 10 	call	0x21fc	; 0x21fc <itoa>
    137e:	8d e0       	ldi	r24, 0x0D	; 13
    1380:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <uartAddToTxBuffer>
    1384:	8a e0       	ldi	r24, 0x0A	; 10
    1386:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <uartAddToTxBuffer>
    138a:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <TemperatureString>
    138e:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <uartAddToTxBuffer>
    1392:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <TemperatureString+0x1>
    1396:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <uartAddToTxBuffer>
    139a:	8e e2       	ldi	r24, 0x2E	; 46
    139c:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <uartAddToTxBuffer>
    13a0:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <TemperatureString+0x2>
    13a4:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <uartAddToTxBuffer>
    13a8:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <uartSendTxBuffer>
    13ac:	9d 81       	ldd	r25, Y+5	; 0x05
    13ae:	8b 81       	ldd	r24, Y+3	; 0x03
    13b0:	89 5f       	subi	r24, 0xF9	; 249
    13b2:	69 2f       	mov	r22, r25
    13b4:	0e 94 3e 03 	call	0x67c	; 0x67c <LCD_GoTo>
    13b8:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <TemperatureString>
    13bc:	0e 94 08 03 	call	0x610	; 0x610 <LCD_WriteData>
    13c0:	9d 81       	ldd	r25, Y+5	; 0x05
    13c2:	8b 81       	ldd	r24, Y+3	; 0x03
    13c4:	88 5f       	subi	r24, 0xF8	; 248
    13c6:	69 2f       	mov	r22, r25
    13c8:	0e 94 3e 03 	call	0x67c	; 0x67c <LCD_GoTo>
    13cc:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <TemperatureString+0x1>
    13d0:	0e 94 08 03 	call	0x610	; 0x610 <LCD_WriteData>
    13d4:	9d 81       	ldd	r25, Y+5	; 0x05
    13d6:	8b 81       	ldd	r24, Y+3	; 0x03
    13d8:	87 5f       	subi	r24, 0xF7	; 247
    13da:	69 2f       	mov	r22, r25
    13dc:	0e 94 3e 03 	call	0x67c	; 0x67c <LCD_GoTo>
    13e0:	8c e6       	ldi	r24, 0x6C	; 108
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	0e 94 1f 03 	call	0x63e	; 0x63e <LCD_WriteText>
    13e8:	9d 81       	ldd	r25, Y+5	; 0x05
    13ea:	8b 81       	ldd	r24, Y+3	; 0x03
    13ec:	86 5f       	subi	r24, 0xF6	; 246
    13ee:	69 2f       	mov	r22, r25
    13f0:	0e 94 3e 03 	call	0x67c	; 0x67c <LCD_GoTo>
    13f4:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <TemperatureString+0x2>
    13f8:	0e 94 08 03 	call	0x610	; 0x610 <LCD_WriteData>
    13fc:	06 c1       	rjmp	.+524    	; 0x160a <displayData+0x3ea>
    13fe:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <Hours>
    1402:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <Hours+0x1>
    1406:	95 95       	asr	r25
    1408:	87 95       	ror	r24
    140a:	95 95       	asr	r25
    140c:	87 95       	ror	r24
    140e:	95 95       	asr	r25
    1410:	87 95       	ror	r24
    1412:	95 95       	asr	r25
    1414:	87 95       	ror	r24
    1416:	87 70       	andi	r24, 0x07	; 7
    1418:	99 27       	eor	r25, r25
    141a:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <B2+0x1>
    141e:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <B2>
    1422:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <Hours>
    1426:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <Hours+0x1>
    142a:	8f 70       	andi	r24, 0x0F	; 15
    142c:	99 27       	eor	r25, r25
    142e:	90 93 84 01 	sts	0x0184, r25	; 0x800184 <B3+0x1>
    1432:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <B3>
    1436:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <B2>
    143a:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <B2+0x1>
    143e:	4a e0       	ldi	r20, 0x0A	; 10
    1440:	50 e0       	ldi	r21, 0x00	; 0
    1442:	68 e5       	ldi	r22, 0x58	; 88
    1444:	71 e0       	ldi	r23, 0x01	; 1
    1446:	0e 94 fe 10 	call	0x21fc	; 0x21fc <itoa>
    144a:	9d 81       	ldd	r25, Y+5	; 0x05
    144c:	8b 81       	ldd	r24, Y+3	; 0x03
    144e:	69 2f       	mov	r22, r25
    1450:	0e 94 3e 03 	call	0x67c	; 0x67c <LCD_GoTo>
    1454:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <TimeString>
    1458:	0e 94 08 03 	call	0x610	; 0x610 <LCD_WriteData>
    145c:	8d e0       	ldi	r24, 0x0D	; 13
    145e:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <uartAddToTxBuffer>
    1462:	8a e0       	ldi	r24, 0x0A	; 10
    1464:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <uartAddToTxBuffer>
    1468:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <TimeString>
    146c:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <uartAddToTxBuffer>
    1470:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <B3>
    1474:	90 91 84 01 	lds	r25, 0x0184	; 0x800184 <B3+0x1>
    1478:	44 e1       	ldi	r20, 0x14	; 20
    147a:	50 e0       	ldi	r21, 0x00	; 0
    147c:	68 e5       	ldi	r22, 0x58	; 88
    147e:	71 e0       	ldi	r23, 0x01	; 1
    1480:	0e 94 fe 10 	call	0x21fc	; 0x21fc <itoa>
    1484:	9d 81       	ldd	r25, Y+5	; 0x05
    1486:	8b 81       	ldd	r24, Y+3	; 0x03
    1488:	8f 5f       	subi	r24, 0xFF	; 255
    148a:	69 2f       	mov	r22, r25
    148c:	0e 94 3e 03 	call	0x67c	; 0x67c <LCD_GoTo>
    1490:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <TimeString>
    1494:	0e 94 08 03 	call	0x610	; 0x610 <LCD_WriteData>
    1498:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <TimeString>
    149c:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <uartAddToTxBuffer>
    14a0:	9d 81       	ldd	r25, Y+5	; 0x05
    14a2:	8b 81       	ldd	r24, Y+3	; 0x03
    14a4:	8e 5f       	subi	r24, 0xFE	; 254
    14a6:	69 2f       	mov	r22, r25
    14a8:	0e 94 3e 03 	call	0x67c	; 0x67c <LCD_GoTo>
    14ac:	87 e7       	ldi	r24, 0x77	; 119
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	0e 94 1f 03 	call	0x63e	; 0x63e <LCD_WriteText>
    14b4:	8a e3       	ldi	r24, 0x3A	; 58
    14b6:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <uartAddToTxBuffer>
    14ba:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <Minutes>
    14be:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <Minutes+0x1>
    14c2:	95 95       	asr	r25
    14c4:	87 95       	ror	r24
    14c6:	95 95       	asr	r25
    14c8:	87 95       	ror	r24
    14ca:	95 95       	asr	r25
    14cc:	87 95       	ror	r24
    14ce:	95 95       	asr	r25
    14d0:	87 95       	ror	r24
    14d2:	87 70       	andi	r24, 0x07	; 7
    14d4:	99 27       	eor	r25, r25
    14d6:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <B2+0x1>
    14da:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <B2>
    14de:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <Minutes>
    14e2:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <Minutes+0x1>
    14e6:	8f 70       	andi	r24, 0x0F	; 15
    14e8:	99 27       	eor	r25, r25
    14ea:	90 93 84 01 	sts	0x0184, r25	; 0x800184 <B3+0x1>
    14ee:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <B3>
    14f2:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <B2>
    14f6:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <B2+0x1>
    14fa:	44 e1       	ldi	r20, 0x14	; 20
    14fc:	50 e0       	ldi	r21, 0x00	; 0
    14fe:	68 e5       	ldi	r22, 0x58	; 88
    1500:	71 e0       	ldi	r23, 0x01	; 1
    1502:	0e 94 fe 10 	call	0x21fc	; 0x21fc <itoa>
    1506:	9d 81       	ldd	r25, Y+5	; 0x05
    1508:	8b 81       	ldd	r24, Y+3	; 0x03
    150a:	8d 5f       	subi	r24, 0xFD	; 253
    150c:	69 2f       	mov	r22, r25
    150e:	0e 94 3e 03 	call	0x67c	; 0x67c <LCD_GoTo>
    1512:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <TimeString>
    1516:	0e 94 08 03 	call	0x610	; 0x610 <LCD_WriteData>
    151a:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <TimeString>
    151e:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <uartAddToTxBuffer>
    1522:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <B3>
    1526:	90 91 84 01 	lds	r25, 0x0184	; 0x800184 <B3+0x1>
    152a:	44 e1       	ldi	r20, 0x14	; 20
    152c:	50 e0       	ldi	r21, 0x00	; 0
    152e:	68 e5       	ldi	r22, 0x58	; 88
    1530:	71 e0       	ldi	r23, 0x01	; 1
    1532:	0e 94 fe 10 	call	0x21fc	; 0x21fc <itoa>
    1536:	9d 81       	ldd	r25, Y+5	; 0x05
    1538:	8b 81       	ldd	r24, Y+3	; 0x03
    153a:	8c 5f       	subi	r24, 0xFC	; 252
    153c:	69 2f       	mov	r22, r25
    153e:	0e 94 3e 03 	call	0x67c	; 0x67c <LCD_GoTo>
    1542:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <TimeString>
    1546:	0e 94 08 03 	call	0x610	; 0x610 <LCD_WriteData>
    154a:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <TimeString>
    154e:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <uartAddToTxBuffer>
    1552:	9d 81       	ldd	r25, Y+5	; 0x05
    1554:	8b 81       	ldd	r24, Y+3	; 0x03
    1556:	8b 5f       	subi	r24, 0xFB	; 251
    1558:	69 2f       	mov	r22, r25
    155a:	0e 94 3e 03 	call	0x67c	; 0x67c <LCD_GoTo>
    155e:	87 e7       	ldi	r24, 0x77	; 119
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	0e 94 1f 03 	call	0x63e	; 0x63e <LCD_WriteText>
    1566:	8a e3       	ldi	r24, 0x3A	; 58
    1568:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <uartAddToTxBuffer>
    156c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <Seconds>
    1570:	90 91 bd 00 	lds	r25, 0x00BD	; 0x8000bd <Seconds+0x1>
    1574:	95 95       	asr	r25
    1576:	87 95       	ror	r24
    1578:	95 95       	asr	r25
    157a:	87 95       	ror	r24
    157c:	95 95       	asr	r25
    157e:	87 95       	ror	r24
    1580:	95 95       	asr	r25
    1582:	87 95       	ror	r24
    1584:	87 70       	andi	r24, 0x07	; 7
    1586:	99 27       	eor	r25, r25
    1588:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <B2+0x1>
    158c:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <B2>
    1590:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <Seconds>
    1594:	90 91 bd 00 	lds	r25, 0x00BD	; 0x8000bd <Seconds+0x1>
    1598:	8f 70       	andi	r24, 0x0F	; 15
    159a:	99 27       	eor	r25, r25
    159c:	90 93 84 01 	sts	0x0184, r25	; 0x800184 <B3+0x1>
    15a0:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <B3>
    15a4:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <B2>
    15a8:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <B2+0x1>
    15ac:	44 e1       	ldi	r20, 0x14	; 20
    15ae:	50 e0       	ldi	r21, 0x00	; 0
    15b0:	68 e5       	ldi	r22, 0x58	; 88
    15b2:	71 e0       	ldi	r23, 0x01	; 1
    15b4:	0e 94 fe 10 	call	0x21fc	; 0x21fc <itoa>
    15b8:	9d 81       	ldd	r25, Y+5	; 0x05
    15ba:	8b 81       	ldd	r24, Y+3	; 0x03
    15bc:	8a 5f       	subi	r24, 0xFA	; 250
    15be:	69 2f       	mov	r22, r25
    15c0:	0e 94 3e 03 	call	0x67c	; 0x67c <LCD_GoTo>
    15c4:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <TimeString>
    15c8:	0e 94 08 03 	call	0x610	; 0x610 <LCD_WriteData>
    15cc:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <TimeString>
    15d0:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <uartAddToTxBuffer>
    15d4:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <B3>
    15d8:	90 91 84 01 	lds	r25, 0x0184	; 0x800184 <B3+0x1>
    15dc:	44 e1       	ldi	r20, 0x14	; 20
    15de:	50 e0       	ldi	r21, 0x00	; 0
    15e0:	68 e5       	ldi	r22, 0x58	; 88
    15e2:	71 e0       	ldi	r23, 0x01	; 1
    15e4:	0e 94 fe 10 	call	0x21fc	; 0x21fc <itoa>
    15e8:	9d 81       	ldd	r25, Y+5	; 0x05
    15ea:	8b 81       	ldd	r24, Y+3	; 0x03
    15ec:	89 5f       	subi	r24, 0xF9	; 249
    15ee:	69 2f       	mov	r22, r25
    15f0:	0e 94 3e 03 	call	0x67c	; 0x67c <LCD_GoTo>
    15f4:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <TimeString>
    15f8:	0e 94 08 03 	call	0x610	; 0x610 <LCD_WriteData>
    15fc:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <TimeString>
    1600:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <uartAddToTxBuffer>
    1604:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <uartSendTxBuffer>
    1608:	00 00       	nop
    160a:	00 00       	nop
    160c:	26 96       	adiw	r28, 0x06	; 6
    160e:	0f b6       	in	r0, 0x3f	; 63
    1610:	f8 94       	cli
    1612:	de bf       	out	0x3e, r29	; 62
    1614:	0f be       	out	0x3f, r0	; 63
    1616:	cd bf       	out	0x3d, r28	; 61
    1618:	df 91       	pop	r29
    161a:	cf 91       	pop	r28
    161c:	08 95       	ret

0000161e <USART_Receiving>:

void USART_Receiving(){
    161e:	cf 93       	push	r28
    1620:	df 93       	push	r29
    1622:	cd b7       	in	r28, 0x3d	; 61
    1624:	de b7       	in	r29, 0x3e	; 62
    1626:	28 97       	sbiw	r28, 0x08	; 8
    1628:	0f b6       	in	r0, 0x3f	; 63
    162a:	f8 94       	cli
    162c:	de bf       	out	0x3e, r29	; 62
    162e:	0f be       	out	0x3f, r0	; 63
    1630:	cd bf       	out	0x3d, r28	; 61
		cBuffer* UBuffer = uartGetRxBuffer();
    1632:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <uartGetRxBuffer>
    1636:	9a 83       	std	Y+2, r25	; 0x02
    1638:	89 83       	std	Y+1, r24	; 0x01
		UBuffer->dataptr[UBuffer->datalength - 1] = NULL;
    163a:	89 81       	ldd	r24, Y+1	; 0x01
    163c:	9a 81       	ldd	r25, Y+2	; 0x02
    163e:	fc 01       	movw	r30, r24
    1640:	20 81       	ld	r18, Z
    1642:	31 81       	ldd	r19, Z+1	; 0x01
    1644:	89 81       	ldd	r24, Y+1	; 0x01
    1646:	9a 81       	ldd	r25, Y+2	; 0x02
    1648:	fc 01       	movw	r30, r24
    164a:	84 81       	ldd	r24, Z+4	; 0x04
    164c:	95 81       	ldd	r25, Z+5	; 0x05
    164e:	01 97       	sbiw	r24, 0x01	; 1
    1650:	82 0f       	add	r24, r18
    1652:	93 1f       	adc	r25, r19
    1654:	fc 01       	movw	r30, r24
    1656:	10 82       	st	Z, r1
		ReceivedData = UBuffer->dataptr;
    1658:	89 81       	ldd	r24, Y+1	; 0x01
    165a:	9a 81       	ldd	r25, Y+2	; 0x02
    165c:	fc 01       	movw	r30, r24
    165e:	80 81       	ld	r24, Z
    1660:	91 81       	ldd	r25, Z+1	; 0x01
    1662:	90 93 77 01 	sts	0x0177, r25	; 0x800177 <ReceivedData+0x1>
    1666:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <ReceivedData>
		UBuffer->datalength = 0;
    166a:	89 81       	ldd	r24, Y+1	; 0x01
    166c:	9a 81       	ldd	r25, Y+2	; 0x02
    166e:	fc 01       	movw	r30, r24
    1670:	15 82       	std	Z+5, r1	; 0x05
    1672:	14 82       	std	Z+4, r1	; 0x04
		if(strcmp(ReceivedData, "volt") == 0){
    1674:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <ReceivedData>
    1678:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <ReceivedData+0x1>
    167c:	69 e7       	ldi	r22, 0x79	; 121
    167e:	70 e0       	ldi	r23, 0x00	; 0
    1680:	0e 94 f5 10 	call	0x21ea	; 0x21ea <strcmp>
    1684:	89 2b       	or	r24, r25
    1686:	59 f4       	brne	.+22     	; 0x169e <USART_Receiving+0x80>
			LCD_WriteText("Volt");
    1688:	8e e7       	ldi	r24, 0x7E	; 126
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	0e 94 1f 03 	call	0x63e	; 0x63e <LCD_WriteText>
			DisplayMode = 1;
    1690:	81 e0       	ldi	r24, 0x01	; 1
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    1698:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
    169c:	ac c0       	rjmp	.+344    	; 0x17f6 <USART_Receiving+0x1d8>
		}
		else if(strcmp(ReceivedData, "temp") == 0){
    169e:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <ReceivedData>
    16a2:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <ReceivedData+0x1>
    16a6:	63 e8       	ldi	r22, 0x83	; 131
    16a8:	70 e0       	ldi	r23, 0x00	; 0
    16aa:	0e 94 f5 10 	call	0x21ea	; 0x21ea <strcmp>
    16ae:	89 2b       	or	r24, r25
    16b0:	59 f4       	brne	.+22     	; 0x16c8 <USART_Receiving+0xaa>
			LCD_WriteText("Temp");
    16b2:	88 e8       	ldi	r24, 0x88	; 136
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	0e 94 1f 03 	call	0x63e	; 0x63e <LCD_WriteText>
			DisplayMode = 2;
    16ba:	82 e0       	ldi	r24, 0x02	; 2
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    16c2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
    16c6:	97 c0       	rjmp	.+302    	; 0x17f6 <USART_Receiving+0x1d8>
		}
		else if(strcmp(ReceivedData, "time") == 0){
    16c8:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <ReceivedData>
    16cc:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <ReceivedData+0x1>
    16d0:	6d e8       	ldi	r22, 0x8D	; 141
    16d2:	70 e0       	ldi	r23, 0x00	; 0
    16d4:	0e 94 f5 10 	call	0x21ea	; 0x21ea <strcmp>
    16d8:	89 2b       	or	r24, r25
    16da:	89 f4       	brne	.+34     	; 0x16fe <USART_Receiving+0xe0>
			LCD_WriteText("Time");
    16dc:	82 e9       	ldi	r24, 0x92	; 146
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	0e 94 1f 03 	call	0x63e	; 0x63e <LCD_WriteText>
			DisplayMode = 3;
    16e4:	83 e0       	ldi	r24, 0x03	; 3
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    16ec:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			watchdog = 1;
    16f0:	81 e0       	ldi	r24, 0x01	; 1
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	90 93 bf 00 	sts	0x00BF, r25	; 0x8000bf <watchdog+0x1>
    16f8:	80 93 be 00 	sts	0x00BE, r24	; 0x8000be <watchdog>
			while(1);
    16fc:	ff cf       	rjmp	.-2      	; 0x16fc <USART_Receiving+0xde>
			
		}
		else if(strcmp(ReceivedData, "settime") == 0){
    16fe:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <ReceivedData>
    1702:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <ReceivedData+0x1>
    1706:	67 e9       	ldi	r22, 0x97	; 151
    1708:	70 e0       	ldi	r23, 0x00	; 0
    170a:	0e 94 f5 10 	call	0x21ea	; 0x21ea <strcmp>
    170e:	89 2b       	or	r24, r25
    1710:	09 f0       	breq	.+2      	; 0x1714 <USART_Receiving+0xf6>
    1712:	71 c0       	rjmp	.+226    	; 0x17f6 <USART_Receiving+0x1d8>
			cli();	
    1714:	f8 94       	cli
			USART_GetString(&Time);
    1716:	8a e7       	ldi	r24, 0x7A	; 122
    1718:	91 e0       	ldi	r25, 0x01	; 1
    171a:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <USART_GetString>
			sei();
    171e:	78 94       	sei
			int hours = ((Time[0] - 48) * 10) + (Time[1] - 48);		
    1720:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <Time>
    1724:	88 2f       	mov	r24, r24
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	c0 97       	sbiw	r24, 0x30	; 48
    172a:	88 0f       	add	r24, r24
    172c:	99 1f       	adc	r25, r25
    172e:	9c 01       	movw	r18, r24
    1730:	22 0f       	add	r18, r18
    1732:	33 1f       	adc	r19, r19
    1734:	22 0f       	add	r18, r18
    1736:	33 1f       	adc	r19, r19
    1738:	28 0f       	add	r18, r24
    173a:	39 1f       	adc	r19, r25
    173c:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <Time+0x1>
    1740:	88 2f       	mov	r24, r24
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	c0 97       	sbiw	r24, 0x30	; 48
    1746:	82 0f       	add	r24, r18
    1748:	93 1f       	adc	r25, r19
    174a:	9c 83       	std	Y+4, r25	; 0x04
    174c:	8b 83       	std	Y+3, r24	; 0x03
			int minutes = ((Time[2] - 48) * 10) + (Time[3] - 48);
    174e:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <Time+0x2>
    1752:	88 2f       	mov	r24, r24
    1754:	90 e0       	ldi	r25, 0x00	; 0
    1756:	c0 97       	sbiw	r24, 0x30	; 48
    1758:	88 0f       	add	r24, r24
    175a:	99 1f       	adc	r25, r25
    175c:	9c 01       	movw	r18, r24
    175e:	22 0f       	add	r18, r18
    1760:	33 1f       	adc	r19, r19
    1762:	22 0f       	add	r18, r18
    1764:	33 1f       	adc	r19, r19
    1766:	28 0f       	add	r18, r24
    1768:	39 1f       	adc	r19, r25
    176a:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <Time+0x3>
    176e:	88 2f       	mov	r24, r24
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	c0 97       	sbiw	r24, 0x30	; 48
    1774:	82 0f       	add	r24, r18
    1776:	93 1f       	adc	r25, r19
    1778:	9e 83       	std	Y+6, r25	; 0x06
    177a:	8d 83       	std	Y+5, r24	; 0x05
			int seconds = ((Time[4] - 48) * 10) + (Time[5] - 48);
    177c:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <Time+0x4>
    1780:	88 2f       	mov	r24, r24
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	c0 97       	sbiw	r24, 0x30	; 48
    1786:	88 0f       	add	r24, r24
    1788:	99 1f       	adc	r25, r25
    178a:	9c 01       	movw	r18, r24
    178c:	22 0f       	add	r18, r18
    178e:	33 1f       	adc	r19, r19
    1790:	22 0f       	add	r18, r18
    1792:	33 1f       	adc	r19, r19
    1794:	28 0f       	add	r18, r24
    1796:	39 1f       	adc	r19, r25
    1798:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <Time+0x5>
    179c:	88 2f       	mov	r24, r24
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	c0 97       	sbiw	r24, 0x30	; 48
    17a2:	82 0f       	add	r24, r18
    17a4:	93 1f       	adc	r25, r19
    17a6:	98 87       	std	Y+8, r25	; 0x08
    17a8:	8f 83       	std	Y+7, r24	; 0x07
			if((hours > 23) || minutes > 59 || seconds > 59){
    17aa:	8b 81       	ldd	r24, Y+3	; 0x03
    17ac:	9c 81       	ldd	r25, Y+4	; 0x04
    17ae:	48 97       	sbiw	r24, 0x18	; 24
    17b0:	44 f4       	brge	.+16     	; 0x17c2 <USART_Receiving+0x1a4>
    17b2:	8d 81       	ldd	r24, Y+5	; 0x05
    17b4:	9e 81       	ldd	r25, Y+6	; 0x06
    17b6:	cc 97       	sbiw	r24, 0x3c	; 60
    17b8:	24 f4       	brge	.+8      	; 0x17c2 <USART_Receiving+0x1a4>
    17ba:	8f 81       	ldd	r24, Y+7	; 0x07
    17bc:	98 85       	ldd	r25, Y+8	; 0x08
    17be:	cc 97       	sbiw	r24, 0x3c	; 60
    17c0:	5c f0       	brlt	.+22     	; 0x17d8 <USART_Receiving+0x1ba>
				USART_PutString("Wrong time format\r");	
    17c2:	8f e9       	ldi	r24, 0x9F	; 159
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <USART_PutString>
				DisplayMode = 3;
    17ca:	83 e0       	ldi	r24, 0x03	; 3
    17cc:	90 e0       	ldi	r25, 0x00	; 0
    17ce:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    17d2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
    17d6:	0f c0       	rjmp	.+30     	; 0x17f6 <USART_Receiving+0x1d8>
			}
			else{
				setTime(hours, minutes, seconds);
    17d8:	4f 81       	ldd	r20, Y+7	; 0x07
    17da:	58 85       	ldd	r21, Y+8	; 0x08
    17dc:	2d 81       	ldd	r18, Y+5	; 0x05
    17de:	3e 81       	ldd	r19, Y+6	; 0x06
    17e0:	8b 81       	ldd	r24, Y+3	; 0x03
    17e2:	9c 81       	ldd	r25, Y+4	; 0x04
    17e4:	b9 01       	movw	r22, r18
    17e6:	0e 94 7e 07 	call	0xefc	; 0xefc <setTime>
				DisplayMode = 3;
    17ea:	83 e0       	ldi	r24, 0x03	; 3
    17ec:	90 e0       	ldi	r25, 0x00	; 0
    17ee:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    17f2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			}
		}
		displayData(DisplayMode, 0, 1);		
    17f6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    17fa:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    17fe:	41 e0       	ldi	r20, 0x01	; 1
    1800:	50 e0       	ldi	r21, 0x00	; 0
    1802:	60 e0       	ldi	r22, 0x00	; 0
    1804:	70 e0       	ldi	r23, 0x00	; 0
    1806:	0e 94 10 09 	call	0x1220	; 0x1220 <displayData>
}
    180a:	00 00       	nop
    180c:	28 96       	adiw	r28, 0x08	; 8
    180e:	0f b6       	in	r0, 0x3f	; 63
    1810:	f8 94       	cli
    1812:	de bf       	out	0x3e, r29	; 62
    1814:	0f be       	out	0x3f, r0	; 63
    1816:	cd bf       	out	0x3d, r28	; 61
    1818:	df 91       	pop	r29
    181a:	cf 91       	pop	r28
    181c:	08 95       	ret

0000181e <__vector_7>:

ISR(TIMER1_COMPA_vect){
    181e:	1f 92       	push	r1
    1820:	0f 92       	push	r0
    1822:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1826:	0f 92       	push	r0
    1828:	11 24       	eor	r1, r1
    182a:	2f 93       	push	r18
    182c:	3f 93       	push	r19
    182e:	4f 93       	push	r20
    1830:	5f 93       	push	r21
    1832:	6f 93       	push	r22
    1834:	7f 93       	push	r23
    1836:	8f 93       	push	r24
    1838:	9f 93       	push	r25
    183a:	af 93       	push	r26
    183c:	bf 93       	push	r27
    183e:	ef 93       	push	r30
    1840:	ff 93       	push	r31
    1842:	cf 93       	push	r28
    1844:	df 93       	push	r29
    1846:	cd b7       	in	r28, 0x3d	; 61
    1848:	de b7       	in	r29, 0x3e	; 62
	getTime(&Hours, &Minutes, &Seconds);
    184a:	4c eb       	ldi	r20, 0xBC	; 188
    184c:	50 e0       	ldi	r21, 0x00	; 0
    184e:	6a eb       	ldi	r22, 0xBA	; 186
    1850:	70 e0       	ldi	r23, 0x00	; 0
    1852:	88 eb       	ldi	r24, 0xB8	; 184
    1854:	90 e0       	ldi	r25, 0x00	; 0
    1856:	0e 94 32 08 	call	0x1064	; 0x1064 <getTime>
	ReceivedTemperature = getTemp(Celsius);
    185a:	80 e0       	ldi	r24, 0x00	; 0
    185c:	90 e0       	ldi	r25, 0x00	; 0
    185e:	0e 94 76 08 	call	0x10ec	; 0x10ec <getTemp>
    1862:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__data_end+0x1>
    1866:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__data_end>
	if(watchdog == 0)
    186a:	80 91 be 00 	lds	r24, 0x00BE	; 0x8000be <watchdog>
    186e:	90 91 bf 00 	lds	r25, 0x00BF	; 0x8000bf <watchdog+0x1>
    1872:	89 2b       	or	r24, r25
    1874:	09 f4       	brne	.+2      	; 0x1878 <__vector_7+0x5a>
		wdt_reset();
    1876:	a8 95       	wdr
}
    1878:	00 00       	nop
    187a:	df 91       	pop	r29
    187c:	cf 91       	pop	r28
    187e:	ff 91       	pop	r31
    1880:	ef 91       	pop	r30
    1882:	bf 91       	pop	r27
    1884:	af 91       	pop	r26
    1886:	9f 91       	pop	r25
    1888:	8f 91       	pop	r24
    188a:	7f 91       	pop	r23
    188c:	6f 91       	pop	r22
    188e:	5f 91       	pop	r21
    1890:	4f 91       	pop	r20
    1892:	3f 91       	pop	r19
    1894:	2f 91       	pop	r18
    1896:	0f 90       	pop	r0
    1898:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    189c:	0f 90       	pop	r0
    189e:	1f 90       	pop	r1
    18a0:	18 95       	reti

000018a2 <__vector_16>:

ISR(ADC_vect){
    18a2:	1f 92       	push	r1
    18a4:	0f 92       	push	r0
    18a6:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    18aa:	0f 92       	push	r0
    18ac:	11 24       	eor	r1, r1
    18ae:	2f 93       	push	r18
    18b0:	3f 93       	push	r19
    18b2:	4f 93       	push	r20
    18b4:	5f 93       	push	r21
    18b6:	6f 93       	push	r22
    18b8:	7f 93       	push	r23
    18ba:	8f 93       	push	r24
    18bc:	9f 93       	push	r25
    18be:	af 93       	push	r26
    18c0:	bf 93       	push	r27
    18c2:	ef 93       	push	r30
    18c4:	ff 93       	push	r31
    18c6:	cf 93       	push	r28
    18c8:	df 93       	push	r29
    18ca:	cd b7       	in	r28, 0x3d	; 61
    18cc:	de b7       	in	r29, 0x3e	; 62
	adc_read();
    18ce:	0e 94 47 07 	call	0xe8e	; 0xe8e <adc_read>
}
    18d2:	00 00       	nop
    18d4:	df 91       	pop	r29
    18d6:	cf 91       	pop	r28
    18d8:	ff 91       	pop	r31
    18da:	ef 91       	pop	r30
    18dc:	bf 91       	pop	r27
    18de:	af 91       	pop	r26
    18e0:	9f 91       	pop	r25
    18e2:	8f 91       	pop	r24
    18e4:	7f 91       	pop	r23
    18e6:	6f 91       	pop	r22
    18e8:	5f 91       	pop	r21
    18ea:	4f 91       	pop	r20
    18ec:	3f 91       	pop	r19
    18ee:	2f 91       	pop	r18
    18f0:	0f 90       	pop	r0
    18f2:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    18f6:	0f 90       	pop	r0
    18f8:	1f 90       	pop	r1
    18fa:	18 95       	reti

000018fc <main>:

int main(void){
    18fc:	cf 93       	push	r28
    18fe:	df 93       	push	r29
    1900:	00 d0       	rcall	.+0      	; 0x1902 <main+0x6>
    1902:	cd b7       	in	r28, 0x3d	; 61
    1904:	de b7       	in	r29, 0x3e	; 62
DDRD = 0xFF;
    1906:	81 e3       	ldi	r24, 0x31	; 49
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	2f ef       	ldi	r18, 0xFF	; 255
    190c:	fc 01       	movw	r30, r24
    190e:	20 83       	st	Z, r18

LCD_Initialize();
    1910:	0e 94 df 03 	call	0x7be	; 0x7be <LCD_Initialize>
ADC_Init();
    1914:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <ADC_Init>
SPI_Init();
    1918:	0e 94 ce 06 	call	0xd9c	; 0xd9c <SPI_Init>
TWI_Init();
    191c:	0e 94 c1 06 	call	0xd82	; 0xd82 <TWI_Init>
Timer1_Init();
    1920:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <Timer1_Init>

setTime(16, 17, 18);
    1924:	42 e1       	ldi	r20, 0x12	; 18
    1926:	50 e0       	ldi	r21, 0x00	; 0
    1928:	61 e1       	ldi	r22, 0x11	; 17
    192a:	70 e0       	ldi	r23, 0x00	; 0
    192c:	80 e1       	ldi	r24, 0x10	; 16
    192e:	90 e0       	ldi	r25, 0x00	; 0
    1930:	0e 94 7e 07 	call	0xefc	; 0xefc <setTime>

uartInit();
    1934:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <uartInit>
uartSetBaudRate(9600);
    1938:	60 e8       	ldi	r22, 0x80	; 128
    193a:	75 e2       	ldi	r23, 0x25	; 37
    193c:	80 e0       	ldi	r24, 0x00	; 0
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <uartSetBaudRate>
rprintfInit(uartSendByte);
    1944:	86 e9       	ldi	r24, 0x96	; 150
    1946:	9d e0       	ldi	r25, 0x0D	; 13
    1948:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <rprintfInit>
cBuffer* UBuffer = uartGetRxBuffer();    
    194c:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <uartGetRxBuffer>
    1950:	9a 83       	std	Y+2, r25	; 0x02
    1952:	89 83       	std	Y+1, r24	; 0x01

USART_Int_Init();
    1954:	0e 94 1c 07 	call	0xe38	; 0xe38 <USART_Int_Init>

set_sleep_mode(SLEEP_MODE_IDLE);
    1958:	85 e5       	ldi	r24, 0x55	; 85
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	25 e5       	ldi	r18, 0x55	; 85
    195e:	30 e0       	ldi	r19, 0x00	; 0
    1960:	f9 01       	movw	r30, r18
    1962:	20 81       	ld	r18, Z
    1964:	2f 78       	andi	r18, 0x8F	; 143
    1966:	fc 01       	movw	r30, r24
    1968:	20 83       	st	Z, r18
sleep_enable();
    196a:	85 e5       	ldi	r24, 0x55	; 85
    196c:	90 e0       	ldi	r25, 0x00	; 0
    196e:	25 e5       	ldi	r18, 0x55	; 85
    1970:	30 e0       	ldi	r19, 0x00	; 0
    1972:	f9 01       	movw	r30, r18
    1974:	20 81       	ld	r18, Z
    1976:	20 68       	ori	r18, 0x80	; 128
    1978:	fc 01       	movw	r30, r24
    197a:	20 83       	st	Z, r18
				"out __SREG__,__tmp_reg__" "\n\t"
				"out %0, %2" "\n \t"
				: /* no outputs */
				: "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
    197c:	87 e0       	ldi	r24, 0x07	; 7
    197e:	87 70       	andi	r24, 0x07	; 7
    1980:	88 60       	ori	r24, 0x08	; 8
    1982:	98 2f       	mov	r25, r24
__attribute__ ((__always_inline__))
void wdt_enable (const uint8_t value)
{
	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
	{
		__asm__ __volatile__ (
    1984:	88 e1       	ldi	r24, 0x18	; 24
    1986:	0f b6       	in	r0, 0x3f	; 63
    1988:	f8 94       	cli
    198a:	a8 95       	wdr
    198c:	81 bd       	out	0x21, r24	; 33
    198e:	0f be       	out	0x3f, r0	; 63
    1990:	91 bd       	out	0x21, r25	; 33
wdt_enable(7);
sei();
    1992:	78 94       	sei

while(1){
	while(UBuffer->dataptr[UBuffer->datalength - 1] != 13){
    1994:	01 c0       	rjmp	.+2      	; 0x1998 <main+0x9c>
		sleep_cpu();	
    1996:	88 95       	sleep
sleep_enable();
wdt_enable(7);
sei();

while(1){
	while(UBuffer->dataptr[UBuffer->datalength - 1] != 13){
    1998:	89 81       	ldd	r24, Y+1	; 0x01
    199a:	9a 81       	ldd	r25, Y+2	; 0x02
    199c:	fc 01       	movw	r30, r24
    199e:	20 81       	ld	r18, Z
    19a0:	31 81       	ldd	r19, Z+1	; 0x01
    19a2:	89 81       	ldd	r24, Y+1	; 0x01
    19a4:	9a 81       	ldd	r25, Y+2	; 0x02
    19a6:	fc 01       	movw	r30, r24
    19a8:	84 81       	ldd	r24, Z+4	; 0x04
    19aa:	95 81       	ldd	r25, Z+5	; 0x05
    19ac:	01 97       	sbiw	r24, 0x01	; 1
    19ae:	82 0f       	add	r24, r18
    19b0:	93 1f       	adc	r25, r19
    19b2:	fc 01       	movw	r30, r24
    19b4:	80 81       	ld	r24, Z
    19b6:	8d 30       	cpi	r24, 0x0D	; 13
    19b8:	71 f7       	brne	.-36     	; 0x1996 <main+0x9a>
		sleep_cpu();	
	}
	USART_Receiving();
    19ba:	0e 94 0f 0b 	call	0x161e	; 0x161e <USART_Receiving>
	}
    19be:	ea cf       	rjmp	.-44     	; 0x1994 <main+0x98>

000019c0 <rprintfInit>:

// *** rprintf initialization ***
// you must call this function once and supply the character output
// routine before using other functions in this library
void rprintfInit(void (*putchar_func)(unsigned char c))
{
    19c0:	cf 93       	push	r28
    19c2:	df 93       	push	r29
    19c4:	00 d0       	rcall	.+0      	; 0x19c6 <rprintfInit+0x6>
    19c6:	cd b7       	in	r28, 0x3d	; 61
    19c8:	de b7       	in	r29, 0x3e	; 62
    19ca:	9a 83       	std	Y+2, r25	; 0x02
    19cc:	89 83       	std	Y+1, r24	; 0x01
	rputchar = putchar_func;
    19ce:	89 81       	ldd	r24, Y+1	; 0x01
    19d0:	9a 81       	ldd	r25, Y+2	; 0x02
    19d2:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <rputchar+0x1>
    19d6:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <rputchar>
}
    19da:	00 00       	nop
    19dc:	0f 90       	pop	r0
    19de:	0f 90       	pop	r0
    19e0:	df 91       	pop	r29
    19e2:	cf 91       	pop	r28
    19e4:	08 95       	ret

000019e6 <uartInit>:
	}
	else
	{
		return FALSE;
	}
}
    19e6:	cf 93       	push	r28
    19e8:	df 93       	push	r29
    19ea:	cd b7       	in	r28, 0x3d	; 61
    19ec:	de b7       	in	r29, 0x3e	; 62
    19ee:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <uartInitBuffers>
    19f2:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <UartRxFunc+0x1>
    19f6:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <UartRxFunc>
    19fa:	8a e2       	ldi	r24, 0x2A	; 42
    19fc:	90 e0       	ldi	r25, 0x00	; 0
    19fe:	28 ed       	ldi	r18, 0xD8	; 216
    1a00:	fc 01       	movw	r30, r24
    1a02:	20 83       	st	Z, r18
    1a04:	60 e8       	ldi	r22, 0x80	; 128
    1a06:	75 e2       	ldi	r23, 0x25	; 37
    1a08:	80 e0       	ldi	r24, 0x00	; 0
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <uartSetBaudRate>
    1a10:	8f ef       	ldi	r24, 0xFF	; 255
    1a12:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <uartReadyTx>
    1a16:	10 92 8e 01 	sts	0x018E, r1	; 0x80018e <uartBufferedTx>
    1a1a:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <uartRxOverflow+0x1>
    1a1e:	10 92 97 01 	sts	0x0197, r1	; 0x800197 <uartRxOverflow>
    1a22:	78 94       	sei
    1a24:	00 00       	nop
    1a26:	df 91       	pop	r29
    1a28:	cf 91       	pop	r28
    1a2a:	08 95       	ret

00001a2c <uartInitBuffers>:
    1a2c:	cf 93       	push	r28
    1a2e:	df 93       	push	r29
    1a30:	cd b7       	in	r28, 0x3d	; 61
    1a32:	de b7       	in	r29, 0x3e	; 62
    1a34:	40 e4       	ldi	r20, 0x40	; 64
    1a36:	50 e0       	ldi	r21, 0x00	; 0
    1a38:	62 ec       	ldi	r22, 0xC2	; 194
    1a3a:	70 e0       	ldi	r23, 0x00	; 0
    1a3c:	86 e8       	ldi	r24, 0x86	; 134
    1a3e:	91 e0       	ldi	r25, 0x01	; 1
    1a40:	0e 94 49 00 	call	0x92	; 0x92 <bufferInit>
    1a44:	40 e4       	ldi	r20, 0x40	; 64
    1a46:	50 e0       	ldi	r21, 0x00	; 0
    1a48:	62 e0       	ldi	r22, 0x02	; 2
    1a4a:	71 e0       	ldi	r23, 0x01	; 1
    1a4c:	8f e8       	ldi	r24, 0x8F	; 143
    1a4e:	91 e0       	ldi	r25, 0x01	; 1
    1a50:	0e 94 49 00 	call	0x92	; 0x92 <bufferInit>
    1a54:	00 00       	nop
    1a56:	df 91       	pop	r29
    1a58:	cf 91       	pop	r28
    1a5a:	08 95       	ret

00001a5c <uartSetBaudRate>:
    1a5c:	ef 92       	push	r14
    1a5e:	ff 92       	push	r15
    1a60:	0f 93       	push	r16
    1a62:	1f 93       	push	r17
    1a64:	cf 93       	push	r28
    1a66:	df 93       	push	r29
    1a68:	00 d0       	rcall	.+0      	; 0x1a6a <uartSetBaudRate+0xe>
    1a6a:	00 d0       	rcall	.+0      	; 0x1a6c <uartSetBaudRate+0x10>
    1a6c:	00 d0       	rcall	.+0      	; 0x1a6e <uartSetBaudRate+0x12>
    1a6e:	cd b7       	in	r28, 0x3d	; 61
    1a70:	de b7       	in	r29, 0x3e	; 62
    1a72:	6b 83       	std	Y+3, r22	; 0x03
    1a74:	7c 83       	std	Y+4, r23	; 0x04
    1a76:	8d 83       	std	Y+5, r24	; 0x05
    1a78:	9e 83       	std	Y+6, r25	; 0x06
    1a7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a7c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a7e:	ad 81       	ldd	r26, Y+5	; 0x05
    1a80:	be 81       	ldd	r27, Y+6	; 0x06
    1a82:	80 58       	subi	r24, 0x80	; 128
    1a84:	9b 47       	sbci	r25, 0x7B	; 123
    1a86:	a1 4e       	sbci	r26, 0xE1	; 225
    1a88:	bf 4f       	sbci	r27, 0xFF	; 255
    1a8a:	88 0f       	add	r24, r24
    1a8c:	99 1f       	adc	r25, r25
    1a8e:	aa 1f       	adc	r26, r26
    1a90:	bb 1f       	adc	r27, r27
    1a92:	88 0f       	add	r24, r24
    1a94:	99 1f       	adc	r25, r25
    1a96:	aa 1f       	adc	r26, r26
    1a98:	bb 1f       	adc	r27, r27
    1a9a:	88 0f       	add	r24, r24
    1a9c:	99 1f       	adc	r25, r25
    1a9e:	aa 1f       	adc	r26, r26
    1aa0:	bb 1f       	adc	r27, r27
    1aa2:	7c 01       	movw	r14, r24
    1aa4:	8d 01       	movw	r16, r26
    1aa6:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa8:	9c 81       	ldd	r25, Y+4	; 0x04
    1aaa:	ad 81       	ldd	r26, Y+5	; 0x05
    1aac:	be 81       	ldd	r27, Y+6	; 0x06
    1aae:	88 0f       	add	r24, r24
    1ab0:	99 1f       	adc	r25, r25
    1ab2:	aa 1f       	adc	r26, r26
    1ab4:	bb 1f       	adc	r27, r27
    1ab6:	88 0f       	add	r24, r24
    1ab8:	99 1f       	adc	r25, r25
    1aba:	aa 1f       	adc	r26, r26
    1abc:	bb 1f       	adc	r27, r27
    1abe:	88 0f       	add	r24, r24
    1ac0:	99 1f       	adc	r25, r25
    1ac2:	aa 1f       	adc	r26, r26
    1ac4:	bb 1f       	adc	r27, r27
    1ac6:	88 0f       	add	r24, r24
    1ac8:	99 1f       	adc	r25, r25
    1aca:	aa 1f       	adc	r26, r26
    1acc:	bb 1f       	adc	r27, r27
    1ace:	9c 01       	movw	r18, r24
    1ad0:	ad 01       	movw	r20, r26
    1ad2:	c8 01       	movw	r24, r16
    1ad4:	b7 01       	movw	r22, r14
    1ad6:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <__udivmodsi4>
    1ada:	da 01       	movw	r26, r20
    1adc:	c9 01       	movw	r24, r18
    1ade:	01 97       	sbiw	r24, 0x01	; 1
    1ae0:	9a 83       	std	Y+2, r25	; 0x02
    1ae2:	89 83       	std	Y+1, r24	; 0x01
    1ae4:	89 e2       	ldi	r24, 0x29	; 41
    1ae6:	90 e0       	ldi	r25, 0x00	; 0
    1ae8:	29 81       	ldd	r18, Y+1	; 0x01
    1aea:	fc 01       	movw	r30, r24
    1aec:	20 83       	st	Z, r18
    1aee:	80 e4       	ldi	r24, 0x40	; 64
    1af0:	90 e0       	ldi	r25, 0x00	; 0
    1af2:	29 81       	ldd	r18, Y+1	; 0x01
    1af4:	3a 81       	ldd	r19, Y+2	; 0x02
    1af6:	23 2f       	mov	r18, r19
    1af8:	33 27       	eor	r19, r19
    1afa:	fc 01       	movw	r30, r24
    1afc:	20 83       	st	Z, r18
    1afe:	00 00       	nop
    1b00:	26 96       	adiw	r28, 0x06	; 6
    1b02:	0f b6       	in	r0, 0x3f	; 63
    1b04:	f8 94       	cli
    1b06:	de bf       	out	0x3e, r29	; 62
    1b08:	0f be       	out	0x3f, r0	; 63
    1b0a:	cd bf       	out	0x3d, r28	; 61
    1b0c:	df 91       	pop	r29
    1b0e:	cf 91       	pop	r28
    1b10:	1f 91       	pop	r17
    1b12:	0f 91       	pop	r16
    1b14:	ff 90       	pop	r15
    1b16:	ef 90       	pop	r14
    1b18:	08 95       	ret

00001b1a <uartGetRxBuffer>:
    1b1a:	cf 93       	push	r28
    1b1c:	df 93       	push	r29
    1b1e:	cd b7       	in	r28, 0x3d	; 61
    1b20:	de b7       	in	r29, 0x3e	; 62
    1b22:	86 e8       	ldi	r24, 0x86	; 134
    1b24:	91 e0       	ldi	r25, 0x01	; 1
    1b26:	df 91       	pop	r29
    1b28:	cf 91       	pop	r28
    1b2a:	08 95       	ret

00001b2c <uartSendByte>:
    1b2c:	cf 93       	push	r28
    1b2e:	df 93       	push	r29
    1b30:	1f 92       	push	r1
    1b32:	cd b7       	in	r28, 0x3d	; 61
    1b34:	de b7       	in	r29, 0x3e	; 62
    1b36:	89 83       	std	Y+1, r24	; 0x01
    1b38:	00 00       	nop
    1b3a:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <uartReadyTx>
    1b3e:	88 23       	and	r24, r24
    1b40:	e1 f3       	breq	.-8      	; 0x1b3a <uartSendByte+0xe>
    1b42:	8c e2       	ldi	r24, 0x2C	; 44
    1b44:	90 e0       	ldi	r25, 0x00	; 0
    1b46:	29 81       	ldd	r18, Y+1	; 0x01
    1b48:	fc 01       	movw	r30, r24
    1b4a:	20 83       	st	Z, r18
    1b4c:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <uartReadyTx>
    1b50:	00 00       	nop
    1b52:	0f 90       	pop	r0
    1b54:	df 91       	pop	r29
    1b56:	cf 91       	pop	r28
    1b58:	08 95       	ret

00001b5a <uartAddToTxBuffer>:

// add byte to end of uart Tx buffer
u08 uartAddToTxBuffer(u08 data)
{
    1b5a:	cf 93       	push	r28
    1b5c:	df 93       	push	r29
    1b5e:	1f 92       	push	r1
    1b60:	cd b7       	in	r28, 0x3d	; 61
    1b62:	de b7       	in	r29, 0x3e	; 62
    1b64:	89 83       	std	Y+1, r24	; 0x01
	// add data byte to the end of the tx buffer
	return bufferAddToEnd(&uartTxBuffer, data);
    1b66:	69 81       	ldd	r22, Y+1	; 0x01
    1b68:	8f e8       	ldi	r24, 0x8F	; 143
    1b6a:	91 e0       	ldi	r25, 0x01	; 1
    1b6c:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <bufferAddToEnd>
}
    1b70:	0f 90       	pop	r0
    1b72:	df 91       	pop	r29
    1b74:	cf 91       	pop	r28
    1b76:	08 95       	ret

00001b78 <uartSendTxBuffer>:

// start transmission of the current uart Tx buffer contents
void uartSendTxBuffer(void)
{
    1b78:	cf 93       	push	r28
    1b7a:	df 93       	push	r29
    1b7c:	cd b7       	in	r28, 0x3d	; 61
    1b7e:	de b7       	in	r29, 0x3e	; 62
	// turn on buffered transmit
	uartBufferedTx = TRUE;
    1b80:	8f ef       	ldi	r24, 0xFF	; 255
    1b82:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <uartBufferedTx>
	// send the first byte to get things going by interrupts
	uartSendByte(bufferGetFromFront(&uartTxBuffer));
    1b86:	8f e8       	ldi	r24, 0x8F	; 143
    1b88:	91 e0       	ldi	r25, 0x01	; 1
    1b8a:	0e 94 86 00 	call	0x10c	; 0x10c <bufferGetFromFront>
    1b8e:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <uartSendByte>
}
    1b92:	00 00       	nop
    1b94:	df 91       	pop	r29
    1b96:	cf 91       	pop	r28
    1b98:	08 95       	ret

00001b9a <__vector_15>:
	}
}
*/
// UART Transmit Complete Interrupt Handler
UART_INTERRUPT_HANDLER(USART_TXC_vect)
{
    1b9a:	1f 92       	push	r1
    1b9c:	0f 92       	push	r0
    1b9e:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1ba2:	0f 92       	push	r0
    1ba4:	11 24       	eor	r1, r1
    1ba6:	0f 93       	push	r16
    1ba8:	1f 93       	push	r17
    1baa:	2f 93       	push	r18
    1bac:	3f 93       	push	r19
    1bae:	4f 93       	push	r20
    1bb0:	5f 93       	push	r21
    1bb2:	6f 93       	push	r22
    1bb4:	7f 93       	push	r23
    1bb6:	8f 93       	push	r24
    1bb8:	9f 93       	push	r25
    1bba:	af 93       	push	r26
    1bbc:	bf 93       	push	r27
    1bbe:	ef 93       	push	r30
    1bc0:	ff 93       	push	r31
    1bc2:	cf 93       	push	r28
    1bc4:	df 93       	push	r29
    1bc6:	cd b7       	in	r28, 0x3d	; 61
    1bc8:	de b7       	in	r29, 0x3e	; 62
	// check if buffered tx is enabled
	if(uartBufferedTx)
    1bca:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <uartBufferedTx>
    1bce:	88 23       	and	r24, r24
    1bd0:	a9 f0       	breq	.+42     	; 0x1bfc <__vector_15+0x62>
	{
		// check if there's data left in the buffer
		if(uartTxBuffer.datalength)
    1bd2:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <uartTxBuffer+0x4>
    1bd6:	90 91 94 01 	lds	r25, 0x0194	; 0x800194 <uartTxBuffer+0x5>
    1bda:	89 2b       	or	r24, r25
    1bdc:	49 f0       	breq	.+18     	; 0x1bf0 <__vector_15+0x56>
		{
			// send byte from top of buffer
			outb(UDR, bufferGetFromFront(&uartTxBuffer));
    1bde:	0c e2       	ldi	r16, 0x2C	; 44
    1be0:	10 e0       	ldi	r17, 0x00	; 0
    1be2:	8f e8       	ldi	r24, 0x8F	; 143
    1be4:	91 e0       	ldi	r25, 0x01	; 1
    1be6:	0e 94 86 00 	call	0x10c	; 0x10c <bufferGetFromFront>
    1bea:	f8 01       	movw	r30, r16
    1bec:	80 83       	st	Z, r24
	{
		// we're using single-byte tx mode
		// indicate transmit complete, back to ready
		uartReadyTx = TRUE;
	}
}
    1bee:	09 c0       	rjmp	.+18     	; 0x1c02 <__vector_15+0x68>
			outb(UDR, bufferGetFromFront(&uartTxBuffer));
		}
		else
		{
			// no data left
			uartBufferedTx = FALSE;
    1bf0:	10 92 8e 01 	sts	0x018E, r1	; 0x80018e <uartBufferedTx>
			// return to ready state
			uartReadyTx = TRUE;
    1bf4:	8f ef       	ldi	r24, 0xFF	; 255
    1bf6:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <uartReadyTx>
	{
		// we're using single-byte tx mode
		// indicate transmit complete, back to ready
		uartReadyTx = TRUE;
	}
}
    1bfa:	03 c0       	rjmp	.+6      	; 0x1c02 <__vector_15+0x68>
	}
	else
	{
		// we're using single-byte tx mode
		// indicate transmit complete, back to ready
		uartReadyTx = TRUE;
    1bfc:	8f ef       	ldi	r24, 0xFF	; 255
    1bfe:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <uartReadyTx>
	}
}
    1c02:	00 00       	nop
    1c04:	df 91       	pop	r29
    1c06:	cf 91       	pop	r28
    1c08:	ff 91       	pop	r31
    1c0a:	ef 91       	pop	r30
    1c0c:	bf 91       	pop	r27
    1c0e:	af 91       	pop	r26
    1c10:	9f 91       	pop	r25
    1c12:	8f 91       	pop	r24
    1c14:	7f 91       	pop	r23
    1c16:	6f 91       	pop	r22
    1c18:	5f 91       	pop	r21
    1c1a:	4f 91       	pop	r20
    1c1c:	3f 91       	pop	r19
    1c1e:	2f 91       	pop	r18
    1c20:	1f 91       	pop	r17
    1c22:	0f 91       	pop	r16
    1c24:	0f 90       	pop	r0
    1c26:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1c2a:	0f 90       	pop	r0
    1c2c:	1f 90       	pop	r1
    1c2e:	18 95       	reti

00001c30 <__vector_13>:

// UART Receive Complete Interrupt Handler
UART_INTERRUPT_HANDLER(USART_RXC_vect)
{
    1c30:	1f 92       	push	r1
    1c32:	0f 92       	push	r0
    1c34:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1c38:	0f 92       	push	r0
    1c3a:	11 24       	eor	r1, r1
    1c3c:	2f 93       	push	r18
    1c3e:	3f 93       	push	r19
    1c40:	4f 93       	push	r20
    1c42:	5f 93       	push	r21
    1c44:	6f 93       	push	r22
    1c46:	7f 93       	push	r23
    1c48:	8f 93       	push	r24
    1c4a:	9f 93       	push	r25
    1c4c:	af 93       	push	r26
    1c4e:	bf 93       	push	r27
    1c50:	ef 93       	push	r30
    1c52:	ff 93       	push	r31
    1c54:	cf 93       	push	r28
    1c56:	df 93       	push	r29
    1c58:	1f 92       	push	r1
    1c5a:	cd b7       	in	r28, 0x3d	; 61
    1c5c:	de b7       	in	r29, 0x3e	; 62
	u08 c;
	
	// get received char
	c = inb(UDR);
    1c5e:	8c e2       	ldi	r24, 0x2C	; 44
    1c60:	90 e0       	ldi	r25, 0x00	; 0
    1c62:	fc 01       	movw	r30, r24
    1c64:	80 81       	ld	r24, Z
    1c66:	89 83       	std	Y+1, r24	; 0x01

	// if there's a user function to handle this receive event
	if(UartRxFunc)
    1c68:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <UartRxFunc>
    1c6c:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <UartRxFunc+0x1>
    1c70:	89 2b       	or	r24, r25
    1c72:	41 f0       	breq	.+16     	; 0x1c84 <__vector_13+0x54>
	{
		// call it and pass the received data
		UartRxFunc(c);
    1c74:	20 91 42 01 	lds	r18, 0x0142	; 0x800142 <UartRxFunc>
    1c78:	30 91 43 01 	lds	r19, 0x0143	; 0x800143 <UartRxFunc+0x1>
    1c7c:	89 81       	ldd	r24, Y+1	; 0x01
    1c7e:	f9 01       	movw	r30, r18
    1c80:	09 95       	icall
			// no space in buffer
			// count overflow
			uartRxOverflow++;
		}
	}
}
    1c82:	10 c0       	rjmp	.+32     	; 0x1ca4 <__vector_13+0x74>
	else
	{
		// otherwise do default processing
		// put received char in buffer
		// check if there's space
		if( !bufferAddToEnd(&uartRxBuffer, c) )
    1c84:	69 81       	ldd	r22, Y+1	; 0x01
    1c86:	86 e8       	ldi	r24, 0x86	; 134
    1c88:	91 e0       	ldi	r25, 0x01	; 1
    1c8a:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <bufferAddToEnd>
    1c8e:	88 23       	and	r24, r24
    1c90:	49 f4       	brne	.+18     	; 0x1ca4 <__vector_13+0x74>
		{
			// no space in buffer
			// count overflow
			uartRxOverflow++;
    1c92:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <uartRxOverflow>
    1c96:	90 91 98 01 	lds	r25, 0x0198	; 0x800198 <uartRxOverflow+0x1>
    1c9a:	01 96       	adiw	r24, 0x01	; 1
    1c9c:	90 93 98 01 	sts	0x0198, r25	; 0x800198 <uartRxOverflow+0x1>
    1ca0:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <uartRxOverflow>
		}
	}
}
    1ca4:	00 00       	nop
    1ca6:	0f 90       	pop	r0
    1ca8:	df 91       	pop	r29
    1caa:	cf 91       	pop	r28
    1cac:	ff 91       	pop	r31
    1cae:	ef 91       	pop	r30
    1cb0:	bf 91       	pop	r27
    1cb2:	af 91       	pop	r26
    1cb4:	9f 91       	pop	r25
    1cb6:	8f 91       	pop	r24
    1cb8:	7f 91       	pop	r23
    1cba:	6f 91       	pop	r22
    1cbc:	5f 91       	pop	r21
    1cbe:	4f 91       	pop	r20
    1cc0:	3f 91       	pop	r19
    1cc2:	2f 91       	pop	r18
    1cc4:	0f 90       	pop	r0
    1cc6:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1cca:	0f 90       	pop	r0
    1ccc:	1f 90       	pop	r1
    1cce:	18 95       	reti

00001cd0 <USART_PutChar>:
}
//-------------------------------------
// Send sgngle char 
//-------------------------------------
void USART_PutChar(unsigned char data)
{
    1cd0:	cf 93       	push	r28
    1cd2:	df 93       	push	r29
    1cd4:	1f 92       	push	r1
    1cd6:	cd b7       	in	r28, 0x3d	; 61
    1cd8:	de b7       	in	r29, 0x3e	; 62
    1cda:	89 83       	std	Y+1, r24	; 0x01
while (!(UCSRA & (1 << UDRE)));
    1cdc:	00 00       	nop
    1cde:	8b e2       	ldi	r24, 0x2B	; 43
    1ce0:	90 e0       	ldi	r25, 0x00	; 0
    1ce2:	fc 01       	movw	r30, r24
    1ce4:	80 81       	ld	r24, Z
    1ce6:	88 2f       	mov	r24, r24
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
    1cea:	80 72       	andi	r24, 0x20	; 32
    1cec:	99 27       	eor	r25, r25
    1cee:	89 2b       	or	r24, r25
    1cf0:	b1 f3       	breq	.-20     	; 0x1cde <USART_PutChar+0xe>
UDR = data;
    1cf2:	8c e2       	ldi	r24, 0x2C	; 44
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	29 81       	ldd	r18, Y+1	; 0x01
    1cf8:	fc 01       	movw	r30, r24
    1cfa:	20 83       	st	Z, r18
}
    1cfc:	00 00       	nop
    1cfe:	0f 90       	pop	r0
    1d00:	df 91       	pop	r29
    1d02:	cf 91       	pop	r28
    1d04:	08 95       	ret

00001d06 <USART_GetChar>:
//-------------------------------------
// Receive single char
//-------------------------------------
unsigned char USART_GetChar(void)
{
    1d06:	cf 93       	push	r28
    1d08:	df 93       	push	r29
    1d0a:	cd b7       	in	r28, 0x3d	; 61
    1d0c:	de b7       	in	r29, 0x3e	; 62
while (!(UCSRA & (1 << RXC)));
    1d0e:	00 00       	nop
    1d10:	8b e2       	ldi	r24, 0x2B	; 43
    1d12:	90 e0       	ldi	r25, 0x00	; 0
    1d14:	fc 01       	movw	r30, r24
    1d16:	80 81       	ld	r24, Z
    1d18:	88 23       	and	r24, r24
    1d1a:	d4 f7       	brge	.-12     	; 0x1d10 <USART_GetChar+0xa>
return UDR;
    1d1c:	8c e2       	ldi	r24, 0x2C	; 44
    1d1e:	90 e0       	ldi	r25, 0x00	; 0
    1d20:	fc 01       	movw	r30, r24
    1d22:	80 81       	ld	r24, Z
}
    1d24:	df 91       	pop	r29
    1d26:	cf 91       	pop	r28
    1d28:	08 95       	ret

00001d2a <USART_PutString>:
//-------------------------------------
// Send string
//-------------------------------------
void USART_PutString(char * s)
{
    1d2a:	cf 93       	push	r28
    1d2c:	df 93       	push	r29
    1d2e:	00 d0       	rcall	.+0      	; 0x1d30 <USART_PutString+0x6>
    1d30:	cd b7       	in	r28, 0x3d	; 61
    1d32:	de b7       	in	r29, 0x3e	; 62
    1d34:	9a 83       	std	Y+2, r25	; 0x02
    1d36:	89 83       	std	Y+1, r24	; 0x01
while(*s)
    1d38:	0b c0       	rjmp	.+22     	; 0x1d50 <USART_PutString+0x26>
	USART_PutChar(*s++);
    1d3a:	89 81       	ldd	r24, Y+1	; 0x01
    1d3c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d3e:	9c 01       	movw	r18, r24
    1d40:	2f 5f       	subi	r18, 0xFF	; 255
    1d42:	3f 4f       	sbci	r19, 0xFF	; 255
    1d44:	3a 83       	std	Y+2, r19	; 0x02
    1d46:	29 83       	std	Y+1, r18	; 0x01
    1d48:	fc 01       	movw	r30, r24
    1d4a:	80 81       	ld	r24, Z
    1d4c:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <USART_PutChar>
//-------------------------------------
// Send string
//-------------------------------------
void USART_PutString(char * s)
{
while(*s)
    1d50:	89 81       	ldd	r24, Y+1	; 0x01
    1d52:	9a 81       	ldd	r25, Y+2	; 0x02
    1d54:	fc 01       	movw	r30, r24
    1d56:	80 81       	ld	r24, Z
    1d58:	88 23       	and	r24, r24
    1d5a:	79 f7       	brne	.-34     	; 0x1d3a <USART_PutString+0x10>
	USART_PutChar(*s++);
}
    1d5c:	00 00       	nop
    1d5e:	0f 90       	pop	r0
    1d60:	0f 90       	pop	r0
    1d62:	df 91       	pop	r29
    1d64:	cf 91       	pop	r28
    1d66:	08 95       	ret

00001d68 <USART_GetString>:
//-------------------------------------
// Receive string
//-------------------------------------
void USART_GetString(char * s)
{
    1d68:	cf 93       	push	r28
    1d6a:	df 93       	push	r29
    1d6c:	00 d0       	rcall	.+0      	; 0x1d6e <USART_GetString+0x6>
    1d6e:	1f 92       	push	r1
    1d70:	cd b7       	in	r28, 0x3d	; 61
    1d72:	de b7       	in	r29, 0x3e	; 62
    1d74:	9b 83       	std	Y+3, r25	; 0x03
    1d76:	8a 83       	std	Y+2, r24	; 0x02
char ch;

do{
  ch = USART_GetChar();
    1d78:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <USART_GetChar>
    1d7c:	89 83       	std	Y+1, r24	; 0x01
  //USART_PutChar(ch);
  *s++ = ch;
    1d7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d80:	9b 81       	ldd	r25, Y+3	; 0x03
    1d82:	9c 01       	movw	r18, r24
    1d84:	2f 5f       	subi	r18, 0xFF	; 255
    1d86:	3f 4f       	sbci	r19, 0xFF	; 255
    1d88:	3b 83       	std	Y+3, r19	; 0x03
    1d8a:	2a 83       	std	Y+2, r18	; 0x02
    1d8c:	29 81       	ldd	r18, Y+1	; 0x01
    1d8e:	fc 01       	movw	r30, r24
    1d90:	20 83       	st	Z, r18
  if(ch == 0x0D) *s = 0;
    1d92:	89 81       	ldd	r24, Y+1	; 0x01
    1d94:	8d 30       	cpi	r24, 0x0D	; 13
    1d96:	21 f4       	brne	.+8      	; 0x1da0 <USART_GetString+0x38>
    1d98:	8a 81       	ldd	r24, Y+2	; 0x02
    1d9a:	9b 81       	ldd	r25, Y+3	; 0x03
    1d9c:	fc 01       	movw	r30, r24
    1d9e:	10 82       	st	Z, r1
}while(ch != 0x0D);
    1da0:	89 81       	ldd	r24, Y+1	; 0x01
    1da2:	8d 30       	cpi	r24, 0x0D	; 13
    1da4:	49 f7       	brne	.-46     	; 0x1d78 <USART_GetString+0x10>
}
    1da6:	00 00       	nop
    1da8:	0f 90       	pop	r0
    1daa:	0f 90       	pop	r0
    1dac:	0f 90       	pop	r0
    1dae:	df 91       	pop	r29
    1db0:	cf 91       	pop	r28
    1db2:	08 95       	ret

00001db4 <__cmpsf2>:
    1db4:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <__fp_cmp>
    1db8:	08 f4       	brcc	.+2      	; 0x1dbc <__cmpsf2+0x8>
    1dba:	81 e0       	ldi	r24, 0x01	; 1
    1dbc:	08 95       	ret

00001dbe <__divsf3>:
    1dbe:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <__divsf3x>
    1dc2:	0c 94 ff 0f 	jmp	0x1ffe	; 0x1ffe <__fp_round>
    1dc6:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <__fp_pscB>
    1dca:	58 f0       	brcs	.+22     	; 0x1de2 <__divsf3+0x24>
    1dcc:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <__fp_pscA>
    1dd0:	40 f0       	brcs	.+16     	; 0x1de2 <__divsf3+0x24>
    1dd2:	29 f4       	brne	.+10     	; 0x1dde <__divsf3+0x20>
    1dd4:	5f 3f       	cpi	r21, 0xFF	; 255
    1dd6:	29 f0       	breq	.+10     	; 0x1de2 <__divsf3+0x24>
    1dd8:	0c 94 e8 0f 	jmp	0x1fd0	; 0x1fd0 <__fp_inf>
    1ddc:	51 11       	cpse	r21, r1
    1dde:	0c 94 33 10 	jmp	0x2066	; 0x2066 <__fp_szero>
    1de2:	0c 94 ee 0f 	jmp	0x1fdc	; 0x1fdc <__fp_nan>

00001de6 <__divsf3x>:
    1de6:	0e 94 10 10 	call	0x2020	; 0x2020 <__fp_split3>
    1dea:	68 f3       	brcs	.-38     	; 0x1dc6 <__divsf3+0x8>

00001dec <__divsf3_pse>:
    1dec:	99 23       	and	r25, r25
    1dee:	b1 f3       	breq	.-20     	; 0x1ddc <__divsf3+0x1e>
    1df0:	55 23       	and	r21, r21
    1df2:	91 f3       	breq	.-28     	; 0x1dd8 <__divsf3+0x1a>
    1df4:	95 1b       	sub	r25, r21
    1df6:	55 0b       	sbc	r21, r21
    1df8:	bb 27       	eor	r27, r27
    1dfa:	aa 27       	eor	r26, r26
    1dfc:	62 17       	cp	r22, r18
    1dfe:	73 07       	cpc	r23, r19
    1e00:	84 07       	cpc	r24, r20
    1e02:	38 f0       	brcs	.+14     	; 0x1e12 <__divsf3_pse+0x26>
    1e04:	9f 5f       	subi	r25, 0xFF	; 255
    1e06:	5f 4f       	sbci	r21, 0xFF	; 255
    1e08:	22 0f       	add	r18, r18
    1e0a:	33 1f       	adc	r19, r19
    1e0c:	44 1f       	adc	r20, r20
    1e0e:	aa 1f       	adc	r26, r26
    1e10:	a9 f3       	breq	.-22     	; 0x1dfc <__divsf3_pse+0x10>
    1e12:	35 d0       	rcall	.+106    	; 0x1e7e <__divsf3_pse+0x92>
    1e14:	0e 2e       	mov	r0, r30
    1e16:	3a f0       	brmi	.+14     	; 0x1e26 <__divsf3_pse+0x3a>
    1e18:	e0 e8       	ldi	r30, 0x80	; 128
    1e1a:	32 d0       	rcall	.+100    	; 0x1e80 <__divsf3_pse+0x94>
    1e1c:	91 50       	subi	r25, 0x01	; 1
    1e1e:	50 40       	sbci	r21, 0x00	; 0
    1e20:	e6 95       	lsr	r30
    1e22:	00 1c       	adc	r0, r0
    1e24:	ca f7       	brpl	.-14     	; 0x1e18 <__divsf3_pse+0x2c>
    1e26:	2b d0       	rcall	.+86     	; 0x1e7e <__divsf3_pse+0x92>
    1e28:	fe 2f       	mov	r31, r30
    1e2a:	29 d0       	rcall	.+82     	; 0x1e7e <__divsf3_pse+0x92>
    1e2c:	66 0f       	add	r22, r22
    1e2e:	77 1f       	adc	r23, r23
    1e30:	88 1f       	adc	r24, r24
    1e32:	bb 1f       	adc	r27, r27
    1e34:	26 17       	cp	r18, r22
    1e36:	37 07       	cpc	r19, r23
    1e38:	48 07       	cpc	r20, r24
    1e3a:	ab 07       	cpc	r26, r27
    1e3c:	b0 e8       	ldi	r27, 0x80	; 128
    1e3e:	09 f0       	breq	.+2      	; 0x1e42 <__divsf3_pse+0x56>
    1e40:	bb 0b       	sbc	r27, r27
    1e42:	80 2d       	mov	r24, r0
    1e44:	bf 01       	movw	r22, r30
    1e46:	ff 27       	eor	r31, r31
    1e48:	93 58       	subi	r25, 0x83	; 131
    1e4a:	5f 4f       	sbci	r21, 0xFF	; 255
    1e4c:	3a f0       	brmi	.+14     	; 0x1e5c <__divsf3_pse+0x70>
    1e4e:	9e 3f       	cpi	r25, 0xFE	; 254
    1e50:	51 05       	cpc	r21, r1
    1e52:	78 f0       	brcs	.+30     	; 0x1e72 <__divsf3_pse+0x86>
    1e54:	0c 94 e8 0f 	jmp	0x1fd0	; 0x1fd0 <__fp_inf>
    1e58:	0c 94 33 10 	jmp	0x2066	; 0x2066 <__fp_szero>
    1e5c:	5f 3f       	cpi	r21, 0xFF	; 255
    1e5e:	e4 f3       	brlt	.-8      	; 0x1e58 <__divsf3_pse+0x6c>
    1e60:	98 3e       	cpi	r25, 0xE8	; 232
    1e62:	d4 f3       	brlt	.-12     	; 0x1e58 <__divsf3_pse+0x6c>
    1e64:	86 95       	lsr	r24
    1e66:	77 95       	ror	r23
    1e68:	67 95       	ror	r22
    1e6a:	b7 95       	ror	r27
    1e6c:	f7 95       	ror	r31
    1e6e:	9f 5f       	subi	r25, 0xFF	; 255
    1e70:	c9 f7       	brne	.-14     	; 0x1e64 <__divsf3_pse+0x78>
    1e72:	88 0f       	add	r24, r24
    1e74:	91 1d       	adc	r25, r1
    1e76:	96 95       	lsr	r25
    1e78:	87 95       	ror	r24
    1e7a:	97 f9       	bld	r25, 7
    1e7c:	08 95       	ret
    1e7e:	e1 e0       	ldi	r30, 0x01	; 1
    1e80:	66 0f       	add	r22, r22
    1e82:	77 1f       	adc	r23, r23
    1e84:	88 1f       	adc	r24, r24
    1e86:	bb 1f       	adc	r27, r27
    1e88:	62 17       	cp	r22, r18
    1e8a:	73 07       	cpc	r23, r19
    1e8c:	84 07       	cpc	r24, r20
    1e8e:	ba 07       	cpc	r27, r26
    1e90:	20 f0       	brcs	.+8      	; 0x1e9a <__divsf3_pse+0xae>
    1e92:	62 1b       	sub	r22, r18
    1e94:	73 0b       	sbc	r23, r19
    1e96:	84 0b       	sbc	r24, r20
    1e98:	ba 0b       	sbc	r27, r26
    1e9a:	ee 1f       	adc	r30, r30
    1e9c:	88 f7       	brcc	.-30     	; 0x1e80 <__divsf3_pse+0x94>
    1e9e:	e0 95       	com	r30
    1ea0:	08 95       	ret

00001ea2 <__fixsfsi>:
    1ea2:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <__fixunssfsi>
    1ea6:	68 94       	set
    1ea8:	b1 11       	cpse	r27, r1
    1eaa:	0c 94 33 10 	jmp	0x2066	; 0x2066 <__fp_szero>
    1eae:	08 95       	ret

00001eb0 <__fixunssfsi>:
    1eb0:	0e 94 18 10 	call	0x2030	; 0x2030 <__fp_splitA>
    1eb4:	88 f0       	brcs	.+34     	; 0x1ed8 <__fixunssfsi+0x28>
    1eb6:	9f 57       	subi	r25, 0x7F	; 127
    1eb8:	98 f0       	brcs	.+38     	; 0x1ee0 <__fixunssfsi+0x30>
    1eba:	b9 2f       	mov	r27, r25
    1ebc:	99 27       	eor	r25, r25
    1ebe:	b7 51       	subi	r27, 0x17	; 23
    1ec0:	b0 f0       	brcs	.+44     	; 0x1eee <__fixunssfsi+0x3e>
    1ec2:	e1 f0       	breq	.+56     	; 0x1efc <__fixunssfsi+0x4c>
    1ec4:	66 0f       	add	r22, r22
    1ec6:	77 1f       	adc	r23, r23
    1ec8:	88 1f       	adc	r24, r24
    1eca:	99 1f       	adc	r25, r25
    1ecc:	1a f0       	brmi	.+6      	; 0x1ed4 <__fixunssfsi+0x24>
    1ece:	ba 95       	dec	r27
    1ed0:	c9 f7       	brne	.-14     	; 0x1ec4 <__fixunssfsi+0x14>
    1ed2:	14 c0       	rjmp	.+40     	; 0x1efc <__fixunssfsi+0x4c>
    1ed4:	b1 30       	cpi	r27, 0x01	; 1
    1ed6:	91 f0       	breq	.+36     	; 0x1efc <__fixunssfsi+0x4c>
    1ed8:	0e 94 32 10 	call	0x2064	; 0x2064 <__fp_zero>
    1edc:	b1 e0       	ldi	r27, 0x01	; 1
    1ede:	08 95       	ret
    1ee0:	0c 94 32 10 	jmp	0x2064	; 0x2064 <__fp_zero>
    1ee4:	67 2f       	mov	r22, r23
    1ee6:	78 2f       	mov	r23, r24
    1ee8:	88 27       	eor	r24, r24
    1eea:	b8 5f       	subi	r27, 0xF8	; 248
    1eec:	39 f0       	breq	.+14     	; 0x1efc <__fixunssfsi+0x4c>
    1eee:	b9 3f       	cpi	r27, 0xF9	; 249
    1ef0:	cc f3       	brlt	.-14     	; 0x1ee4 <__fixunssfsi+0x34>
    1ef2:	86 95       	lsr	r24
    1ef4:	77 95       	ror	r23
    1ef6:	67 95       	ror	r22
    1ef8:	b3 95       	inc	r27
    1efa:	d9 f7       	brne	.-10     	; 0x1ef2 <__fixunssfsi+0x42>
    1efc:	3e f4       	brtc	.+14     	; 0x1f0c <__fixunssfsi+0x5c>
    1efe:	90 95       	com	r25
    1f00:	80 95       	com	r24
    1f02:	70 95       	com	r23
    1f04:	61 95       	neg	r22
    1f06:	7f 4f       	sbci	r23, 0xFF	; 255
    1f08:	8f 4f       	sbci	r24, 0xFF	; 255
    1f0a:	9f 4f       	sbci	r25, 0xFF	; 255
    1f0c:	08 95       	ret

00001f0e <__floatunsisf>:
    1f0e:	e8 94       	clt
    1f10:	09 c0       	rjmp	.+18     	; 0x1f24 <__floatsisf+0x12>

00001f12 <__floatsisf>:
    1f12:	97 fb       	bst	r25, 7
    1f14:	3e f4       	brtc	.+14     	; 0x1f24 <__floatsisf+0x12>
    1f16:	90 95       	com	r25
    1f18:	80 95       	com	r24
    1f1a:	70 95       	com	r23
    1f1c:	61 95       	neg	r22
    1f1e:	7f 4f       	sbci	r23, 0xFF	; 255
    1f20:	8f 4f       	sbci	r24, 0xFF	; 255
    1f22:	9f 4f       	sbci	r25, 0xFF	; 255
    1f24:	99 23       	and	r25, r25
    1f26:	a9 f0       	breq	.+42     	; 0x1f52 <__floatsisf+0x40>
    1f28:	f9 2f       	mov	r31, r25
    1f2a:	96 e9       	ldi	r25, 0x96	; 150
    1f2c:	bb 27       	eor	r27, r27
    1f2e:	93 95       	inc	r25
    1f30:	f6 95       	lsr	r31
    1f32:	87 95       	ror	r24
    1f34:	77 95       	ror	r23
    1f36:	67 95       	ror	r22
    1f38:	b7 95       	ror	r27
    1f3a:	f1 11       	cpse	r31, r1
    1f3c:	f8 cf       	rjmp	.-16     	; 0x1f2e <__floatsisf+0x1c>
    1f3e:	fa f4       	brpl	.+62     	; 0x1f7e <__floatsisf+0x6c>
    1f40:	bb 0f       	add	r27, r27
    1f42:	11 f4       	brne	.+4      	; 0x1f48 <__floatsisf+0x36>
    1f44:	60 ff       	sbrs	r22, 0
    1f46:	1b c0       	rjmp	.+54     	; 0x1f7e <__floatsisf+0x6c>
    1f48:	6f 5f       	subi	r22, 0xFF	; 255
    1f4a:	7f 4f       	sbci	r23, 0xFF	; 255
    1f4c:	8f 4f       	sbci	r24, 0xFF	; 255
    1f4e:	9f 4f       	sbci	r25, 0xFF	; 255
    1f50:	16 c0       	rjmp	.+44     	; 0x1f7e <__floatsisf+0x6c>
    1f52:	88 23       	and	r24, r24
    1f54:	11 f0       	breq	.+4      	; 0x1f5a <__floatsisf+0x48>
    1f56:	96 e9       	ldi	r25, 0x96	; 150
    1f58:	11 c0       	rjmp	.+34     	; 0x1f7c <__floatsisf+0x6a>
    1f5a:	77 23       	and	r23, r23
    1f5c:	21 f0       	breq	.+8      	; 0x1f66 <__floatsisf+0x54>
    1f5e:	9e e8       	ldi	r25, 0x8E	; 142
    1f60:	87 2f       	mov	r24, r23
    1f62:	76 2f       	mov	r23, r22
    1f64:	05 c0       	rjmp	.+10     	; 0x1f70 <__floatsisf+0x5e>
    1f66:	66 23       	and	r22, r22
    1f68:	71 f0       	breq	.+28     	; 0x1f86 <__floatsisf+0x74>
    1f6a:	96 e8       	ldi	r25, 0x86	; 134
    1f6c:	86 2f       	mov	r24, r22
    1f6e:	70 e0       	ldi	r23, 0x00	; 0
    1f70:	60 e0       	ldi	r22, 0x00	; 0
    1f72:	2a f0       	brmi	.+10     	; 0x1f7e <__floatsisf+0x6c>
    1f74:	9a 95       	dec	r25
    1f76:	66 0f       	add	r22, r22
    1f78:	77 1f       	adc	r23, r23
    1f7a:	88 1f       	adc	r24, r24
    1f7c:	da f7       	brpl	.-10     	; 0x1f74 <__floatsisf+0x62>
    1f7e:	88 0f       	add	r24, r24
    1f80:	96 95       	lsr	r25
    1f82:	87 95       	ror	r24
    1f84:	97 f9       	bld	r25, 7
    1f86:	08 95       	ret

00001f88 <__fp_cmp>:
    1f88:	99 0f       	add	r25, r25
    1f8a:	00 08       	sbc	r0, r0
    1f8c:	55 0f       	add	r21, r21
    1f8e:	aa 0b       	sbc	r26, r26
    1f90:	e0 e8       	ldi	r30, 0x80	; 128
    1f92:	fe ef       	ldi	r31, 0xFE	; 254
    1f94:	16 16       	cp	r1, r22
    1f96:	17 06       	cpc	r1, r23
    1f98:	e8 07       	cpc	r30, r24
    1f9a:	f9 07       	cpc	r31, r25
    1f9c:	c0 f0       	brcs	.+48     	; 0x1fce <__fp_cmp+0x46>
    1f9e:	12 16       	cp	r1, r18
    1fa0:	13 06       	cpc	r1, r19
    1fa2:	e4 07       	cpc	r30, r20
    1fa4:	f5 07       	cpc	r31, r21
    1fa6:	98 f0       	brcs	.+38     	; 0x1fce <__fp_cmp+0x46>
    1fa8:	62 1b       	sub	r22, r18
    1faa:	73 0b       	sbc	r23, r19
    1fac:	84 0b       	sbc	r24, r20
    1fae:	95 0b       	sbc	r25, r21
    1fb0:	39 f4       	brne	.+14     	; 0x1fc0 <__fp_cmp+0x38>
    1fb2:	0a 26       	eor	r0, r26
    1fb4:	61 f0       	breq	.+24     	; 0x1fce <__fp_cmp+0x46>
    1fb6:	23 2b       	or	r18, r19
    1fb8:	24 2b       	or	r18, r20
    1fba:	25 2b       	or	r18, r21
    1fbc:	21 f4       	brne	.+8      	; 0x1fc6 <__fp_cmp+0x3e>
    1fbe:	08 95       	ret
    1fc0:	0a 26       	eor	r0, r26
    1fc2:	09 f4       	brne	.+2      	; 0x1fc6 <__fp_cmp+0x3e>
    1fc4:	a1 40       	sbci	r26, 0x01	; 1
    1fc6:	a6 95       	lsr	r26
    1fc8:	8f ef       	ldi	r24, 0xFF	; 255
    1fca:	81 1d       	adc	r24, r1
    1fcc:	81 1d       	adc	r24, r1
    1fce:	08 95       	ret

00001fd0 <__fp_inf>:
    1fd0:	97 f9       	bld	r25, 7
    1fd2:	9f 67       	ori	r25, 0x7F	; 127
    1fd4:	80 e8       	ldi	r24, 0x80	; 128
    1fd6:	70 e0       	ldi	r23, 0x00	; 0
    1fd8:	60 e0       	ldi	r22, 0x00	; 0
    1fda:	08 95       	ret

00001fdc <__fp_nan>:
    1fdc:	9f ef       	ldi	r25, 0xFF	; 255
    1fde:	80 ec       	ldi	r24, 0xC0	; 192
    1fe0:	08 95       	ret

00001fe2 <__fp_pscA>:
    1fe2:	00 24       	eor	r0, r0
    1fe4:	0a 94       	dec	r0
    1fe6:	16 16       	cp	r1, r22
    1fe8:	17 06       	cpc	r1, r23
    1fea:	18 06       	cpc	r1, r24
    1fec:	09 06       	cpc	r0, r25
    1fee:	08 95       	ret

00001ff0 <__fp_pscB>:
    1ff0:	00 24       	eor	r0, r0
    1ff2:	0a 94       	dec	r0
    1ff4:	12 16       	cp	r1, r18
    1ff6:	13 06       	cpc	r1, r19
    1ff8:	14 06       	cpc	r1, r20
    1ffa:	05 06       	cpc	r0, r21
    1ffc:	08 95       	ret

00001ffe <__fp_round>:
    1ffe:	09 2e       	mov	r0, r25
    2000:	03 94       	inc	r0
    2002:	00 0c       	add	r0, r0
    2004:	11 f4       	brne	.+4      	; 0x200a <__fp_round+0xc>
    2006:	88 23       	and	r24, r24
    2008:	52 f0       	brmi	.+20     	; 0x201e <__fp_round+0x20>
    200a:	bb 0f       	add	r27, r27
    200c:	40 f4       	brcc	.+16     	; 0x201e <__fp_round+0x20>
    200e:	bf 2b       	or	r27, r31
    2010:	11 f4       	brne	.+4      	; 0x2016 <__fp_round+0x18>
    2012:	60 ff       	sbrs	r22, 0
    2014:	04 c0       	rjmp	.+8      	; 0x201e <__fp_round+0x20>
    2016:	6f 5f       	subi	r22, 0xFF	; 255
    2018:	7f 4f       	sbci	r23, 0xFF	; 255
    201a:	8f 4f       	sbci	r24, 0xFF	; 255
    201c:	9f 4f       	sbci	r25, 0xFF	; 255
    201e:	08 95       	ret

00002020 <__fp_split3>:
    2020:	57 fd       	sbrc	r21, 7
    2022:	90 58       	subi	r25, 0x80	; 128
    2024:	44 0f       	add	r20, r20
    2026:	55 1f       	adc	r21, r21
    2028:	59 f0       	breq	.+22     	; 0x2040 <__fp_splitA+0x10>
    202a:	5f 3f       	cpi	r21, 0xFF	; 255
    202c:	71 f0       	breq	.+28     	; 0x204a <__fp_splitA+0x1a>
    202e:	47 95       	ror	r20

00002030 <__fp_splitA>:
    2030:	88 0f       	add	r24, r24
    2032:	97 fb       	bst	r25, 7
    2034:	99 1f       	adc	r25, r25
    2036:	61 f0       	breq	.+24     	; 0x2050 <__fp_splitA+0x20>
    2038:	9f 3f       	cpi	r25, 0xFF	; 255
    203a:	79 f0       	breq	.+30     	; 0x205a <__fp_splitA+0x2a>
    203c:	87 95       	ror	r24
    203e:	08 95       	ret
    2040:	12 16       	cp	r1, r18
    2042:	13 06       	cpc	r1, r19
    2044:	14 06       	cpc	r1, r20
    2046:	55 1f       	adc	r21, r21
    2048:	f2 cf       	rjmp	.-28     	; 0x202e <__fp_split3+0xe>
    204a:	46 95       	lsr	r20
    204c:	f1 df       	rcall	.-30     	; 0x2030 <__fp_splitA>
    204e:	08 c0       	rjmp	.+16     	; 0x2060 <__fp_splitA+0x30>
    2050:	16 16       	cp	r1, r22
    2052:	17 06       	cpc	r1, r23
    2054:	18 06       	cpc	r1, r24
    2056:	99 1f       	adc	r25, r25
    2058:	f1 cf       	rjmp	.-30     	; 0x203c <__fp_splitA+0xc>
    205a:	86 95       	lsr	r24
    205c:	71 05       	cpc	r23, r1
    205e:	61 05       	cpc	r22, r1
    2060:	08 94       	sec
    2062:	08 95       	ret

00002064 <__fp_zero>:
    2064:	e8 94       	clt

00002066 <__fp_szero>:
    2066:	bb 27       	eor	r27, r27
    2068:	66 27       	eor	r22, r22
    206a:	77 27       	eor	r23, r23
    206c:	cb 01       	movw	r24, r22
    206e:	97 f9       	bld	r25, 7
    2070:	08 95       	ret

00002072 <__gesf2>:
    2072:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <__fp_cmp>
    2076:	08 f4       	brcc	.+2      	; 0x207a <__gesf2+0x8>
    2078:	8f ef       	ldi	r24, 0xFF	; 255
    207a:	08 95       	ret

0000207c <__mulsf3>:
    207c:	0e 94 51 10 	call	0x20a2	; 0x20a2 <__mulsf3x>
    2080:	0c 94 ff 0f 	jmp	0x1ffe	; 0x1ffe <__fp_round>
    2084:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <__fp_pscA>
    2088:	38 f0       	brcs	.+14     	; 0x2098 <__mulsf3+0x1c>
    208a:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <__fp_pscB>
    208e:	20 f0       	brcs	.+8      	; 0x2098 <__mulsf3+0x1c>
    2090:	95 23       	and	r25, r21
    2092:	11 f0       	breq	.+4      	; 0x2098 <__mulsf3+0x1c>
    2094:	0c 94 e8 0f 	jmp	0x1fd0	; 0x1fd0 <__fp_inf>
    2098:	0c 94 ee 0f 	jmp	0x1fdc	; 0x1fdc <__fp_nan>
    209c:	11 24       	eor	r1, r1
    209e:	0c 94 33 10 	jmp	0x2066	; 0x2066 <__fp_szero>

000020a2 <__mulsf3x>:
    20a2:	0e 94 10 10 	call	0x2020	; 0x2020 <__fp_split3>
    20a6:	70 f3       	brcs	.-36     	; 0x2084 <__mulsf3+0x8>

000020a8 <__mulsf3_pse>:
    20a8:	95 9f       	mul	r25, r21
    20aa:	c1 f3       	breq	.-16     	; 0x209c <__mulsf3+0x20>
    20ac:	95 0f       	add	r25, r21
    20ae:	50 e0       	ldi	r21, 0x00	; 0
    20b0:	55 1f       	adc	r21, r21
    20b2:	62 9f       	mul	r22, r18
    20b4:	f0 01       	movw	r30, r0
    20b6:	72 9f       	mul	r23, r18
    20b8:	bb 27       	eor	r27, r27
    20ba:	f0 0d       	add	r31, r0
    20bc:	b1 1d       	adc	r27, r1
    20be:	63 9f       	mul	r22, r19
    20c0:	aa 27       	eor	r26, r26
    20c2:	f0 0d       	add	r31, r0
    20c4:	b1 1d       	adc	r27, r1
    20c6:	aa 1f       	adc	r26, r26
    20c8:	64 9f       	mul	r22, r20
    20ca:	66 27       	eor	r22, r22
    20cc:	b0 0d       	add	r27, r0
    20ce:	a1 1d       	adc	r26, r1
    20d0:	66 1f       	adc	r22, r22
    20d2:	82 9f       	mul	r24, r18
    20d4:	22 27       	eor	r18, r18
    20d6:	b0 0d       	add	r27, r0
    20d8:	a1 1d       	adc	r26, r1
    20da:	62 1f       	adc	r22, r18
    20dc:	73 9f       	mul	r23, r19
    20de:	b0 0d       	add	r27, r0
    20e0:	a1 1d       	adc	r26, r1
    20e2:	62 1f       	adc	r22, r18
    20e4:	83 9f       	mul	r24, r19
    20e6:	a0 0d       	add	r26, r0
    20e8:	61 1d       	adc	r22, r1
    20ea:	22 1f       	adc	r18, r18
    20ec:	74 9f       	mul	r23, r20
    20ee:	33 27       	eor	r19, r19
    20f0:	a0 0d       	add	r26, r0
    20f2:	61 1d       	adc	r22, r1
    20f4:	23 1f       	adc	r18, r19
    20f6:	84 9f       	mul	r24, r20
    20f8:	60 0d       	add	r22, r0
    20fa:	21 1d       	adc	r18, r1
    20fc:	82 2f       	mov	r24, r18
    20fe:	76 2f       	mov	r23, r22
    2100:	6a 2f       	mov	r22, r26
    2102:	11 24       	eor	r1, r1
    2104:	9f 57       	subi	r25, 0x7F	; 127
    2106:	50 40       	sbci	r21, 0x00	; 0
    2108:	9a f0       	brmi	.+38     	; 0x2130 <__mulsf3_pse+0x88>
    210a:	f1 f0       	breq	.+60     	; 0x2148 <__mulsf3_pse+0xa0>
    210c:	88 23       	and	r24, r24
    210e:	4a f0       	brmi	.+18     	; 0x2122 <__mulsf3_pse+0x7a>
    2110:	ee 0f       	add	r30, r30
    2112:	ff 1f       	adc	r31, r31
    2114:	bb 1f       	adc	r27, r27
    2116:	66 1f       	adc	r22, r22
    2118:	77 1f       	adc	r23, r23
    211a:	88 1f       	adc	r24, r24
    211c:	91 50       	subi	r25, 0x01	; 1
    211e:	50 40       	sbci	r21, 0x00	; 0
    2120:	a9 f7       	brne	.-22     	; 0x210c <__mulsf3_pse+0x64>
    2122:	9e 3f       	cpi	r25, 0xFE	; 254
    2124:	51 05       	cpc	r21, r1
    2126:	80 f0       	brcs	.+32     	; 0x2148 <__mulsf3_pse+0xa0>
    2128:	0c 94 e8 0f 	jmp	0x1fd0	; 0x1fd0 <__fp_inf>
    212c:	0c 94 33 10 	jmp	0x2066	; 0x2066 <__fp_szero>
    2130:	5f 3f       	cpi	r21, 0xFF	; 255
    2132:	e4 f3       	brlt	.-8      	; 0x212c <__mulsf3_pse+0x84>
    2134:	98 3e       	cpi	r25, 0xE8	; 232
    2136:	d4 f3       	brlt	.-12     	; 0x212c <__mulsf3_pse+0x84>
    2138:	86 95       	lsr	r24
    213a:	77 95       	ror	r23
    213c:	67 95       	ror	r22
    213e:	b7 95       	ror	r27
    2140:	f7 95       	ror	r31
    2142:	e7 95       	ror	r30
    2144:	9f 5f       	subi	r25, 0xFF	; 255
    2146:	c1 f7       	brne	.-16     	; 0x2138 <__mulsf3_pse+0x90>
    2148:	fe 2b       	or	r31, r30
    214a:	88 0f       	add	r24, r24
    214c:	91 1d       	adc	r25, r1
    214e:	96 95       	lsr	r25
    2150:	87 95       	ror	r24
    2152:	97 f9       	bld	r25, 7
    2154:	08 95       	ret

00002156 <__udivmodhi4>:
    2156:	aa 1b       	sub	r26, r26
    2158:	bb 1b       	sub	r27, r27
    215a:	51 e1       	ldi	r21, 0x11	; 17
    215c:	07 c0       	rjmp	.+14     	; 0x216c <__udivmodhi4_ep>

0000215e <__udivmodhi4_loop>:
    215e:	aa 1f       	adc	r26, r26
    2160:	bb 1f       	adc	r27, r27
    2162:	a6 17       	cp	r26, r22
    2164:	b7 07       	cpc	r27, r23
    2166:	10 f0       	brcs	.+4      	; 0x216c <__udivmodhi4_ep>
    2168:	a6 1b       	sub	r26, r22
    216a:	b7 0b       	sbc	r27, r23

0000216c <__udivmodhi4_ep>:
    216c:	88 1f       	adc	r24, r24
    216e:	99 1f       	adc	r25, r25
    2170:	5a 95       	dec	r21
    2172:	a9 f7       	brne	.-22     	; 0x215e <__udivmodhi4_loop>
    2174:	80 95       	com	r24
    2176:	90 95       	com	r25
    2178:	bc 01       	movw	r22, r24
    217a:	cd 01       	movw	r24, r26
    217c:	08 95       	ret

0000217e <__divmodhi4>:
    217e:	97 fb       	bst	r25, 7
    2180:	07 2e       	mov	r0, r23
    2182:	16 f4       	brtc	.+4      	; 0x2188 <__divmodhi4+0xa>
    2184:	00 94       	com	r0
    2186:	07 d0       	rcall	.+14     	; 0x2196 <__divmodhi4_neg1>
    2188:	77 fd       	sbrc	r23, 7
    218a:	09 d0       	rcall	.+18     	; 0x219e <__divmodhi4_neg2>
    218c:	0e 94 ab 10 	call	0x2156	; 0x2156 <__udivmodhi4>
    2190:	07 fc       	sbrc	r0, 7
    2192:	05 d0       	rcall	.+10     	; 0x219e <__divmodhi4_neg2>
    2194:	3e f4       	brtc	.+14     	; 0x21a4 <__divmodhi4_exit>

00002196 <__divmodhi4_neg1>:
    2196:	90 95       	com	r25
    2198:	81 95       	neg	r24
    219a:	9f 4f       	sbci	r25, 0xFF	; 255
    219c:	08 95       	ret

0000219e <__divmodhi4_neg2>:
    219e:	70 95       	com	r23
    21a0:	61 95       	neg	r22
    21a2:	7f 4f       	sbci	r23, 0xFF	; 255

000021a4 <__divmodhi4_exit>:
    21a4:	08 95       	ret

000021a6 <__udivmodsi4>:
    21a6:	a1 e2       	ldi	r26, 0x21	; 33
    21a8:	1a 2e       	mov	r1, r26
    21aa:	aa 1b       	sub	r26, r26
    21ac:	bb 1b       	sub	r27, r27
    21ae:	fd 01       	movw	r30, r26
    21b0:	0d c0       	rjmp	.+26     	; 0x21cc <__udivmodsi4_ep>

000021b2 <__udivmodsi4_loop>:
    21b2:	aa 1f       	adc	r26, r26
    21b4:	bb 1f       	adc	r27, r27
    21b6:	ee 1f       	adc	r30, r30
    21b8:	ff 1f       	adc	r31, r31
    21ba:	a2 17       	cp	r26, r18
    21bc:	b3 07       	cpc	r27, r19
    21be:	e4 07       	cpc	r30, r20
    21c0:	f5 07       	cpc	r31, r21
    21c2:	20 f0       	brcs	.+8      	; 0x21cc <__udivmodsi4_ep>
    21c4:	a2 1b       	sub	r26, r18
    21c6:	b3 0b       	sbc	r27, r19
    21c8:	e4 0b       	sbc	r30, r20
    21ca:	f5 0b       	sbc	r31, r21

000021cc <__udivmodsi4_ep>:
    21cc:	66 1f       	adc	r22, r22
    21ce:	77 1f       	adc	r23, r23
    21d0:	88 1f       	adc	r24, r24
    21d2:	99 1f       	adc	r25, r25
    21d4:	1a 94       	dec	r1
    21d6:	69 f7       	brne	.-38     	; 0x21b2 <__udivmodsi4_loop>
    21d8:	60 95       	com	r22
    21da:	70 95       	com	r23
    21dc:	80 95       	com	r24
    21de:	90 95       	com	r25
    21e0:	9b 01       	movw	r18, r22
    21e2:	ac 01       	movw	r20, r24
    21e4:	bd 01       	movw	r22, r26
    21e6:	cf 01       	movw	r24, r30
    21e8:	08 95       	ret

000021ea <strcmp>:
    21ea:	fb 01       	movw	r30, r22
    21ec:	dc 01       	movw	r26, r24
    21ee:	8d 91       	ld	r24, X+
    21f0:	01 90       	ld	r0, Z+
    21f2:	80 19       	sub	r24, r0
    21f4:	01 10       	cpse	r0, r1
    21f6:	d9 f3       	breq	.-10     	; 0x21ee <strcmp+0x4>
    21f8:	99 0b       	sbc	r25, r25
    21fa:	08 95       	ret

000021fc <itoa>:
    21fc:	45 32       	cpi	r20, 0x25	; 37
    21fe:	51 05       	cpc	r21, r1
    2200:	20 f4       	brcc	.+8      	; 0x220a <itoa+0xe>
    2202:	42 30       	cpi	r20, 0x02	; 2
    2204:	10 f0       	brcs	.+4      	; 0x220a <itoa+0xe>
    2206:	0c 94 09 11 	jmp	0x2212	; 0x2212 <__itoa_ncheck>
    220a:	fb 01       	movw	r30, r22
    220c:	10 82       	st	Z, r1
    220e:	cb 01       	movw	r24, r22
    2210:	08 95       	ret

00002212 <__itoa_ncheck>:
    2212:	bb 27       	eor	r27, r27
    2214:	4a 30       	cpi	r20, 0x0A	; 10
    2216:	31 f4       	brne	.+12     	; 0x2224 <__itoa_ncheck+0x12>
    2218:	99 23       	and	r25, r25
    221a:	22 f4       	brpl	.+8      	; 0x2224 <__itoa_ncheck+0x12>
    221c:	bd e2       	ldi	r27, 0x2D	; 45
    221e:	90 95       	com	r25
    2220:	81 95       	neg	r24
    2222:	9f 4f       	sbci	r25, 0xFF	; 255
    2224:	0c 94 15 11 	jmp	0x222a	; 0x222a <__utoa_common>

00002228 <__utoa_ncheck>:
    2228:	bb 27       	eor	r27, r27

0000222a <__utoa_common>:
    222a:	fb 01       	movw	r30, r22
    222c:	55 27       	eor	r21, r21
    222e:	aa 27       	eor	r26, r26
    2230:	88 0f       	add	r24, r24
    2232:	99 1f       	adc	r25, r25
    2234:	aa 1f       	adc	r26, r26
    2236:	a4 17       	cp	r26, r20
    2238:	10 f0       	brcs	.+4      	; 0x223e <__utoa_common+0x14>
    223a:	a4 1b       	sub	r26, r20
    223c:	83 95       	inc	r24
    223e:	50 51       	subi	r21, 0x10	; 16
    2240:	b9 f7       	brne	.-18     	; 0x2230 <__utoa_common+0x6>
    2242:	a0 5d       	subi	r26, 0xD0	; 208
    2244:	aa 33       	cpi	r26, 0x3A	; 58
    2246:	08 f0       	brcs	.+2      	; 0x224a <__utoa_common+0x20>
    2248:	a9 5d       	subi	r26, 0xD9	; 217
    224a:	a1 93       	st	Z+, r26
    224c:	00 97       	sbiw	r24, 0x00	; 0
    224e:	79 f7       	brne	.-34     	; 0x222e <__utoa_common+0x4>
    2250:	b1 11       	cpse	r27, r1
    2252:	b1 93       	st	Z+, r27
    2254:	11 92       	st	Z+, r1
    2256:	cb 01       	movw	r24, r22
    2258:	0c 94 2e 11 	jmp	0x225c	; 0x225c <strrev>

0000225c <strrev>:
    225c:	dc 01       	movw	r26, r24
    225e:	fc 01       	movw	r30, r24
    2260:	67 2f       	mov	r22, r23
    2262:	71 91       	ld	r23, Z+
    2264:	77 23       	and	r23, r23
    2266:	e1 f7       	brne	.-8      	; 0x2260 <strrev+0x4>
    2268:	32 97       	sbiw	r30, 0x02	; 2
    226a:	04 c0       	rjmp	.+8      	; 0x2274 <strrev+0x18>
    226c:	7c 91       	ld	r23, X
    226e:	6d 93       	st	X+, r22
    2270:	70 83       	st	Z, r23
    2272:	62 91       	ld	r22, -Z
    2274:	ae 17       	cp	r26, r30
    2276:	bf 07       	cpc	r27, r31
    2278:	c8 f3       	brcs	.-14     	; 0x226c <strrev+0x10>
    227a:	08 95       	ret

0000227c <_exit>:
    227c:	f8 94       	cli

0000227e <__stop_program>:
    227e:	ff cf       	rjmp	.-2      	; 0x227e <__stop_program>
